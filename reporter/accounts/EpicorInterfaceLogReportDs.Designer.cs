//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.next.isam.reporter.accounts {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EpicorInterfaceLogReportDs")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EpicorInterfaceLogReportDs : global::System.Data.DataSet {
        
        private EpicorInterfaceLogReportDataTable tableEpicorInterfaceLogReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EpicorInterfaceLogReportDs() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected EpicorInterfaceLogReportDs(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EpicorInterfaceLogReport"] != null)) {
                    base.Tables.Add(new EpicorInterfaceLogReportDataTable(ds.Tables["EpicorInterfaceLogReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EpicorInterfaceLogReportDataTable EpicorInterfaceLogReport {
            get {
                return this.tableEpicorInterfaceLogReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            EpicorInterfaceLogReportDs cln = ((EpicorInterfaceLogReportDs)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EpicorInterfaceLogReport"] != null)) {
                    base.Tables.Add(new EpicorInterfaceLogReportDataTable(ds.Tables["EpicorInterfaceLogReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableEpicorInterfaceLogReport = ((EpicorInterfaceLogReportDataTable)(base.Tables["EpicorInterfaceLogReport"]));
            if ((initTable == true)) {
                if ((this.tableEpicorInterfaceLogReport != null)) {
                    this.tableEpicorInterfaceLogReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "EpicorInterfaceLogReportDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EpicorInterfaceLogReportDs.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEpicorInterfaceLogReport = new EpicorInterfaceLogReportDataTable();
            base.Tables.Add(this.tableEpicorInterfaceLogReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEpicorInterfaceLogReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EpicorInterfaceLogReportDs ds = new EpicorInterfaceLogReportDs();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EpicorInterfaceLogReportRowChangeEventHandler(object sender, EpicorInterfaceLogReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EpicorInterfaceLogReportDataTable : global::System.Data.TypedTableBase<EpicorInterfaceLogReportRow> {
            
            private global::System.Data.DataColumn columnSunInterfaceLogId;
            
            private global::System.Data.DataColumn columnInvoiceNo;
            
            private global::System.Data.DataColumn columnSequenceNo;
            
            private global::System.Data.DataColumn columnInvoiceDate;
            
            private global::System.Data.DataColumn columnVendorName;
            
            private global::System.Data.DataColumn columnSupplierInvoiceNo;
            
            private global::System.Data.DataColumn columnItemNo;
            
            private global::System.Data.DataColumn columnProductTeamCode;
            
            private global::System.Data.DataColumn columnContractNo;
            
            private global::System.Data.DataColumn columnDeliveryNo;
            
            private global::System.Data.DataColumn columnTotalQty;
            
            private global::System.Data.DataColumn columnPackingUnitDesc;
            
            private global::System.Data.DataColumn columnTotalPcs;
            
            private global::System.Data.DataColumn columnCurrencyCode;
            
            private global::System.Data.DataColumn columnSalesOtherAmt;
            
            private global::System.Data.DataColumn columnSalesBaseAmt;
            
            private global::System.Data.DataColumn columnNSLCommissionPercent;
            
            private global::System.Data.DataColumn columnSalesCommOtherAmt;
            
            private global::System.Data.DataColumn columnSalesCommBaseAmt;
            
            private global::System.Data.DataColumn columnSeasonCode;
            
            private global::System.Data.DataColumn columnCountryOfOrigin;
            
            private global::System.Data.DataColumn columnOfficeCode;
            
            private global::System.Data.DataColumn columnTermOfPurchaseDesc;
            
            private global::System.Data.DataColumn columnPurchaseOtherAmt;
            
            private global::System.Data.DataColumn columnPurchaseBaseAmt;
            
            private global::System.Data.DataColumn columnOPRFabricTypeName;
            
            private global::System.Data.DataColumn columnTradingAgencyName;
            
            private global::System.Data.DataColumn columnCategoryDesc;
            
            private global::System.Data.DataColumn columnSunInterfaceType;
            
            private global::System.Data.DataColumn columnGroupId;
            
            private global::System.Data.DataColumn columnTransactionId;
            
            private global::System.Data.DataColumn columnSunInterfaceTypeId;
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnShipmentId;
            
            private global::System.Data.DataColumn columnOfficeId;
            
            private global::System.Data.DataColumn columnSeasonId;
            
            private global::System.Data.DataColumn columnCurrencyId;
            
            private global::System.Data.DataColumn columnVendorId;
            
            private global::System.Data.DataColumn columnPackingUnitId;
            
            private global::System.Data.DataColumn columnCountryOfOriginId;
            
            private global::System.Data.DataColumn columnTermOfPurchaseId;
            
            private global::System.Data.DataColumn columnTradingAgencyId;
            
            private global::System.Data.DataColumn columnWithOPRFabric;
            
            private global::System.Data.DataColumn columnQACommissionPercent;
            
            private global::System.Data.DataColumn columnQACommOtherAmount;
            
            private global::System.Data.DataColumn columnQACommBaseAmount;
            
            private global::System.Data.DataColumn columnVendorPaymentDiscountPercent;
            
            private global::System.Data.DataColumn columnPaymentDiscountOtherAmount;
            
            private global::System.Data.DataColumn columnPaymentDiscountBaseAmount;
            
            private global::System.Data.DataColumn columnLabTestIncome;
            
            private global::System.Data.DataColumn columnLabTestIncomeOtherAmount;
            
            private global::System.Data.DataColumn columnLabTestIncomeBaseAmount;
            
            private global::System.Data.DataColumn columnAnySalesAdjustment;
            
            private global::System.Data.DataColumn columnAnyPurchaseAdjustment;
            
            private global::System.Data.DataColumn columnAnyCommAdjustment;
            
            private global::System.Data.DataColumn columnTransactionCategory;
            
            private global::System.Data.DataColumn columnTransactionType;
            
            private global::System.Data.DataColumn columnFiscalYear;
            
            private global::System.Data.DataColumn columnPeriod;
            
            private global::System.Data.DataColumn columnTransactionTime;
            
            private global::System.Data.DataColumn columnIsPrevTransaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportDataTable() {
                this.TableName = "EpicorInterfaceLogReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EpicorInterfaceLogReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EpicorInterfaceLogReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SunInterfaceLogIdColumn {
                get {
                    return this.columnSunInterfaceLogId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InvoiceNoColumn {
                get {
                    return this.columnInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SequenceNoColumn {
                get {
                    return this.columnSequenceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SupplierInvoiceNoColumn {
                get {
                    return this.columnSupplierInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ItemNoColumn {
                get {
                    return this.columnItemNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProductTeamCodeColumn {
                get {
                    return this.columnProductTeamCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractNoColumn {
                get {
                    return this.columnContractNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DeliveryNoColumn {
                get {
                    return this.columnDeliveryNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalQtyColumn {
                get {
                    return this.columnTotalQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PackingUnitDescColumn {
                get {
                    return this.columnPackingUnitDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalPcsColumn {
                get {
                    return this.columnTotalPcs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SalesOtherAmtColumn {
                get {
                    return this.columnSalesOtherAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SalesBaseAmtColumn {
                get {
                    return this.columnSalesBaseAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NSLCommissionPercentColumn {
                get {
                    return this.columnNSLCommissionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SalesCommOtherAmtColumn {
                get {
                    return this.columnSalesCommOtherAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SalesCommBaseAmtColumn {
                get {
                    return this.columnSalesCommBaseAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SeasonCodeColumn {
                get {
                    return this.columnSeasonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CountryOfOriginColumn {
                get {
                    return this.columnCountryOfOrigin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OfficeCodeColumn {
                get {
                    return this.columnOfficeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TermOfPurchaseDescColumn {
                get {
                    return this.columnTermOfPurchaseDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PurchaseOtherAmtColumn {
                get {
                    return this.columnPurchaseOtherAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PurchaseBaseAmtColumn {
                get {
                    return this.columnPurchaseBaseAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OPRFabricTypeNameColumn {
                get {
                    return this.columnOPRFabricTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TradingAgencyNameColumn {
                get {
                    return this.columnTradingAgencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CategoryDescColumn {
                get {
                    return this.columnCategoryDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SunInterfaceTypeColumn {
                get {
                    return this.columnSunInterfaceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TransactionIdColumn {
                get {
                    return this.columnTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SunInterfaceTypeIdColumn {
                get {
                    return this.columnSunInterfaceTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShipmentIdColumn {
                get {
                    return this.columnShipmentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OfficeIdColumn {
                get {
                    return this.columnOfficeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SeasonIdColumn {
                get {
                    return this.columnSeasonId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrencyIdColumn {
                get {
                    return this.columnCurrencyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VendorIdColumn {
                get {
                    return this.columnVendorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PackingUnitIdColumn {
                get {
                    return this.columnPackingUnitId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CountryOfOriginIdColumn {
                get {
                    return this.columnCountryOfOriginId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TermOfPurchaseIdColumn {
                get {
                    return this.columnTermOfPurchaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TradingAgencyIdColumn {
                get {
                    return this.columnTradingAgencyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WithOPRFabricColumn {
                get {
                    return this.columnWithOPRFabric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QACommissionPercentColumn {
                get {
                    return this.columnQACommissionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QACommOtherAmountColumn {
                get {
                    return this.columnQACommOtherAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QACommBaseAmountColumn {
                get {
                    return this.columnQACommBaseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VendorPaymentDiscountPercentColumn {
                get {
                    return this.columnVendorPaymentDiscountPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaymentDiscountOtherAmountColumn {
                get {
                    return this.columnPaymentDiscountOtherAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaymentDiscountBaseAmountColumn {
                get {
                    return this.columnPaymentDiscountBaseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LabTestIncomeColumn {
                get {
                    return this.columnLabTestIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LabTestIncomeOtherAmountColumn {
                get {
                    return this.columnLabTestIncomeOtherAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LabTestIncomeBaseAmountColumn {
                get {
                    return this.columnLabTestIncomeBaseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AnySalesAdjustmentColumn {
                get {
                    return this.columnAnySalesAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AnyPurchaseAdjustmentColumn {
                get {
                    return this.columnAnyPurchaseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AnyCommAdjustmentColumn {
                get {
                    return this.columnAnyCommAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TransactionCategoryColumn {
                get {
                    return this.columnTransactionCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TransactionTypeColumn {
                get {
                    return this.columnTransactionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FiscalYearColumn {
                get {
                    return this.columnFiscalYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PeriodColumn {
                get {
                    return this.columnPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TransactionTimeColumn {
                get {
                    return this.columnTransactionTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPrevTransactionColumn {
                get {
                    return this.columnIsPrevTransaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportRow this[int index] {
                get {
                    return ((EpicorInterfaceLogReportRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EpicorInterfaceLogReportRowChangeEventHandler EpicorInterfaceLogReportRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EpicorInterfaceLogReportRowChangeEventHandler EpicorInterfaceLogReportRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EpicorInterfaceLogReportRowChangeEventHandler EpicorInterfaceLogReportRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EpicorInterfaceLogReportRowChangeEventHandler EpicorInterfaceLogReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEpicorInterfaceLogReportRow(EpicorInterfaceLogReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportRow AddEpicorInterfaceLogReportRow(
                        int SunInterfaceLogId, 
                        string InvoiceNo, 
                        int SequenceNo, 
                        System.DateTime InvoiceDate, 
                        string VendorName, 
                        string SupplierInvoiceNo, 
                        string ItemNo, 
                        string ProductTeamCode, 
                        string ContractNo, 
                        int DeliveryNo, 
                        int TotalQty, 
                        string PackingUnitDesc, 
                        int TotalPcs, 
                        string CurrencyCode, 
                        decimal SalesOtherAmt, 
                        decimal SalesBaseAmt, 
                        decimal NSLCommissionPercent, 
                        decimal SalesCommOtherAmt, 
                        decimal SalesCommBaseAmt, 
                        string SeasonCode, 
                        string CountryOfOrigin, 
                        string OfficeCode, 
                        string TermOfPurchaseDesc, 
                        decimal PurchaseOtherAmt, 
                        decimal PurchaseBaseAmt, 
                        string OPRFabricTypeName, 
                        string TradingAgencyName, 
                        string CategoryDesc, 
                        string SunInterfaceType, 
                        string GroupId, 
                        int TransactionId, 
                        int SunInterfaceTypeId, 
                        int CategoryId, 
                        int ShipmentId, 
                        int OfficeId, 
                        int SeasonId, 
                        int CurrencyId, 
                        int VendorId, 
                        int PackingUnitId, 
                        int CountryOfOriginId, 
                        int TermOfPurchaseId, 
                        int TradingAgencyId, 
                        int WithOPRFabric, 
                        decimal QACommissionPercent, 
                        decimal QACommOtherAmount, 
                        decimal QACommBaseAmount, 
                        decimal VendorPaymentDiscountPercent, 
                        decimal PaymentDiscountOtherAmount, 
                        decimal PaymentDiscountBaseAmount, 
                        decimal LabTestIncome, 
                        decimal LabTestIncomeOtherAmount, 
                        decimal LabTestIncomeBaseAmount, 
                        int AnySalesAdjustment, 
                        int AnyPurchaseAdjustment, 
                        int AnyCommAdjustment, 
                        string TransactionCategory, 
                        string TransactionType, 
                        int FiscalYear, 
                        int Period, 
                        System.DateTime TransactionTime, 
                        int IsPrevTransaction) {
                EpicorInterfaceLogReportRow rowEpicorInterfaceLogReportRow = ((EpicorInterfaceLogReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SunInterfaceLogId,
                        InvoiceNo,
                        SequenceNo,
                        InvoiceDate,
                        VendorName,
                        SupplierInvoiceNo,
                        ItemNo,
                        ProductTeamCode,
                        ContractNo,
                        DeliveryNo,
                        TotalQty,
                        PackingUnitDesc,
                        TotalPcs,
                        CurrencyCode,
                        SalesOtherAmt,
                        SalesBaseAmt,
                        NSLCommissionPercent,
                        SalesCommOtherAmt,
                        SalesCommBaseAmt,
                        SeasonCode,
                        CountryOfOrigin,
                        OfficeCode,
                        TermOfPurchaseDesc,
                        PurchaseOtherAmt,
                        PurchaseBaseAmt,
                        OPRFabricTypeName,
                        TradingAgencyName,
                        CategoryDesc,
                        SunInterfaceType,
                        GroupId,
                        TransactionId,
                        SunInterfaceTypeId,
                        CategoryId,
                        ShipmentId,
                        OfficeId,
                        SeasonId,
                        CurrencyId,
                        VendorId,
                        PackingUnitId,
                        CountryOfOriginId,
                        TermOfPurchaseId,
                        TradingAgencyId,
                        WithOPRFabric,
                        QACommissionPercent,
                        QACommOtherAmount,
                        QACommBaseAmount,
                        VendorPaymentDiscountPercent,
                        PaymentDiscountOtherAmount,
                        PaymentDiscountBaseAmount,
                        LabTestIncome,
                        LabTestIncomeOtherAmount,
                        LabTestIncomeBaseAmount,
                        AnySalesAdjustment,
                        AnyPurchaseAdjustment,
                        AnyCommAdjustment,
                        TransactionCategory,
                        TransactionType,
                        FiscalYear,
                        Period,
                        TransactionTime,
                        IsPrevTransaction};
                rowEpicorInterfaceLogReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEpicorInterfaceLogReportRow);
                return rowEpicorInterfaceLogReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EpicorInterfaceLogReportDataTable cln = ((EpicorInterfaceLogReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EpicorInterfaceLogReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSunInterfaceLogId = base.Columns["SunInterfaceLogId"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnSequenceNo = base.Columns["SequenceNo"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnVendorName = base.Columns["VendorName"];
                this.columnSupplierInvoiceNo = base.Columns["SupplierInvoiceNo"];
                this.columnItemNo = base.Columns["ItemNo"];
                this.columnProductTeamCode = base.Columns["ProductTeamCode"];
                this.columnContractNo = base.Columns["ContractNo"];
                this.columnDeliveryNo = base.Columns["DeliveryNo"];
                this.columnTotalQty = base.Columns["TotalQty"];
                this.columnPackingUnitDesc = base.Columns["PackingUnitDesc"];
                this.columnTotalPcs = base.Columns["TotalPcs"];
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
                this.columnSalesOtherAmt = base.Columns["SalesOtherAmt"];
                this.columnSalesBaseAmt = base.Columns["SalesBaseAmt"];
                this.columnNSLCommissionPercent = base.Columns["NSLCommissionPercent"];
                this.columnSalesCommOtherAmt = base.Columns["SalesCommOtherAmt"];
                this.columnSalesCommBaseAmt = base.Columns["SalesCommBaseAmt"];
                this.columnSeasonCode = base.Columns["SeasonCode"];
                this.columnCountryOfOrigin = base.Columns["CountryOfOrigin"];
                this.columnOfficeCode = base.Columns["OfficeCode"];
                this.columnTermOfPurchaseDesc = base.Columns["TermOfPurchaseDesc"];
                this.columnPurchaseOtherAmt = base.Columns["PurchaseOtherAmt"];
                this.columnPurchaseBaseAmt = base.Columns["PurchaseBaseAmt"];
                this.columnOPRFabricTypeName = base.Columns["OPRFabricTypeName"];
                this.columnTradingAgencyName = base.Columns["TradingAgencyName"];
                this.columnCategoryDesc = base.Columns["CategoryDesc"];
                this.columnSunInterfaceType = base.Columns["SunInterfaceType"];
                this.columnGroupId = base.Columns["GroupId"];
                this.columnTransactionId = base.Columns["TransactionId"];
                this.columnSunInterfaceTypeId = base.Columns["SunInterfaceTypeId"];
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnShipmentId = base.Columns["ShipmentId"];
                this.columnOfficeId = base.Columns["OfficeId"];
                this.columnSeasonId = base.Columns["SeasonId"];
                this.columnCurrencyId = base.Columns["CurrencyId"];
                this.columnVendorId = base.Columns["VendorId"];
                this.columnPackingUnitId = base.Columns["PackingUnitId"];
                this.columnCountryOfOriginId = base.Columns["CountryOfOriginId"];
                this.columnTermOfPurchaseId = base.Columns["TermOfPurchaseId"];
                this.columnTradingAgencyId = base.Columns["TradingAgencyId"];
                this.columnWithOPRFabric = base.Columns["WithOPRFabric"];
                this.columnQACommissionPercent = base.Columns["QACommissionPercent"];
                this.columnQACommOtherAmount = base.Columns["QACommOtherAmount"];
                this.columnQACommBaseAmount = base.Columns["QACommBaseAmount"];
                this.columnVendorPaymentDiscountPercent = base.Columns["VendorPaymentDiscountPercent"];
                this.columnPaymentDiscountOtherAmount = base.Columns["PaymentDiscountOtherAmount"];
                this.columnPaymentDiscountBaseAmount = base.Columns["PaymentDiscountBaseAmount"];
                this.columnLabTestIncome = base.Columns["LabTestIncome"];
                this.columnLabTestIncomeOtherAmount = base.Columns["LabTestIncomeOtherAmount"];
                this.columnLabTestIncomeBaseAmount = base.Columns["LabTestIncomeBaseAmount"];
                this.columnAnySalesAdjustment = base.Columns["AnySalesAdjustment"];
                this.columnAnyPurchaseAdjustment = base.Columns["AnyPurchaseAdjustment"];
                this.columnAnyCommAdjustment = base.Columns["AnyCommAdjustment"];
                this.columnTransactionCategory = base.Columns["TransactionCategory"];
                this.columnTransactionType = base.Columns["TransactionType"];
                this.columnFiscalYear = base.Columns["FiscalYear"];
                this.columnPeriod = base.Columns["Period"];
                this.columnTransactionTime = base.Columns["TransactionTime"];
                this.columnIsPrevTransaction = base.Columns["IsPrevTransaction"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSunInterfaceLogId = new global::System.Data.DataColumn("SunInterfaceLogId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSunInterfaceLogId);
                this.columnInvoiceNo = new global::System.Data.DataColumn("InvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnSequenceNo = new global::System.Data.DataColumn("SequenceNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNo);
                this.columnInvoiceDate = new global::System.Data.DataColumn("InvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnVendorName = new global::System.Data.DataColumn("VendorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorName);
                this.columnSupplierInvoiceNo = new global::System.Data.DataColumn("SupplierInvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierInvoiceNo);
                this.columnItemNo = new global::System.Data.DataColumn("ItemNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemNo);
                this.columnProductTeamCode = new global::System.Data.DataColumn("ProductTeamCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductTeamCode);
                this.columnContractNo = new global::System.Data.DataColumn("ContractNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractNo);
                this.columnDeliveryNo = new global::System.Data.DataColumn("DeliveryNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryNo);
                this.columnTotalQty = new global::System.Data.DataColumn("TotalQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalQty);
                this.columnPackingUnitDesc = new global::System.Data.DataColumn("PackingUnitDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingUnitDesc);
                this.columnTotalPcs = new global::System.Data.DataColumn("TotalPcs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPcs);
                this.columnCurrencyCode = new global::System.Data.DataColumn("CurrencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
                this.columnSalesOtherAmt = new global::System.Data.DataColumn("SalesOtherAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesOtherAmt);
                this.columnSalesBaseAmt = new global::System.Data.DataColumn("SalesBaseAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesBaseAmt);
                this.columnNSLCommissionPercent = new global::System.Data.DataColumn("NSLCommissionPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNSLCommissionPercent);
                this.columnSalesCommOtherAmt = new global::System.Data.DataColumn("SalesCommOtherAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesCommOtherAmt);
                this.columnSalesCommBaseAmt = new global::System.Data.DataColumn("SalesCommBaseAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesCommBaseAmt);
                this.columnSeasonCode = new global::System.Data.DataColumn("SeasonCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeasonCode);
                this.columnCountryOfOrigin = new global::System.Data.DataColumn("CountryOfOrigin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryOfOrigin);
                this.columnOfficeCode = new global::System.Data.DataColumn("OfficeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfficeCode);
                this.columnTermOfPurchaseDesc = new global::System.Data.DataColumn("TermOfPurchaseDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermOfPurchaseDesc);
                this.columnPurchaseOtherAmt = new global::System.Data.DataColumn("PurchaseOtherAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseOtherAmt);
                this.columnPurchaseBaseAmt = new global::System.Data.DataColumn("PurchaseBaseAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseBaseAmt);
                this.columnOPRFabricTypeName = new global::System.Data.DataColumn("OPRFabricTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPRFabricTypeName);
                this.columnTradingAgencyName = new global::System.Data.DataColumn("TradingAgencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradingAgencyName);
                this.columnCategoryDesc = new global::System.Data.DataColumn("CategoryDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryDesc);
                this.columnSunInterfaceType = new global::System.Data.DataColumn("SunInterfaceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSunInterfaceType);
                this.columnGroupId = new global::System.Data.DataColumn("GroupId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnTransactionId = new global::System.Data.DataColumn("TransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionId);
                this.columnSunInterfaceTypeId = new global::System.Data.DataColumn("SunInterfaceTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSunInterfaceTypeId);
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnShipmentId = new global::System.Data.DataColumn("ShipmentId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentId);
                this.columnOfficeId = new global::System.Data.DataColumn("OfficeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfficeId);
                this.columnSeasonId = new global::System.Data.DataColumn("SeasonId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeasonId);
                this.columnCurrencyId = new global::System.Data.DataColumn("CurrencyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyId);
                this.columnVendorId = new global::System.Data.DataColumn("VendorId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorId);
                this.columnPackingUnitId = new global::System.Data.DataColumn("PackingUnitId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingUnitId);
                this.columnCountryOfOriginId = new global::System.Data.DataColumn("CountryOfOriginId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryOfOriginId);
                this.columnTermOfPurchaseId = new global::System.Data.DataColumn("TermOfPurchaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermOfPurchaseId);
                this.columnTradingAgencyId = new global::System.Data.DataColumn("TradingAgencyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradingAgencyId);
                this.columnWithOPRFabric = new global::System.Data.DataColumn("WithOPRFabric", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWithOPRFabric);
                this.columnQACommissionPercent = new global::System.Data.DataColumn("QACommissionPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQACommissionPercent);
                this.columnQACommOtherAmount = new global::System.Data.DataColumn("QACommOtherAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQACommOtherAmount);
                this.columnQACommBaseAmount = new global::System.Data.DataColumn("QACommBaseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQACommBaseAmount);
                this.columnVendorPaymentDiscountPercent = new global::System.Data.DataColumn("VendorPaymentDiscountPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorPaymentDiscountPercent);
                this.columnPaymentDiscountOtherAmount = new global::System.Data.DataColumn("PaymentDiscountOtherAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDiscountOtherAmount);
                this.columnPaymentDiscountBaseAmount = new global::System.Data.DataColumn("PaymentDiscountBaseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDiscountBaseAmount);
                this.columnLabTestIncome = new global::System.Data.DataColumn("LabTestIncome", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabTestIncome);
                this.columnLabTestIncomeOtherAmount = new global::System.Data.DataColumn("LabTestIncomeOtherAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabTestIncomeOtherAmount);
                this.columnLabTestIncomeBaseAmount = new global::System.Data.DataColumn("LabTestIncomeBaseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabTestIncomeBaseAmount);
                this.columnAnySalesAdjustment = new global::System.Data.DataColumn("AnySalesAdjustment", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnySalesAdjustment);
                this.columnAnyPurchaseAdjustment = new global::System.Data.DataColumn("AnyPurchaseAdjustment", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnyPurchaseAdjustment);
                this.columnAnyCommAdjustment = new global::System.Data.DataColumn("AnyCommAdjustment", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnyCommAdjustment);
                this.columnTransactionCategory = new global::System.Data.DataColumn("TransactionCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionCategory);
                this.columnTransactionType = new global::System.Data.DataColumn("TransactionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionType);
                this.columnFiscalYear = new global::System.Data.DataColumn("FiscalYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFiscalYear);
                this.columnPeriod = new global::System.Data.DataColumn("Period", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriod);
                this.columnTransactionTime = new global::System.Data.DataColumn("TransactionTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionTime);
                this.columnIsPrevTransaction = new global::System.Data.DataColumn("IsPrevTransaction", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrevTransaction);
                this.columnSunInterfaceLogId.AllowDBNull = false;
                this.columnInvoiceNo.ReadOnly = true;
                this.columnInvoiceNo.MaxLength = 20;
                this.columnVendorName.AllowDBNull = false;
                this.columnVendorName.MaxLength = 100;
                this.columnSupplierInvoiceNo.ReadOnly = true;
                this.columnSupplierInvoiceNo.MaxLength = 80;
                this.columnItemNo.AllowDBNull = false;
                this.columnItemNo.MaxLength = 15;
                this.columnContractNo.AllowDBNull = false;
                this.columnContractNo.MaxLength = 50;
                this.columnDeliveryNo.AllowDBNull = false;
                this.columnTotalQty.AllowDBNull = false;
                this.columnPackingUnitDesc.AllowDBNull = false;
                this.columnPackingUnitDesc.MaxLength = 50;
                this.columnTotalPcs.ReadOnly = true;
                this.columnCurrencyCode.MaxLength = 10;
                this.columnSalesOtherAmt.ReadOnly = true;
                this.columnSalesBaseAmt.ReadOnly = true;
                this.columnNSLCommissionPercent.ReadOnly = true;
                this.columnSalesCommOtherAmt.ReadOnly = true;
                this.columnSalesCommBaseAmt.ReadOnly = true;
                this.columnSeasonCode.MaxLength = 10;
                this.columnCountryOfOrigin.AllowDBNull = false;
                this.columnCountryOfOrigin.MaxLength = 2;
                this.columnOfficeCode.AllowDBNull = false;
                this.columnOfficeCode.MaxLength = 5;
                this.columnTermOfPurchaseDesc.AllowDBNull = false;
                this.columnTermOfPurchaseDesc.MaxLength = 50;
                this.columnPurchaseOtherAmt.ReadOnly = true;
                this.columnPurchaseBaseAmt.ReadOnly = true;
                this.columnOPRFabricTypeName.AllowDBNull = false;
                this.columnOPRFabricTypeName.MaxLength = 50;
                this.columnTradingAgencyName.AllowDBNull = false;
                this.columnTradingAgencyName.MaxLength = 10;
                this.columnCategoryDesc.MaxLength = 20;
                this.columnSunInterfaceType.AllowDBNull = false;
                this.columnSunInterfaceType.ReadOnly = true;
                this.columnSunInterfaceType.MaxLength = 500;
                this.columnGroupId.ReadOnly = true;
                this.columnGroupId.MaxLength = 32;
                this.columnTransactionId.ReadOnly = true;
                this.columnSunInterfaceTypeId.AllowDBNull = false;
                this.columnCategoryId.AllowDBNull = false;
                this.columnShipmentId.AllowDBNull = false;
                this.columnOfficeId.AllowDBNull = false;
                this.columnSeasonId.AllowDBNull = false;
                this.columnCurrencyId.AllowDBNull = false;
                this.columnVendorId.AllowDBNull = false;
                this.columnPackingUnitId.AllowDBNull = false;
                this.columnCountryOfOriginId.AllowDBNull = false;
                this.columnTermOfPurchaseId.AllowDBNull = false;
                this.columnTradingAgencyId.AllowDBNull = false;
                this.columnWithOPRFabric.AllowDBNull = false;
                this.columnQACommissionPercent.ReadOnly = true;
                this.columnQACommOtherAmount.ReadOnly = true;
                this.columnQACommBaseAmount.ReadOnly = true;
                this.columnVendorPaymentDiscountPercent.ReadOnly = true;
                this.columnPaymentDiscountOtherAmount.ReadOnly = true;
                this.columnPaymentDiscountBaseAmount.ReadOnly = true;
                this.columnLabTestIncome.ReadOnly = true;
                this.columnLabTestIncomeOtherAmount.ReadOnly = true;
                this.columnLabTestIncomeBaseAmount.ReadOnly = true;
                this.columnAnySalesAdjustment.ReadOnly = true;
                this.columnAnyPurchaseAdjustment.ReadOnly = true;
                this.columnAnyCommAdjustment.ReadOnly = true;
                this.columnTransactionCategory.ReadOnly = true;
                this.columnTransactionCategory.MaxLength = 20;
                this.columnTransactionType.ReadOnly = true;
                this.columnTransactionType.MaxLength = 500;
                this.columnFiscalYear.AllowDBNull = false;
                this.columnPeriod.AllowDBNull = false;
                this.columnIsPrevTransaction.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportRow NewEpicorInterfaceLogReportRow() {
                return ((EpicorInterfaceLogReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EpicorInterfaceLogReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EpicorInterfaceLogReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EpicorInterfaceLogReportRowChanged != null)) {
                    this.EpicorInterfaceLogReportRowChanged(this, new EpicorInterfaceLogReportRowChangeEvent(((EpicorInterfaceLogReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EpicorInterfaceLogReportRowChanging != null)) {
                    this.EpicorInterfaceLogReportRowChanging(this, new EpicorInterfaceLogReportRowChangeEvent(((EpicorInterfaceLogReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EpicorInterfaceLogReportRowDeleted != null)) {
                    this.EpicorInterfaceLogReportRowDeleted(this, new EpicorInterfaceLogReportRowChangeEvent(((EpicorInterfaceLogReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EpicorInterfaceLogReportRowDeleting != null)) {
                    this.EpicorInterfaceLogReportRowDeleting(this, new EpicorInterfaceLogReportRowChangeEvent(((EpicorInterfaceLogReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEpicorInterfaceLogReportRow(EpicorInterfaceLogReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EpicorInterfaceLogReportDs ds = new EpicorInterfaceLogReportDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EpicorInterfaceLogReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EpicorInterfaceLogReportRow : global::System.Data.DataRow {
            
            private EpicorInterfaceLogReportDataTable tableEpicorInterfaceLogReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EpicorInterfaceLogReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEpicorInterfaceLogReport = ((EpicorInterfaceLogReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SunInterfaceLogId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.SunInterfaceLogIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SunInterfaceLogIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.InvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNo\' in table \'EpicorInterfaceLogReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.InvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SequenceNo {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.SequenceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequenceNo\' in table \'EpicorInterfaceLogReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SequenceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime InvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEpicorInterfaceLogReport.InvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDate\' in table \'EpicorInterfaceLogReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.InvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VendorName {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.VendorNameColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.VendorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SupplierInvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.SupplierInvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SupplierInvoiceNo\' in table \'EpicorInterfaceLogReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SupplierInvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ItemNo {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.ItemNoColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.ItemNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProductTeamCode {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.ProductTeamCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductTeamCode\' in table \'EpicorInterfaceLogReport\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.ProductTeamCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ContractNo {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.ContractNoColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.ContractNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DeliveryNo {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.DeliveryNoColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.DeliveryNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TotalQty {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.TotalQtyColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TotalQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackingUnitDesc {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.PackingUnitDescColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PackingUnitDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TotalPcs {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.TotalPcsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPcs\' in table \'EpicorInterfaceLogReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TotalPcsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CurrencyCode {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.CurrencyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrencyCode\' in table \'EpicorInterfaceLogReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CurrencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SalesOtherAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.SalesOtherAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesOtherAmt\' in table \'EpicorInterfaceLogReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SalesOtherAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SalesBaseAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.SalesBaseAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesBaseAmt\' in table \'EpicorInterfaceLogReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SalesBaseAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NSLCommissionPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.NSLCommissionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NSLCommissionPercent\' in table \'EpicorInterfaceLogReport\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.NSLCommissionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SalesCommOtherAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.SalesCommOtherAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesCommOtherAmt\' in table \'EpicorInterfaceLogReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SalesCommOtherAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SalesCommBaseAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.SalesCommBaseAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesCommBaseAmt\' in table \'EpicorInterfaceLogReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SalesCommBaseAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SeasonCode {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.SeasonCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeasonCode\' in table \'EpicorInterfaceLogReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SeasonCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CountryOfOrigin {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.CountryOfOriginColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CountryOfOriginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OfficeCode {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.OfficeCodeColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.OfficeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TermOfPurchaseDesc {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.TermOfPurchaseDescColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TermOfPurchaseDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PurchaseOtherAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.PurchaseOtherAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseOtherAmt\' in table \'EpicorInterfaceLogReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PurchaseOtherAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PurchaseBaseAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.PurchaseBaseAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseBaseAmt\' in table \'EpicorInterfaceLogReport\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PurchaseBaseAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OPRFabricTypeName {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.OPRFabricTypeNameColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.OPRFabricTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TradingAgencyName {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.TradingAgencyNameColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TradingAgencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CategoryDesc {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.CategoryDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryDesc\' in table \'EpicorInterfaceLogReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CategoryDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SunInterfaceType {
                get {
                    return ((string)(this[this.tableEpicorInterfaceLogReport.SunInterfaceTypeColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SunInterfaceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GroupId {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.GroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupId\' in table \'EpicorInterfaceLogReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.GroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TransactionId {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.TransactionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionId\' in table \'EpicorInterfaceLogReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SunInterfaceTypeId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.SunInterfaceTypeIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SunInterfaceTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CategoryId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.CategoryIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ShipmentId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.ShipmentIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.ShipmentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OfficeId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.OfficeIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.OfficeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SeasonId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.SeasonIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.SeasonIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrencyId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.CurrencyIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CurrencyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int VendorId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.VendorIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.VendorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackingUnitId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.PackingUnitIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PackingUnitIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CountryOfOriginId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.CountryOfOriginIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.CountryOfOriginIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TermOfPurchaseId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.TermOfPurchaseIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TermOfPurchaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TradingAgencyId {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.TradingAgencyIdColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TradingAgencyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WithOPRFabric {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.WithOPRFabricColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.WithOPRFabricColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal QACommissionPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.QACommissionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QACommissionPercent\' in table \'EpicorInterfaceLogReport\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.QACommissionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal QACommOtherAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.QACommOtherAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QACommOtherAmount\' in table \'EpicorInterfaceLogReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.QACommOtherAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal QACommBaseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.QACommBaseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QACommBaseAmount\' in table \'EpicorInterfaceLogReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.QACommBaseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal VendorPaymentDiscountPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.VendorPaymentDiscountPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorPaymentDiscountPercent\' in table \'EpicorInterfaceLogR" +
                                "eport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.VendorPaymentDiscountPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PaymentDiscountOtherAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.PaymentDiscountOtherAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDiscountOtherAmount\' in table \'EpicorInterfaceLogRep" +
                                "ort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PaymentDiscountOtherAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PaymentDiscountBaseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.PaymentDiscountBaseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDiscountBaseAmount\' in table \'EpicorInterfaceLogRepo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PaymentDiscountBaseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LabTestIncome {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.LabTestIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabTestIncome\' in table \'EpicorInterfaceLogReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.LabTestIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LabTestIncomeOtherAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.LabTestIncomeOtherAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabTestIncomeOtherAmount\' in table \'EpicorInterfaceLogRepor" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.LabTestIncomeOtherAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LabTestIncomeBaseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEpicorInterfaceLogReport.LabTestIncomeBaseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabTestIncomeBaseAmount\' in table \'EpicorInterfaceLogReport" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.LabTestIncomeBaseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int AnySalesAdjustment {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.AnySalesAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnySalesAdjustment\' in table \'EpicorInterfaceLogReport\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.AnySalesAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int AnyPurchaseAdjustment {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.AnyPurchaseAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnyPurchaseAdjustment\' in table \'EpicorInterfaceLogReport\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.AnyPurchaseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int AnyCommAdjustment {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.AnyCommAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnyCommAdjustment\' in table \'EpicorInterfaceLogReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.AnyCommAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TransactionCategory {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.TransactionCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionCategory\' in table \'EpicorInterfaceLogReport\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TransactionCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TransactionType {
                get {
                    try {
                        return ((string)(this[this.tableEpicorInterfaceLogReport.TransactionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionType\' in table \'EpicorInterfaceLogReport\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TransactionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FiscalYear {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.FiscalYearColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.FiscalYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Period {
                get {
                    return ((int)(this[this.tableEpicorInterfaceLogReport.PeriodColumn]));
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.PeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime TransactionTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEpicorInterfaceLogReport.TransactionTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionTime\' in table \'EpicorInterfaceLogReport\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.TransactionTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IsPrevTransaction {
                get {
                    try {
                        return ((int)(this[this.tableEpicorInterfaceLogReport.IsPrevTransactionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrevTransaction\' in table \'EpicorInterfaceLogReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEpicorInterfaceLogReport.IsPrevTransactionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceNoNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.InvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceNoNull() {
                this[this.tableEpicorInterfaceLogReport.InvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSequenceNoNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SequenceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSequenceNoNull() {
                this[this.tableEpicorInterfaceLogReport.SequenceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceDateNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.InvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceDateNull() {
                this[this.tableEpicorInterfaceLogReport.InvoiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSupplierInvoiceNoNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SupplierInvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSupplierInvoiceNoNull() {
                this[this.tableEpicorInterfaceLogReport.SupplierInvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProductTeamCodeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.ProductTeamCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProductTeamCodeNull() {
                this[this.tableEpicorInterfaceLogReport.ProductTeamCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTotalPcsNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.TotalPcsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalPcsNull() {
                this[this.tableEpicorInterfaceLogReport.TotalPcsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrencyCodeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.CurrencyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrencyCodeNull() {
                this[this.tableEpicorInterfaceLogReport.CurrencyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSalesOtherAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SalesOtherAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSalesOtherAmtNull() {
                this[this.tableEpicorInterfaceLogReport.SalesOtherAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSalesBaseAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SalesBaseAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSalesBaseAmtNull() {
                this[this.tableEpicorInterfaceLogReport.SalesBaseAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNSLCommissionPercentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.NSLCommissionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNSLCommissionPercentNull() {
                this[this.tableEpicorInterfaceLogReport.NSLCommissionPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSalesCommOtherAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SalesCommOtherAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSalesCommOtherAmtNull() {
                this[this.tableEpicorInterfaceLogReport.SalesCommOtherAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSalesCommBaseAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SalesCommBaseAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSalesCommBaseAmtNull() {
                this[this.tableEpicorInterfaceLogReport.SalesCommBaseAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSeasonCodeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.SeasonCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSeasonCodeNull() {
                this[this.tableEpicorInterfaceLogReport.SeasonCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPurchaseOtherAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.PurchaseOtherAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPurchaseOtherAmtNull() {
                this[this.tableEpicorInterfaceLogReport.PurchaseOtherAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPurchaseBaseAmtNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.PurchaseBaseAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPurchaseBaseAmtNull() {
                this[this.tableEpicorInterfaceLogReport.PurchaseBaseAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCategoryDescNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.CategoryDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCategoryDescNull() {
                this[this.tableEpicorInterfaceLogReport.CategoryDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupIdNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.GroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGroupIdNull() {
                this[this.tableEpicorInterfaceLogReport.GroupIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTransactionIdNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.TransactionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTransactionIdNull() {
                this[this.tableEpicorInterfaceLogReport.TransactionIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQACommissionPercentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.QACommissionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQACommissionPercentNull() {
                this[this.tableEpicorInterfaceLogReport.QACommissionPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQACommOtherAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.QACommOtherAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQACommOtherAmountNull() {
                this[this.tableEpicorInterfaceLogReport.QACommOtherAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQACommBaseAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.QACommBaseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQACommBaseAmountNull() {
                this[this.tableEpicorInterfaceLogReport.QACommBaseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVendorPaymentDiscountPercentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.VendorPaymentDiscountPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVendorPaymentDiscountPercentNull() {
                this[this.tableEpicorInterfaceLogReport.VendorPaymentDiscountPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaymentDiscountOtherAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.PaymentDiscountOtherAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaymentDiscountOtherAmountNull() {
                this[this.tableEpicorInterfaceLogReport.PaymentDiscountOtherAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaymentDiscountBaseAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.PaymentDiscountBaseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaymentDiscountBaseAmountNull() {
                this[this.tableEpicorInterfaceLogReport.PaymentDiscountBaseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabTestIncomeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.LabTestIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabTestIncomeNull() {
                this[this.tableEpicorInterfaceLogReport.LabTestIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabTestIncomeOtherAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.LabTestIncomeOtherAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabTestIncomeOtherAmountNull() {
                this[this.tableEpicorInterfaceLogReport.LabTestIncomeOtherAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabTestIncomeBaseAmountNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.LabTestIncomeBaseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabTestIncomeBaseAmountNull() {
                this[this.tableEpicorInterfaceLogReport.LabTestIncomeBaseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAnySalesAdjustmentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.AnySalesAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAnySalesAdjustmentNull() {
                this[this.tableEpicorInterfaceLogReport.AnySalesAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAnyPurchaseAdjustmentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.AnyPurchaseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAnyPurchaseAdjustmentNull() {
                this[this.tableEpicorInterfaceLogReport.AnyPurchaseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAnyCommAdjustmentNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.AnyCommAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAnyCommAdjustmentNull() {
                this[this.tableEpicorInterfaceLogReport.AnyCommAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTransactionCategoryNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.TransactionCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTransactionCategoryNull() {
                this[this.tableEpicorInterfaceLogReport.TransactionCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTransactionTypeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.TransactionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTransactionTypeNull() {
                this[this.tableEpicorInterfaceLogReport.TransactionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTransactionTimeNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.TransactionTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTransactionTimeNull() {
                this[this.tableEpicorInterfaceLogReport.TransactionTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPrevTransactionNull() {
                return this.IsNull(this.tableEpicorInterfaceLogReport.IsPrevTransactionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPrevTransactionNull() {
                this[this.tableEpicorInterfaceLogReport.IsPrevTransactionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EpicorInterfaceLogReportRowChangeEvent : global::System.EventArgs {
            
            private EpicorInterfaceLogReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportRowChangeEvent(EpicorInterfaceLogReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EpicorInterfaceLogReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace com.next.isam.reporter.accounts.EpicorInterfaceLogReportDsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EpicorInterfaceLogReportAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EpicorInterfaceLogReportAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EpicorInterfaceLogReport";
            tableMapping.ColumnMappings.Add("SunInterfaceLogId", "SunInterfaceLogId");
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo");
            tableMapping.ColumnMappings.Add("SequenceNo", "SequenceNo");
            tableMapping.ColumnMappings.Add("InvoiceDate", "InvoiceDate");
            tableMapping.ColumnMappings.Add("VendorName", "VendorName");
            tableMapping.ColumnMappings.Add("SupplierInvoiceNo", "SupplierInvoiceNo");
            tableMapping.ColumnMappings.Add("ItemNo", "ItemNo");
            tableMapping.ColumnMappings.Add("ProductTeamCode", "ProductTeamCode");
            tableMapping.ColumnMappings.Add("ContractNo", "ContractNo");
            tableMapping.ColumnMappings.Add("DeliveryNo", "DeliveryNo");
            tableMapping.ColumnMappings.Add("TotalQty", "TotalQty");
            tableMapping.ColumnMappings.Add("PackingUnitDesc", "PackingUnitDesc");
            tableMapping.ColumnMappings.Add("TotalPcs", "TotalPcs");
            tableMapping.ColumnMappings.Add("CurrencyCode", "CurrencyCode");
            tableMapping.ColumnMappings.Add("SalesOtherAmt", "SalesOtherAmt");
            tableMapping.ColumnMappings.Add("SalesBaseAmt", "SalesBaseAmt");
            tableMapping.ColumnMappings.Add("NSLCommissionPercent", "NSLCommissionPercent");
            tableMapping.ColumnMappings.Add("SalesCommOtherAmt", "SalesCommOtherAmt");
            tableMapping.ColumnMappings.Add("SalesCommBaseAmt", "SalesCommBaseAmt");
            tableMapping.ColumnMappings.Add("SeasonCode", "SeasonCode");
            tableMapping.ColumnMappings.Add("CountryOfOrigin", "CountryOfOrigin");
            tableMapping.ColumnMappings.Add("OfficeCode", "OfficeCode");
            tableMapping.ColumnMappings.Add("TermOfPurchaseDesc", "TermOfPurchaseDesc");
            tableMapping.ColumnMappings.Add("PurchaseOtherAmt", "PurchaseOtherAmt");
            tableMapping.ColumnMappings.Add("PurchaseBaseAmt", "PurchaseBaseAmt");
            tableMapping.ColumnMappings.Add("OPRFabricTypeName", "OPRFabricTypeName");
            tableMapping.ColumnMappings.Add("TradingAgencyName", "TradingAgencyName");
            tableMapping.ColumnMappings.Add("CategoryDesc", "CategoryDesc");
            tableMapping.ColumnMappings.Add("SunInterfaceType", "SunInterfaceType");
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("TransactionId", "TransactionId");
            tableMapping.ColumnMappings.Add("SunInterfaceTypeId", "SunInterfaceTypeId");
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("ShipmentId", "ShipmentId");
            tableMapping.ColumnMappings.Add("OfficeId", "OfficeId");
            tableMapping.ColumnMappings.Add("SeasonId", "SeasonId");
            tableMapping.ColumnMappings.Add("CurrencyId", "CurrencyId");
            tableMapping.ColumnMappings.Add("VendorId", "VendorId");
            tableMapping.ColumnMappings.Add("PackingUnitId", "PackingUnitId");
            tableMapping.ColumnMappings.Add("CountryOfOriginId", "CountryOfOriginId");
            tableMapping.ColumnMappings.Add("TermOfPurchaseId", "TermOfPurchaseId");
            tableMapping.ColumnMappings.Add("TradingAgencyId", "TradingAgencyId");
            tableMapping.ColumnMappings.Add("WithOPRFabric", "WithOPRFabric");
            tableMapping.ColumnMappings.Add("QACommissionPercent", "QACommissionPercent");
            tableMapping.ColumnMappings.Add("QACommOtherAmount", "QACommOtherAmount");
            tableMapping.ColumnMappings.Add("QACommBaseAmount", "QACommBaseAmount");
            tableMapping.ColumnMappings.Add("VendorPaymentDiscountPercent", "VendorPaymentDiscountPercent");
            tableMapping.ColumnMappings.Add("PaymentDiscountOtherAmount", "PaymentDiscountOtherAmount");
            tableMapping.ColumnMappings.Add("PaymentDiscountBaseAmount", "PaymentDiscountBaseAmount");
            tableMapping.ColumnMappings.Add("LabTestIncome", "LabTestIncome");
            tableMapping.ColumnMappings.Add("LabTestIncomeOtherAmount", "LabTestIncomeOtherAmount");
            tableMapping.ColumnMappings.Add("LabTestIncomeBaseAmount", "LabTestIncomeBaseAmount");
            tableMapping.ColumnMappings.Add("AnySalesAdjustment", "AnySalesAdjustment");
            tableMapping.ColumnMappings.Add("AnyPurchaseAdjustment", "AnyPurchaseAdjustment");
            tableMapping.ColumnMappings.Add("AnyCommAdjustment", "AnyCommAdjustment");
            tableMapping.ColumnMappings.Add("TransactionCategory", "TransactionCategory");
            tableMapping.ColumnMappings.Add("TransactionType", "TransactionType");
            tableMapping.ColumnMappings.Add("FiscalYear", "FiscalYear");
            tableMapping.ColumnMappings.Add("Period", "Period");
            tableMapping.ColumnMappings.Add("TransactionTime", "TransactionTime");
            tableMapping.ColumnMappings.Add("IsPrevTransaction", "IsPrevTransaction");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::com.next.isam.reporter.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT\t\t\r\n\t\t\tGroupId= \'IS\'+convert(varchar,sl.QueueId),\r\n\t\t\tTransactionId = x.Sun" +
                "InterfaceLogId, \r\n\t\t\tTransactionType = (SELECT Description FROM SunInterfaceType" +
                " where SunInterfaceTypeId=sl.SunInterfaceTypeId),\r\n\t\t\tTransactionCategory = (SEL" +
                "ECT Description FROM SunInterfaceCategory where CategoryId=sl.CategoryId),\r\n\t\t\tI" +
                "sPrevTransaction = (case when x.PrevAdjustmentLogId = ll.SunInterfaceLogId then " +
                "1 else 0 end),\r\n\t\t\tll.SunInterfaceLogId, \r\n\t\t\tll.SunInterfaceTypeId, ll.Category" +
                "Id,  ll.FiscalYear, ll.Period, \r\n\t\t\tTransactionTime = sq.CompletedTime,\r\n\t\t\tll.S" +
                "hipmentId, \r\n\t\t\tll.OfficeId, ll.SeasonId, ll.CurrencyId, ll.VendorId,\r\n\t\t\tll.Pac" +
                "kingUnitId, ll.CountryOfOriginId, ll.TermOfPurchaseId, ll.TradingAgencyId, ll.Wi" +
                "thOPRFabric,\r\n\t\t\tTotalQty = ll.qty,\t\r\n\t\t\tTotalPcs = ll.qty * ll.PiecesPerpack,\t\r" +
                "\n\t\t\tInvoiceNo = dbo.fn_formatInvoiceNo(ll.InvoicePrefix, ll.InvoiceSeq, ll.Invoi" +
                "ceYear), \t\r\n\t\t\tSupplierInvoiceNo = ISNULL(ll.SupplierInvoiceNo,\'\'),\t\r\n\r\n\t\t\tSales" +
                "OtherAmt = (case when ll.SunInterfaceTypeId=1 then isnull(ll.OtherAmt,0) else 0 " +
                "end),\t\r\n\t\t\tSalesBaseAmt  = (case when ll.SunInterfaceTypeId=1 then isnull(ll.Bas" +
                "eAmt,0) else 0 end),\t\r\n\r\n\t\t\tNSLCommissionPercent =  (case when ll.SunInterfaceTy" +
                "peId=2 and ll.TotalShippedAmt<>0 then convert(decimal(18,2),round(isnull(ll.Othe" +
                "rAmt/ll.TotalShippedAmt * 100,0), 2)) else 0 end),\r\n\t\t\tSalesCommOtherAmt = (case" +
                " when ll.SunInterfaceTypeId=2 then ISNULL(ll.OtherAmt,0) else 0 end),\r\n\t\t\tSalesC" +
                "ommBaseAmt = (case when ll.SunInterfaceTypeId=2 then ISNULL(ll.BaseAmt,0) else 0" +
                " end),\r\n\r\n\t\t\tPurchaseOtherAmt = (case when ll.SunInterfaceTypeId=3 then ISNULL(l" +
                "l.OtherAmt,0) else 0 end),\r\n\t\t\tPurchaseBaseAmt = (case when ll.SunInterfaceTypeI" +
                "d=3 then ISNULL(ll.BaseAmt, 0) else 0 end),\r\n\r\n\t\t\tQACommissionPercent = ISNULL(l" +
                "l.QACommissionPercent, 0),\r\n\t\t\tQACommOtherAmount = (CASE WHEN ll.SunInterfaceTyp" +
                "eId=3 and ISNULL(ll.QACommissionPercent,0) <> 0 THEN ROUND(ll.OtherAmt * ll.QACo" +
                "mmissionPercent / 100, 2) else 0.00 END),\r\n\t\t\tQACommBaseAmount = (CASE WHEN ll.S" +
                "unInterfaceTypeId=3 and ISNULL(ll.QACommissionPercent,0) <> 0 THEN ROUND(ll.Base" +
                "Amt * ll.QACommissionPercent / 100, 2) ELSE 0.00 END),\r\n\r\n\t\t\tVendorPaymentDiscou" +
                "ntPercent = ISNULL(ll.VendorPaymentDiscountPercent, 0),\r\n\t\t\tPaymentDiscountOther" +
                "Amount = (CASE WHEN ll.SunInterfaceTypeId=3 THEN ROUND(ll.OtherAmt * ll.VendorPa" +
                "ymentDiscountPercent / 100 , 2) ELSE 0.00 END),\r\n\t\t\tPaymentDiscountBaseAmount = " +
                "(CASE WHEN ll.SunInterfaceTypeId=3 THEN ROUND(ll.BaseAmt * ll.VendorPaymentDisco" +
                "untPercent / 100 , 2) ELSE 0.00 END),\r\n\r\n\t\t\tLabTestIncome = ISNULL(ll.LabTestInc" +
                "ome,0),\r\n\t\t\tLabTestIncomeOtherAmount = ll.LabTestIncome * ll.Qty,\r\n\t\t\tLabTestInc" +
                "omeBaseAmount = (case when ll.SunInterfaceTypeId=3 and ll.OtherAmt<>0 then ROUND" +
                "(ll.LabTestIncome * ll.Qty * ll.BaseAmt / ll.OtherAmt, 2) else 0.00 end),\r\n\r\n\t\t\t" +
                "AnySalesAdjustment = (case when ll.SunInterfaceTypeId=1 then 1 else 0 end),\r\n\t\t\t" +
                "AnyPurchaseAdjustment = (case when ll.SunInterfaceTypeId=3 then 1 else 0 end),\r\n" +
                "\t\t\tAnyCommAdjustment =  (case when ll.SunInterfaceTypeId=2 then 1 else 0 end),\r\n" +
                "\r\n\t\t\tSequenceNo = i.SequenceNo,\t\r\n\t\t\tInvoiceDate = i.InvoiceDate,\t\r\n\t\t\tVendorNam" +
                "e = v.Name,\r\n\t\t\tp.ItemNo,\t\r\n\t\t\tProductTeamCode = pt.code, \t\r\n\t\t\tc.ContractNo, s." +
                "DeliveryNo, \t\r\n\t\t\tpu.PackingUnitDesc, \t\r\n\t\t\tcy.CurrencyCode, \t\r\n\t\t\tSeasonCode = " +
                "sn.code,\r\n\t\t\tCountryOfOrigin = co.code,\r\n\t\t\tOfficeCode = o.OfficeCode,\r\n\t\t\tTermO" +
                "fPurchaseDesc = tp.TermOfPurchaseDesc,\r\n\t\t\toft.OPRFabricTypeName,\r\n\t\t\tTradingAge" +
                "ncyName = ta.ShortName,\r\n\t\t\tCategoryDesc = ic.Description,\r\n\t\t\tSunInterfaceType " +
                "= it.Description \r\n\tFROM (\r\n\t\tSELECT Shipmentid=0, SunInterfaceTypeId=0, SunInte" +
                "rfaceLogId=0, PrevAdjustmentLogId = 0) AS x\r\n\t\tinner join sunInterfacelog as sl " +
                "with (nolock) on sl.SunInterfaceLogId=x.SunInterfaceLogId\r\n\t\tinner join sunInter" +
                "facelog as ll with (nolock) on ll.shipmentid=x.shipmentid and (ll.SunInterfaceLo" +
                "gId=x.SunInterfaceLogId or ll.SunInterfaceLogId=x.PrevAdjustmentLogId)\r\n\t\tinner " +
                "join sunInterfaceQueue as sq with (nolock) on sq.QueueId=sl.QueueId and sq.statu" +
                "s = 1 and sq.queueId>0\r\n\t\tINNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId" +
                " = x.ShipmentId\r\n\t\tINNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.Co" +
                "ntractId\r\n\t\tINNER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = x.ShipmentI" +
                "d\r\n\t\tINNER JOIN Product AS p WITH (NOLOCK) ON p.ProductId = c.ProductId and p.st" +
                "atus=1\t\r\n\t\tINNER JOIN nsldb..OfficeStructure as pt WITH (NOLOCK) ON pt.OfficeStr" +
                "uctureId=c.ProductTeamId and pt.Status=1\t\r\n\t\tINNER JOIN SunInterfaceCategory as " +
                "ic with (nolock) on ic.CategoryId=ll.CategoryId and ic.status=1\t\r\n\t\tINNER JOIN P" +
                "ackingUnit as pu with (nolock) on pu.PackingUnitId=ll.PackingUnitId and pu.statu" +
                "s=1\t\r\n\t\tINNER JOIN Currency as cy with (nolock) on cy.CurrencyId=ll.currencyid \t" +
                "\r\n\t\tINNER JOIN Office as o with (nolock) on o.OfficeId=ll.OfficeId and o.status=" +
                "1\t\r\n\t\tINNER JOIN nsldb..Season as sn with (nolock) on sn.seasonId=ll.seasonId an" +
                "d sn.status=1\t\r\n\t\tINNER JOIN CountryOfOrigin as co with (nolock) on co.CountryOf" +
                "OriginId=ll.CountryOfOriginId\t\r\n\t\tINNER JOIN TermOfPurchase as tp with (nolock) " +
                "on tp.TermOfPurchaseId=ll.TermOfPurchaseId and tp.status=1\t\r\n\t\tINNER JOIN Tradin" +
                "gAgency as ta with (nolock) on ta.TradingAgencyId=ll.TradingAgencyId\t\r\n\t\tINNER J" +
                "OIN OPRFabricType as oft with (nolock) on oft.OPRFabricTypeId = ll.WithOPRFabric" +
                " and oft.status=1\t\r\n\t\tINNER JOIN nslindustry..Vendor AS v with (nolock) on v.Ven" +
                "dorId=s.VendorId\t\r\n\t\tINNER JOIN SunInterfaceType AS it with (nolock) on it.SunIn" +
                "terfaceTypeId=x.SunInterfaceTypeId and it.status=1\r\nWHERE 1=0";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EpicorInterfaceLogReportDs.EpicorInterfaceLogReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EpicorInterfaceLogReportDs.EpicorInterfaceLogReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EpicorInterfaceLogReportDs.EpicorInterfaceLogReportDataTable dataTable = new EpicorInterfaceLogReportDs.EpicorInterfaceLogReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(EpicorInterfaceLogReportDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(EpicorInterfaceLogReportDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(EpicorInterfaceLogReportDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(EpicorInterfaceLogReportDs dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591