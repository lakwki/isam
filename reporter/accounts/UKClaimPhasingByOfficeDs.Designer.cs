//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.next.isam.reporter.accounts {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UKClaimPhasingByOfficeDs")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UKClaimPhasingByOfficeDs : global::System.Data.DataSet {
        
        private UKClaimPhasingDataTable tableUKClaimPhasing;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UKClaimPhasingByOfficeDs() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected UKClaimPhasingByOfficeDs(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UKClaimPhasing"] != null)) {
                    base.Tables.Add(new UKClaimPhasingDataTable(ds.Tables["UKClaimPhasing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UKClaimPhasingDataTable UKClaimPhasing {
            get {
                return this.tableUKClaimPhasing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            UKClaimPhasingByOfficeDs cln = ((UKClaimPhasingByOfficeDs)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UKClaimPhasing"] != null)) {
                    base.Tables.Add(new UKClaimPhasingDataTable(ds.Tables["UKClaimPhasing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableUKClaimPhasing = ((UKClaimPhasingDataTable)(base.Tables["UKClaimPhasing"]));
            if ((initTable == true)) {
                if ((this.tableUKClaimPhasing != null)) {
                    this.tableUKClaimPhasing.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "UKClaimPhasingByOfficeDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UKClaimPhasingByOfficeDs.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUKClaimPhasing = new UKClaimPhasingDataTable();
            base.Tables.Add(this.tableUKClaimPhasing);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeUKClaimPhasing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UKClaimPhasingByOfficeDs ds = new UKClaimPhasingByOfficeDs();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void UKClaimPhasingRowChangeEventHandler(object sender, UKClaimPhasingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UKClaimPhasingDataTable : global::System.Data.TypedTableBase<UKClaimPhasingRow> {
            
            private global::System.Data.DataColumn columnFiscalYear;
            
            private global::System.Data.DataColumn columnPeriod;
            
            private global::System.Data.DataColumn columnHKAmountUSD;
            
            private global::System.Data.DataColumn columnSHAmountUSD;
            
            private global::System.Data.DataColumn columnLKAmountUSD;
            
            private global::System.Data.DataColumn columnTHAmountUSD;
            
            private global::System.Data.DataColumn columnIDAmountUSD;
            
            private global::System.Data.DataColumn columnPHAmountUSD;
            
            private global::System.Data.DataColumn columnBDAmountUSD;
            
            private global::System.Data.DataColumn columnINAmountUSD;
            
            private global::System.Data.DataColumn columnTRAmountUSD;
            
            private global::System.Data.DataColumn columnUKAmountUSD;
            
            private global::System.Data.DataColumn columnFYAmountUSD;
            
            private global::System.Data.DataColumn columnNMAmountUSD;
            
            private global::System.Data.DataColumn columnNDAmountUSD;
            
            private global::System.Data.DataColumn columnPKAmountUSD;
            
            private global::System.Data.DataColumn columnMAAmountUSD;
            
            private global::System.Data.DataColumn columnVNAmountUSD;
            
            private global::System.Data.DataColumn columnDGAmountUSD;
            
            private global::System.Data.DataColumn columnEGAmountUSD;
            
            private global::System.Data.DataColumn columnCAAmountUSD;
            
            private global::System.Data.DataColumn columnTotalAmountUSD;
            
            private global::System.Data.DataColumn columnParty;
            
            private global::System.Data.DataColumn columnPayReceive;
            
            private global::System.Data.DataColumn columnSZAmountUSD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingDataTable() {
                this.TableName = "UKClaimPhasing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal UKClaimPhasingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected UKClaimPhasingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FiscalYearColumn {
                get {
                    return this.columnFiscalYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PeriodColumn {
                get {
                    return this.columnPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HKAmountUSDColumn {
                get {
                    return this.columnHKAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHAmountUSDColumn {
                get {
                    return this.columnSHAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LKAmountUSDColumn {
                get {
                    return this.columnLKAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn THAmountUSDColumn {
                get {
                    return this.columnTHAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDAmountUSDColumn {
                get {
                    return this.columnIDAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PHAmountUSDColumn {
                get {
                    return this.columnPHAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BDAmountUSDColumn {
                get {
                    return this.columnBDAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INAmountUSDColumn {
                get {
                    return this.columnINAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRAmountUSDColumn {
                get {
                    return this.columnTRAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UKAmountUSDColumn {
                get {
                    return this.columnUKAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FYAmountUSDColumn {
                get {
                    return this.columnFYAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NMAmountUSDColumn {
                get {
                    return this.columnNMAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NDAmountUSDColumn {
                get {
                    return this.columnNDAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PKAmountUSDColumn {
                get {
                    return this.columnPKAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MAAmountUSDColumn {
                get {
                    return this.columnMAAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VNAmountUSDColumn {
                get {
                    return this.columnVNAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DGAmountUSDColumn {
                get {
                    return this.columnDGAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EGAmountUSDColumn {
                get {
                    return this.columnEGAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CAAmountUSDColumn {
                get {
                    return this.columnCAAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalAmountUSDColumn {
                get {
                    return this.columnTotalAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PartyColumn {
                get {
                    return this.columnParty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PayReceiveColumn {
                get {
                    return this.columnPayReceive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SZAmountUSDColumn {
                get {
                    return this.columnSZAmountUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingRow this[int index] {
                get {
                    return ((UKClaimPhasingRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UKClaimPhasingRowChangeEventHandler UKClaimPhasingRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UKClaimPhasingRowChangeEventHandler UKClaimPhasingRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UKClaimPhasingRowChangeEventHandler UKClaimPhasingRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UKClaimPhasingRowChangeEventHandler UKClaimPhasingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddUKClaimPhasingRow(UKClaimPhasingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingRow AddUKClaimPhasingRow(
                        int FiscalYear, 
                        int Period, 
                        decimal HKAmountUSD, 
                        decimal SHAmountUSD, 
                        decimal LKAmountUSD, 
                        decimal THAmountUSD, 
                        decimal IDAmountUSD, 
                        decimal PHAmountUSD, 
                        decimal BDAmountUSD, 
                        decimal INAmountUSD, 
                        decimal TRAmountUSD, 
                        decimal UKAmountUSD, 
                        decimal FYAmountUSD, 
                        decimal NMAmountUSD, 
                        decimal NDAmountUSD, 
                        decimal PKAmountUSD, 
                        decimal MAAmountUSD, 
                        decimal VNAmountUSD, 
                        decimal DGAmountUSD, 
                        decimal EGAmountUSD, 
                        decimal CAAmountUSD, 
                        decimal TotalAmountUSD, 
                        string Party, 
                        string PayReceive, 
                        decimal SZAmountUSD) {
                UKClaimPhasingRow rowUKClaimPhasingRow = ((UKClaimPhasingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FiscalYear,
                        Period,
                        HKAmountUSD,
                        SHAmountUSD,
                        LKAmountUSD,
                        THAmountUSD,
                        IDAmountUSD,
                        PHAmountUSD,
                        BDAmountUSD,
                        INAmountUSD,
                        TRAmountUSD,
                        UKAmountUSD,
                        FYAmountUSD,
                        NMAmountUSD,
                        NDAmountUSD,
                        PKAmountUSD,
                        MAAmountUSD,
                        VNAmountUSD,
                        DGAmountUSD,
                        EGAmountUSD,
                        CAAmountUSD,
                        TotalAmountUSD,
                        Party,
                        PayReceive,
                        SZAmountUSD};
                rowUKClaimPhasingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUKClaimPhasingRow);
                return rowUKClaimPhasingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                UKClaimPhasingDataTable cln = ((UKClaimPhasingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UKClaimPhasingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnFiscalYear = base.Columns["FiscalYear"];
                this.columnPeriod = base.Columns["Period"];
                this.columnHKAmountUSD = base.Columns["HKAmountUSD"];
                this.columnSHAmountUSD = base.Columns["SHAmountUSD"];
                this.columnLKAmountUSD = base.Columns["LKAmountUSD"];
                this.columnTHAmountUSD = base.Columns["THAmountUSD"];
                this.columnIDAmountUSD = base.Columns["IDAmountUSD"];
                this.columnPHAmountUSD = base.Columns["PHAmountUSD"];
                this.columnBDAmountUSD = base.Columns["BDAmountUSD"];
                this.columnINAmountUSD = base.Columns["INAmountUSD"];
                this.columnTRAmountUSD = base.Columns["TRAmountUSD"];
                this.columnUKAmountUSD = base.Columns["UKAmountUSD"];
                this.columnFYAmountUSD = base.Columns["FYAmountUSD"];
                this.columnNMAmountUSD = base.Columns["NMAmountUSD"];
                this.columnNDAmountUSD = base.Columns["NDAmountUSD"];
                this.columnPKAmountUSD = base.Columns["PKAmountUSD"];
                this.columnMAAmountUSD = base.Columns["MAAmountUSD"];
                this.columnVNAmountUSD = base.Columns["VNAmountUSD"];
                this.columnDGAmountUSD = base.Columns["DGAmountUSD"];
                this.columnEGAmountUSD = base.Columns["EGAmountUSD"];
                this.columnCAAmountUSD = base.Columns["CAAmountUSD"];
                this.columnTotalAmountUSD = base.Columns["TotalAmountUSD"];
                this.columnParty = base.Columns["Party"];
                this.columnPayReceive = base.Columns["PayReceive"];
                this.columnSZAmountUSD = base.Columns["SZAmountUSD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnFiscalYear = new global::System.Data.DataColumn("FiscalYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFiscalYear);
                this.columnPeriod = new global::System.Data.DataColumn("Period", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriod);
                this.columnHKAmountUSD = new global::System.Data.DataColumn("HKAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHKAmountUSD);
                this.columnSHAmountUSD = new global::System.Data.DataColumn("SHAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHAmountUSD);
                this.columnLKAmountUSD = new global::System.Data.DataColumn("LKAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLKAmountUSD);
                this.columnTHAmountUSD = new global::System.Data.DataColumn("THAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHAmountUSD);
                this.columnIDAmountUSD = new global::System.Data.DataColumn("IDAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAmountUSD);
                this.columnPHAmountUSD = new global::System.Data.DataColumn("PHAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHAmountUSD);
                this.columnBDAmountUSD = new global::System.Data.DataColumn("BDAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBDAmountUSD);
                this.columnINAmountUSD = new global::System.Data.DataColumn("INAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINAmountUSD);
                this.columnTRAmountUSD = new global::System.Data.DataColumn("TRAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRAmountUSD);
                this.columnUKAmountUSD = new global::System.Data.DataColumn("UKAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUKAmountUSD);
                this.columnFYAmountUSD = new global::System.Data.DataColumn("FYAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFYAmountUSD);
                this.columnNMAmountUSD = new global::System.Data.DataColumn("NMAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNMAmountUSD);
                this.columnNDAmountUSD = new global::System.Data.DataColumn("NDAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNDAmountUSD);
                this.columnPKAmountUSD = new global::System.Data.DataColumn("PKAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPKAmountUSD);
                this.columnMAAmountUSD = new global::System.Data.DataColumn("MAAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAAmountUSD);
                this.columnVNAmountUSD = new global::System.Data.DataColumn("VNAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVNAmountUSD);
                this.columnDGAmountUSD = new global::System.Data.DataColumn("DGAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDGAmountUSD);
                this.columnEGAmountUSD = new global::System.Data.DataColumn("EGAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEGAmountUSD);
                this.columnCAAmountUSD = new global::System.Data.DataColumn("CAAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAAmountUSD);
                this.columnTotalAmountUSD = new global::System.Data.DataColumn("TotalAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountUSD);
                this.columnParty = new global::System.Data.DataColumn("Party", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParty);
                this.columnPayReceive = new global::System.Data.DataColumn("PayReceive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayReceive);
                this.columnSZAmountUSD = new global::System.Data.DataColumn("SZAmountUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSZAmountUSD);
                this.columnFiscalYear.AllowDBNull = false;
                this.columnPeriod.AllowDBNull = false;
                this.columnHKAmountUSD.ReadOnly = true;
                this.columnSHAmountUSD.ReadOnly = true;
                this.columnLKAmountUSD.ReadOnly = true;
                this.columnTHAmountUSD.ReadOnly = true;
                this.columnIDAmountUSD.ReadOnly = true;
                this.columnPHAmountUSD.ReadOnly = true;
                this.columnBDAmountUSD.ReadOnly = true;
                this.columnINAmountUSD.ReadOnly = true;
                this.columnTRAmountUSD.ReadOnly = true;
                this.columnUKAmountUSD.ReadOnly = true;
                this.columnFYAmountUSD.ReadOnly = true;
                this.columnNMAmountUSD.ReadOnly = true;
                this.columnNDAmountUSD.ReadOnly = true;
                this.columnPKAmountUSD.ReadOnly = true;
                this.columnMAAmountUSD.ReadOnly = true;
                this.columnVNAmountUSD.ReadOnly = true;
                this.columnDGAmountUSD.ReadOnly = true;
                this.columnEGAmountUSD.ReadOnly = true;
                this.columnCAAmountUSD.ReadOnly = true;
                this.columnTotalAmountUSD.ReadOnly = true;
                this.columnParty.ReadOnly = true;
                this.columnParty.MaxLength = 8;
                this.columnPayReceive.ReadOnly = true;
                this.columnPayReceive.MaxLength = 7;
                this.columnSZAmountUSD.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingRow NewUKClaimPhasingRow() {
                return ((UKClaimPhasingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UKClaimPhasingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(UKClaimPhasingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UKClaimPhasingRowChanged != null)) {
                    this.UKClaimPhasingRowChanged(this, new UKClaimPhasingRowChangeEvent(((UKClaimPhasingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UKClaimPhasingRowChanging != null)) {
                    this.UKClaimPhasingRowChanging(this, new UKClaimPhasingRowChangeEvent(((UKClaimPhasingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UKClaimPhasingRowDeleted != null)) {
                    this.UKClaimPhasingRowDeleted(this, new UKClaimPhasingRowChangeEvent(((UKClaimPhasingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UKClaimPhasingRowDeleting != null)) {
                    this.UKClaimPhasingRowDeleting(this, new UKClaimPhasingRowChangeEvent(((UKClaimPhasingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveUKClaimPhasingRow(UKClaimPhasingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UKClaimPhasingByOfficeDs ds = new UKClaimPhasingByOfficeDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UKClaimPhasingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UKClaimPhasingRow : global::System.Data.DataRow {
            
            private UKClaimPhasingDataTable tableUKClaimPhasing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal UKClaimPhasingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUKClaimPhasing = ((UKClaimPhasingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FiscalYear {
                get {
                    return ((int)(this[this.tableUKClaimPhasing.FiscalYearColumn]));
                }
                set {
                    this[this.tableUKClaimPhasing.FiscalYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Period {
                get {
                    return ((int)(this[this.tableUKClaimPhasing.PeriodColumn]));
                }
                set {
                    this[this.tableUKClaimPhasing.PeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HKAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.HKAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HKAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.HKAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SHAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.SHAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.SHAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LKAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.LKAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LKAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.LKAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal THAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.THAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'THAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.THAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal IDAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.IDAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.IDAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PHAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.PHAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.PHAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal BDAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.BDAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BDAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.BDAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal INAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.INAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.INAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TRAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.TRAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.TRAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal UKAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.UKAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UKAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.UKAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FYAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.FYAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FYAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.FYAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NMAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.NMAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NMAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.NMAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NDAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.NDAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NDAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.NDAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PKAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.PKAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PKAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.PKAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MAAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.MAAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.MAAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal VNAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.VNAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VNAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.VNAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DGAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.DGAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DGAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.DGAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EGAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.EGAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EGAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.EGAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CAAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.CAAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.CAAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TotalAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.TotalAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.TotalAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Party {
                get {
                    try {
                        return ((string)(this[this.tableUKClaimPhasing.PartyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Party\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.PartyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PayReceive {
                get {
                    try {
                        return ((string)(this[this.tableUKClaimPhasing.PayReceiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayReceive\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.PayReceiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SZAmountUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableUKClaimPhasing.SZAmountUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SZAmountUSD\' in table \'UKClaimPhasing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUKClaimPhasing.SZAmountUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHKAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.HKAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHKAmountUSDNull() {
                this[this.tableUKClaimPhasing.HKAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.SHAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHAmountUSDNull() {
                this[this.tableUKClaimPhasing.SHAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLKAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.LKAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLKAmountUSDNull() {
                this[this.tableUKClaimPhasing.LKAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTHAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.THAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTHAmountUSDNull() {
                this[this.tableUKClaimPhasing.THAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.IDAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDAmountUSDNull() {
                this[this.tableUKClaimPhasing.IDAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPHAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.PHAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPHAmountUSDNull() {
                this[this.tableUKClaimPhasing.PHAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBDAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.BDAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBDAmountUSDNull() {
                this[this.tableUKClaimPhasing.BDAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.INAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINAmountUSDNull() {
                this[this.tableUKClaimPhasing.INAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.TRAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRAmountUSDNull() {
                this[this.tableUKClaimPhasing.TRAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUKAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.UKAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUKAmountUSDNull() {
                this[this.tableUKClaimPhasing.UKAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFYAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.FYAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFYAmountUSDNull() {
                this[this.tableUKClaimPhasing.FYAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNMAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.NMAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNMAmountUSDNull() {
                this[this.tableUKClaimPhasing.NMAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNDAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.NDAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNDAmountUSDNull() {
                this[this.tableUKClaimPhasing.NDAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPKAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.PKAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPKAmountUSDNull() {
                this[this.tableUKClaimPhasing.PKAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMAAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.MAAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMAAmountUSDNull() {
                this[this.tableUKClaimPhasing.MAAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVNAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.VNAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVNAmountUSDNull() {
                this[this.tableUKClaimPhasing.VNAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDGAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.DGAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDGAmountUSDNull() {
                this[this.tableUKClaimPhasing.DGAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEGAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.EGAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEGAmountUSDNull() {
                this[this.tableUKClaimPhasing.EGAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCAAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.CAAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCAAmountUSDNull() {
                this[this.tableUKClaimPhasing.CAAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTotalAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.TotalAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalAmountUSDNull() {
                this[this.tableUKClaimPhasing.TotalAmountUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPartyNull() {
                return this.IsNull(this.tableUKClaimPhasing.PartyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPartyNull() {
                this[this.tableUKClaimPhasing.PartyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPayReceiveNull() {
                return this.IsNull(this.tableUKClaimPhasing.PayReceiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPayReceiveNull() {
                this[this.tableUKClaimPhasing.PayReceiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSZAmountUSDNull() {
                return this.IsNull(this.tableUKClaimPhasing.SZAmountUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSZAmountUSDNull() {
                this[this.tableUKClaimPhasing.SZAmountUSDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class UKClaimPhasingRowChangeEvent : global::System.EventArgs {
            
            private UKClaimPhasingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingRowChangeEvent(UKClaimPhasingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UKClaimPhasingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace com.next.isam.reporter.accounts.UKClaimPhasingByOfficeDsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UKClaimPhasingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UKClaimPhasingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UKClaimPhasing";
            tableMapping.ColumnMappings.Add("FiscalYear", "FiscalYear");
            tableMapping.ColumnMappings.Add("Period", "Period");
            tableMapping.ColumnMappings.Add("HKAmountUSD", "HKAmountUSD");
            tableMapping.ColumnMappings.Add("SHAmountUSD", "SHAmountUSD");
            tableMapping.ColumnMappings.Add("LKAmountUSD", "LKAmountUSD");
            tableMapping.ColumnMappings.Add("THAmountUSD", "THAmountUSD");
            tableMapping.ColumnMappings.Add("IDAmountUSD", "IDAmountUSD");
            tableMapping.ColumnMappings.Add("PHAmountUSD", "PHAmountUSD");
            tableMapping.ColumnMappings.Add("BDAmountUSD", "BDAmountUSD");
            tableMapping.ColumnMappings.Add("INAmountUSD", "INAmountUSD");
            tableMapping.ColumnMappings.Add("TRAmountUSD", "TRAmountUSD");
            tableMapping.ColumnMappings.Add("UKAmountUSD", "UKAmountUSD");
            tableMapping.ColumnMappings.Add("FYAmountUSD", "FYAmountUSD");
            tableMapping.ColumnMappings.Add("NMAmountUSD", "NMAmountUSD");
            tableMapping.ColumnMappings.Add("NDAmountUSD", "NDAmountUSD");
            tableMapping.ColumnMappings.Add("PKAmountUSD", "PKAmountUSD");
            tableMapping.ColumnMappings.Add("MAAmountUSD", "MAAmountUSD");
            tableMapping.ColumnMappings.Add("VNAmountUSD", "VNAmountUSD");
            tableMapping.ColumnMappings.Add("DGAmountUSD", "DGAmountUSD");
            tableMapping.ColumnMappings.Add("EGAmountUSD", "EGAmountUSD");
            tableMapping.ColumnMappings.Add("CAAmountUSD", "CAAmountUSD");
            tableMapping.ColumnMappings.Add("TotalAmountUSD", "TotalAmountUSD");
            tableMapping.ColumnMappings.Add("Party", "Party");
            tableMapping.ColumnMappings.Add("PayReceive", "PayReceive");
            tableMapping.ColumnMappings.Add("SZAmountUSD", "SZAmountUSD");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::com.next.isam.reporter.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "          SELECT FiscalYear = x.BudgetYear, x.Period,\r\n              PayReceive =" +
                " (CASE WHEN x.PayReceive=\'P\' THEN \'PAY\' ELSE \'RECEIVE\' END),\r\n              Part" +
                "y = (CASE WHEN x.Party=\'N\' THEN \'NS\' ELSE \'SUPPLIER\' END),\r\n              SZAmou" +
                "ntUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 0  THEN x.Amount * xr.ExchangeRate / xr" +
                "u.ExchangeRate ELSE 0 END, 0)), -- HK-VM (NMC)\r\n              HKAmountUSD = SUM(" +
                "ROUND(CASE WHEN x.OfficeNo = 1  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRa" +
                "te ELSE 0 END, 0)),\r\n              SHAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo " +
                "= 2  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n      " +
                "        LKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 3  THEN x.Amount * xr.Exc" +
                "hangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              THAmountUSD = SUM(R" +
                "OUND(CASE WHEN x.OfficeNo = 4  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRat" +
                "e ELSE 0 END, 0)),\r\n              IDAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo =" +
                " 5  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n       " +
                "       PHAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 6  THEN x.Amount * xr.Exch" +
                "angeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              BDAmountUSD = SUM(RO" +
                "UND(CASE WHEN x.OfficeNo = 7  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate" +
                " ELSE 0 END, 0)),\r\n              INAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = " +
                "8  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n        " +
                "      TRAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 9  THEN x.Amount * xr.Excha" +
                "ngeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              UKAmountUSD = SUM(ROU" +
                "ND(CASE WHEN x.OfficeNo = 10 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate " +
                "ELSE 0 END, 0)),\r\n              FYAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 1" +
                "1 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n         " +
                "     NMAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 12 THEN x.Amount * xr.Exchan" +
                "geRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              NDAmountUSD = SUM(ROUN" +
                "D(CASE WHEN x.OfficeNo = 13 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate E" +
                "LSE 0 END, 0)),\r\n              PKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 14" +
                " THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n          " +
                "    MAAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 15 THEN x.Amount * xr.Exchang" +
                "eRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              VNAmountUSD = SUM(ROUND" +
                "(CASE WHEN x.OfficeNo = 16 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate EL" +
                "SE 0 END, 0)),\r\n              DGAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 17 " +
                "THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),\r\n           " +
                "   EGAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 18 THEN x.Amount * xr.Exchange" +
                "Rate / xru.ExchangeRate ELSE 0 END, 0)),\r\n              CAAmountUSD = SUM(ROUND(" +
                "CASE WHEN x.OfficeNo = 19 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELS" +
                "E 0 END, 0)),\r\n              TotalAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo BET" +
                "WEEN 0 AND 19 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0))" +
                "\r\n          FROM\r\n              (\r\n                  SELECT afc.BudgetYear, afc." +
                "Period,\r\n                      cp.CurrencyId, cp.ReceivedDate, cp.OfficeId,\r\n   " +
                "                   OfficeNo = (CASE WHEN cp.OfficeId in (1) AND uc.TermOfPurchas" +
                "eId<>1 THEN 0 ELSE cp.OfficeId END),\r\n                      Amount = (CASE WHEN " +
                "(pr.PayReceive=\'P\' and (CASE WHEN p.Party=\'N\' THEN cp.NSAmt ELSE cp.VendorAmt EN" +
                "D) >=0) \r\n                                        or (pr.PayReceive=\'R\' and (CAS" +
                "E WHEN p.Party=\'N\' THEN cp.NSAmt ELSE cp.VendorAmt END) <0 )\r\n\t\t\t\t\t             " +
                "             THEN abs(CASE WHEN p.Party=\'N\' THEN cp.NSAmt ELSE cp.VendorAmt END)" +
                " \r\n\t\t\t\t\t                          ELSE 0 \r\n\t\t\t\t\t                          END),\r" +
                "\n--                     PayAmount = (CASE WHEN cp.VendorAmt>=0 THEN (CASE WHEN p" +
                ".PayBy=\'N\' THEN cp.NSAmt ELSE cp.VendorAmt END) ELSE 0 END),\r\n--                " +
                "     ReceiveAmount = (CASE WHEN cp.VendorAmount<0 THEN (CASE WHEN p.PayBy=\'N\' TH" +
                "EN cp.NSAmt ELSE cp.VendorAmt END) ELSE 0 END),\r\n                      p.Party, " +
                "PR.PayReceive\r\n                  FROM\r\n                      (SELECT Party=\'N\' U" +
                "NION SELECT Party=\'V\') AS p\r\n                      INNER JOIN (SELECT PayReceive" +
                "=\'P\' UNION SELECT PayReceive=\'R\') AS pr ON 1=1 --PayReceive = (CASE WHEN (CASE W" +
                "HEN p.PayBy=\'N\' THEN cp.NSAmt ELSE cp.VendorAmt END)>=0 THEN \'P\' ELSE \'R\' END) \r" +
                "\n                      --INNER JOIN (SELECT PayReceive=\'P\' UNION SELECT PayRecei" +
                "ve=\'R\') AS pr ON 1=1 --PayReceive = (CASE WHEN (CASE WHEN p.PayBy=\'N\' THEN cp.NS" +
                "Amt ELSE cp.VendorAmt END)>=0 THEN \'P\' ELSE \'R\' END) \r\n                      INN" +
                "ER JOIN nsldb..AccountFinancialCalender AS afc WITH (NOLOCK) ON 1=1\r\n           " +
                "           LEFT JOIN vw_UKClaimPhasingQAIS AS cp ON cp.ReceivedDate BETWEEN afc." +
                "StartDate AND afc.EndDate\r\n                      LEFT JOIN UKClaim AS uc ON uc.C" +
                "laimId = cp.ClaimId AND uc.Status = 1\r\n                      LEFT JOIN Contract " +
                "AS c ON c.ContractNo = uc.ContractNo\r\n                  WHERE\r\n                 " +
                "     afc.AppId = 9\r\n                      --AND (@FiscalYear=-1 OR (afc.BudgetYe" +
                "ar BETWEEN  @FiscalYear-1 AND @FiscalYear AND afc.Period BETWEEN @PeriodFrom AND" +
                " @PeriodTo))\r\n                      --AND (@VendorId = -1 OR cp.VendorId = @Vend" +
                "orId)\r\n                      AND 1=0\r\n              ) as x\r\n              LEFT J" +
                "OIN ExchangeRate xr  WITH (NOLOCK) ON xr.ExchangeRateTypeId = 2  and x.ReceivedD" +
                "ate between xr.EffectiveDateFrom  and xr.EffectiveDateTo  and xr.CurrencyId = x." +
                "CurrencyId\r\n              LEFT JOIN ExchangeRate xru WITH (NOLOCK) ON xru.Exchan" +
                "geRateTypeId = 2 and x.ReceivedDate between xru.EffectiveDateFrom and xru.Effect" +
                "iveDateTo and xru.CurrencyId = 3\r\n          GROUP BY\r\n              x.BudgetYear" +
                ", x.Period, x.PayReceive, x.Party\r\n          ORDER BY\r\n            x.BudgetYear," +
                " x.Period, c.PayReceive, x.Party\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(UKClaimPhasingByOfficeDs.UKClaimPhasingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual UKClaimPhasingByOfficeDs.UKClaimPhasingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            UKClaimPhasingByOfficeDs.UKClaimPhasingDataTable dataTable = new UKClaimPhasingByOfficeDs.UKClaimPhasingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(UKClaimPhasingByOfficeDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(UKClaimPhasingByOfficeDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(UKClaimPhasingByOfficeDs dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(UKClaimPhasingByOfficeDs dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591