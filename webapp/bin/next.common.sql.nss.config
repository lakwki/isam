<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="commonnss">

  <dataSetAdapter name="UKItemApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKItemByKey" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM UKItem WHERE ItemNo = @ItemNo
          ]]>
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKItem" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKItemPartApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKItemPartList" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM UKItemPart WHERE ItemNo = @ItemNo
          ]]>
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUKItemPartByKey" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM UKItemPart WHERE ItemNo = @ItemNo AND PartNo = @PartNo
          ]]>
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="PartNo" name="@PartNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKItemPart" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="ChinaGBTestResultApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetChinaGBTestResult" type="Text">
        <commandText>
          <![CDATA[
          SELECT CONVERT(int, TestResult) AS TestResult, CASE WHEN CONVERT(int, TestResult) = 1 THEN 1 ELSE 0 END AS Priority
				FROM ChinaGBTestResult 
				WHERE Status = 1 
					AND ProductId = @ProductId
					AND (VendorId = @VendorId OR VendorId = -1)
				ORDER BY Priority DESC, ISNULL(ModifiedOn, CreatedOn) DESC
          ]]>
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ChinaGBTestResult" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ContractBaseApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetContractBaseByKey" type="Text">
        <commandText>
          SELECT *
          FROM Contract with (nolock)
          WHERE ContractId = @ContractId
        </commandText>
        <parameters>
          <param key="ContractId" name="@ContractId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetTop100ContractBaseDefListBySearching" type="Text">
        <commandText>
          SELECT TOP 100 *
          FROM Contract WITH (NOLOCK)
          WHERE (ContractNo like @SearchString + '%')
          AND Status = 1
          ORDER BY ContractNo
        </commandText>
        <parameters>
          <param key="SearchString" name="@SearchString" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetContractProductByQualityRef" type="Text">
        <commandText>
          SELECT *
          FROM Contract WITH (NOLOCK)
          WHERE (ContractId IN
          (	SELECT s.ContractId
          FROM Fabrication f WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON f.ShipmentId = s.ShipmentId AND f.ShipmentTypeId = 1

          WHERE (f.Status = 1) AND (s.Status = 1)
          AND (f.ArticleNo = @QualityRef)
          AND (f.VendorId = @FabricId)
          AND (s.VendorId = @GarmentId)
          UNION
          SELECT s.ContractId
          FROM Fabrication f WITH (NOLOCK)
          INNER JOIN SplitShipment ss WITH (NOLOCK) ON f.ShipmentId = ss.ShipmentId AND f.ShipmentTypeId = 2
          INNER JOIN Shipment s WITH (NOLOCK) ON ss.ShipmentId = s.ShipmentId
          WHERE (f.Status = 1) AND (ss.Status = 1) AND (s.Status = 1)
          AND (f.ArticleNo = @QualityRef)
          AND (f.VendorId = @FabricId) AND (s.VendorId = @GarmentId)
          )
          )
          AND (Status = 1)
          AND (MerchandiserId = @MerchandiserId)
        </commandText>
        <parameters>
          <param key="GarmentId" name="@GarmentId" type="Int" direction="Input" />
          <param key="FabricId" name="@FabricId" type="Int" direction="Input" />
          <param key="QualityRef" name="@QualityRef" type="varchar" direction="Input" />
          <param key="MerchandiserId" name="@MerchandiserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Contract" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="ContractShipmentBaseApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetContractShipmentBaseByKey" type="Text">
        <commandText>
          <![CDATA[
						SELECT
							s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
							c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef,
							p.ItemNo, c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate,
							s.SupplierAtWarehouseDate, s.FirstApprovedCustomerAtWarehouseDate,
							s.TotalPOQty, s.TotalShippedQty, s.SplitCount, s.CountryOfOriginId,
							sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
							s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent,
							s.FTYAirFreightPaymentPercent, s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark
						FROM	Shipment s WITH (NOLOCK)
						INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
						INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
						INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
						INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
						WHERE s.ShipmentId = @ShipmentId
						]]>
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetContractShipmentBaseDefByContractDelivery" type="Text">
        <commandText>
          <![CDATA[
						SELECT TOP 1
						s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
						c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef, p.ItemNo,
						c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
						s.FirstApprovedCustomerAtWarehouseDate, s.TotalPOQty, s.TotalShippedQty, s.SplitCount,
						s.CountryOfOriginId, sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
						s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
						s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark
						FROM	Shipment s WITH (NOLOCK)
						INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
						INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
						INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
						INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
						WHERE c.ContractNo = @ContractNo AND s.DeliveryNo = @DeliveryNo
						]]>
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetTop100ContractShipmentBaseDefListBySearching" type="Text">
        <commandText>
          <![CDATA[
						SELECT TOP 100
						s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
						c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef, p.ItemNo,
						c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
						s.FirstApprovedCustomerAtWarehouseDate, s.TotalPOQty, s.TotalShippedQty, s.SplitCount,
						s.CountryOfOriginId, sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
						s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
						s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark
						FROM	Shipment s WITH (NOLOCK)
						INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
						INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
						INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
						INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
						WHERE (c.ContractNo LIKE @SearchString + '%')
						AND (c.Status = 1) AND (s.Status = 1)
						AND (s.WorkFlowStatusId <> 9)
						ORDER BY c.ContractNo , s.DeliveryNo
						]]>
        </commandText>
        <parameters>
          <param key="SearchString" name="@SearchString" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetContractShipmentBaseWithFabricByKey" type="Text">
        <commandText>
          <![CDATA[
						SELECT s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
						c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef, p.ItemNo,
						c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
						s.FirstApprovedCustomerAtWarehouseDate, s.TotalPOQty, s.TotalShippedQty, s.SplitCount,
						s.CountryOfOriginId, sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
						s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
						s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark,
						pm.PackingMethodDesc as PackingMethod, ui.DisplayName as MerchandiserName, f.Composition as FabricComposition,
						ct.CustomerCode
						FROM	Shipment s WITH (NOLOCK)
						INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
						INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
						INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
						INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
						INNER JOIN Customer ct WITH (NOLOCK) ON c.CustomerId = ct.CustomerId
						INNER JOIN PackingMethod pm WITH (NOLOCK) ON c.PackingMethodId = pm.PackingMethodId
						INNER JOIN vw_UserInfo ui WITH (NOLOCK) ON c.MerchandiserId = ui.UserId
						LEFT OUTER JOIN Fabrication f WITH (NOLOCK) ON s.ShipmentId = f.ShipmentId and f.ShipmentTypeId = 1 and f.Status = 1
						WHERE s.ShipmentId = @ShipmentId
						]]>
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetContractShipmentBaseDefWithFabricByContractDelivery" type="Text">
        <commandText>
          <![CDATA[
						SELECT-- TOP 1
						s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
						c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef, p.ItemNo,
						c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
						s.FirstApprovedCustomerAtWarehouseDate, s.TotalPOQty, s.TotalShippedQty, s.SplitCount,
						s.CountryOfOriginId, sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
						s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
						s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark,
						pm.PackingMethodDesc as PackingMethod, ui.DisplayName as MerchandiserName, f.Composition as FabricComposition,
						ct.CustomerCode, cd.DestinationDesc as CustomerDestination
						FROM	Shipment s WITH (NOLOCK)
						INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
						INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
						INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
						INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
						INNER JOIN Customer ct WITH (NOLOCK) ON c.CustomerId = ct.CustomerId
						INNER JOIN PackingMethod pm WITH (NOLOCK) ON c.PackingMethodId = pm.PackingMethodId
						INNER JOIN vw_UserInfo ui WITH (NOLOCK) ON c.MerchandiserId = ui.UserId
						LEFT OUTER JOIN Fabrication f WITH (NOLOCK) ON s.ShipmentId = f.ShipmentId and f.ShipmentTypeId = 1 and f.Status = 1
						LEFT OUTER JOIN CustomerDestination cd WITH (NOLOCK) ON cd.customerdestinationid = s.customerdestinationid
						WHERE c.ContractNo = @ContractNo AND s.DeliveryNo = @DeliveryNo
						]]>
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetTop100ContractShipmentBaseDefListWithFabricBySearching" type="Text">
        <commandText>
          <![CDATA[
						SELECT contractShipmentList.*, pm.PackingMethodDesc as PackingMethod, ui.DisplayName as MerchandiserName, f.Composition as FabricComposition
						FROM
						(
							SELECT TOP 100
							s.ShipmentId, c.ContractId, p.ProductId, c.NSLPONo, c.SeasonId,
							c.OfficeId, c.DeptId, c.ProductTeamId, c.PhaseId, p.DesignRef, p.ItemNo,
							c.ContractNo, s.DeliveryNo, s.VendorId, s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
							s.FirstApprovedCustomerAtWarehouseDate, s.TotalPOQty, s.TotalShippedQty, s.SplitCount,
							s.CountryOfOriginId, sm.ShipmentMethodDesc, sm.ShipmentMethodOPSKey, tp.OrderType, s.IsRepeatOrder, s.IsRatioPackOrder,
							s.QccRemark, s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
							s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark, c.PackingMethodId, c.MerchandiserId,
							ct.CustomerCode
							FROM	Shipment s WITH (NOLOCK)
							INNER JOIN Contract c WITH (NOLOCK) ON s.ContractId = c.ContractId
							INNER JOIN Product p WITH (NOLOCK) ON p.ProductId = c.ProductId
							INNER JOIN ShipmentMethod sm WITH (NOLOCK) ON s.ShipmentMethodId = sm.ShipmentMethodId
							INNER JOIN TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
							INNER JOIN Customer ct WITH (NOLOCK) ON c.CustomerId = ct.CustomerId
							WHERE (c.ContractNo LIKE @SearchString + '%')
							AND (c.Status = 1) AND (s.Status = 1)
							AND (s.WorkFlowStatusId <> 9)
							ORDER BY c.ContractNo , s.DeliveryNo
						) contractShipmentList
						INNER JOIN PackingMethod pm WITH (NOLOCK) ON contractShipmentList.PackingMethodId = pm.PackingMethodId
						INNER JOIN vw_UserInfo ui WITH (NOLOCK) ON contractShipmentList.MerchandiserId = ui.UserId
						LEFT OUTER JOIN Fabrication f WITH (NOLOCK) ON contractShipmentList.ShipmentId = f.ShipmentId and f.ShipmentTypeId = 1 and f.Status = 1
						ORDER BY contractShipmentList.ShipmentId
						]]>
        </commandText>
        <parameters>
          <param key="SearchString" name="@SearchString" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ContractShipment" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="ProductSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetProductSummaryByItemNo" type="TEXT">
        <commandtext>
          SELECT
          p.ProductId,
          ParentProductId = p.ParentId,
          p.ItemNo,
          ItemDesc = ISNULL(p.ShortDesc, pm.ShortDesc),
          p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5,
          c.DeptId,
          DepartmentCode = pd.Code,
          DepartmentName = pd.Description,
          c.ProductTeamId,
          ProductTeamCode = pt.Code,
          ProductTeamName = pt.Description,
          s.VendorId,
          VendorName = (SELECT Name FROM nslindustry..Vendor WITH (NOLOCK) WHERE VendorId = s.VendorId),
          c.ContractId,
          s.ShipmentId,
          DeliveryDate = ISNULL(i.InvoiceDate,s.SupplierAtWarehouseDate)
          FROM
          Product AS p WITH (NOLOCK)
          LEFT OUTER JOIN Product AS pm WITH (NOLOCK) ON p.ParentId = pm.ProductId AND pm.Status = 1
          LEFT OUTER JOIN Contract AS c WITH (NOLOCK) ON c.ProductId = p.ProductId AND c.Status=1
          LEFT OUTER JOIN Shipment AS s WITH (NOLOCK) ON s.ContractId = c.ContractId AND s.Status = 1
          LEFT OUTER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
          LEFT OUTER JOIN nsldb..OfficeStructure pd WITH (NOLOCK) ON pd.OfficeStructureId=c.DeptId AND pd.status=1
          LEFT OUTER JOIN nsldb..OfficeStructure pt WITH (NOLOCK) ON pt.OfficeStructureId=c.ProductTeamId AND pt.status=1
          WHERE p.Status = 1
          AND p.ItemNo = @ItemNo
        </commandtext>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetTop100ProductSummaryDefListByItemNoDesignRef" type="Text">
        <commandText>
          <![CDATA[
					SELECT TOP 100
					p.ProductId, cs.ContractId, p.ParentId AS ParentProductId,
					p.ItemNo, p.SplitSuffix AS ItemNoSuffix, p.DesignRef, cs.DeptId AS ProductDeptId,
					cs.ProductTeamId, os.Code AS ProductTeamCode, os.Description AS ProductTeamName,
					ISNULL(p.ShortDesc, pm.ShortDesc) AS ItemDesc, p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5,
					cs.SeasonId, se.Code AS SeasonName, cs.VendorId, v.Name AS VendorName, cs.ContractNo, cs.IsRepeatOrder,
					MAX(cs.DeliveryNo) AS NoOfDelivery, MIN(cs.SupplierAtWarehouseDate) AS FirstDeliveryDate
					FROM	Product p WITH (NOLOCK)
					LEFT OUTER JOIN Product pm WITH (NOLOCK) ON p.ParentId = pm.ProductId AND pm.Status = 1
					LEFT OUTER JOIN
							(SELECT c.ProductId, c.ContractId, s.ShipmentId, c.DeptId, c.ProductTeamId, c.SeasonId,
							s.VendorId, c.ContractNo, s.DeliveryNo, s.SupplierAtWarehouseDate, s.IsRepeatOrder
							FROM	Contract c WITH (NOLOCK)
							INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
							UNION
							SELECT ss.ProductId, c.ContractId, s.ShipmentId, c.DeptId, c.ProductTeamId, c.SeasonId,
							ss.VendorId, c.ContractNo, s.DeliveryNo, ss.SupplierAtWarehouseDate, s.IsRepeatOrder
							FROM	Contract c WITH (NOLOCK)
							INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
							INNER JOIN SplitShipment ss WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId AND ss.Status = 1) cs ON p.ProductId = cs.ProductId
					LEFT OUTER JOIN vw_OfficeStructure os WITH (NOLOCK) ON cs.ProductTeamId = os.OfficeStructureId AND os.OfficeStructureTypeId = 50
					LEFT OUTER JOIN vw_Season se WITH (NOLOCK) ON cs.SeasonId = se.SeasonId
					LEFT OUTER JOIN vw_Vendor v WITH (NOLOCK) ON cs.VendorId = v.VendorId
					WHERE (p.Status = 1)
					AND (p.ItemNo LIKE @ItemNo + '%')
					AND (ISNULL(p.DesignRef, '') LIKE @DesignRef + '%')
					GROUP BY p.ProductId, cs.ContractId, p.ParentId, p.ItemNo, p.SplitSuffix, p.DesignRef, cs.DeptId,
					cs.ProductTeamId, os.Code, os.Description, ISNULL(p.ShortDesc, pm.ShortDesc),
					p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5, cs.SeasonId, se.Code,
					cs.VendorId, v.Name, cs.ContractNo, cs.IsRepeatOrder
					ORDER BY MIN(cs.SupplierAtWarehouseDate), cs.SeasonId DESC, p.DesignRef, p.ItemNo
					]]>
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="DesignRef" name="@DesignRef" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="IsAvailableSplitProduct" type="Text">
        <commandText>
          SELECT COUNT(*)
          FROM	(SELECT MAX(ISNULL(cs.WorkflowStatusId, 0)) AS MaxWFS
          FROM	Product p WITH (NOLOCK)
          LEFT OUTER JOIN
          (SELECT c.ProductId, s.WorkflowStatusId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          UNION
          SELECT ss.ProductId, s.WorkflowStatusId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          INNER JOIN SplitShipment ss WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId AND ss.Status = 1) cs ON p.ProductId = cs.ProductId
          WHERE (p.Status = 1)
          AND ((p.ProductId = @ProductId) OR (p.ParentId = @ProductId))) a
          WHERE (MaxWFS > 2)
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="IsCreatedContractByProduct" type="Text">
        <commandText>
          SELECT COUNT(*)
          FROM	Product p WITH (NOLOCK)
          INNER JOIN
          (SELECT c.ProductId, s.WorkflowStatusId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          UNION
          SELECT ss.ProductId, s.WorkflowStatusId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          INNER JOIN SplitShipment ss WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId AND ss.Status = 1) cs ON p.ProductId = cs.ProductId
          WHERE (p.Status = 1)
          AND ((p.ProductId = @ProductId) OR (p.ParentId = @ProductId))
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ProductSummary" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="ContractNoDlyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetContractNoDlyRefByType" type="Text">
        <commandText>
          SELECT c.ContractId, s.ShipmentId, c.ContractNo, s.DeliveryNo
          FROM Contract c WITH (NOLOCK) INNER JOIN
          Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId INNER JOIN
          TermOfPurchase tp WITH (NOLOCK) ON s.TermOfPurchaseId = tp.TermOfPurchaseId
          WHERE (c.Status = 1) AND (s.Status = 1)
          AND (c.ContractId = @ContractId)
          AND (tp.OrderType = @OrderType)
          ORDER BY s.DeliveryNo
        </commandText>
        <parameters>
          <param key="ContractId" name="@ContractId" type="Int" direction="Input" />
          <param key="OrderType" name="@OrderType" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ContractNoDly" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="SplitProductSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSplitProductSummaryDefListByProductId" type="Text">
        <commandText>
          SELECT cs.ShipmentTypeId, cs.ShipmentId, cs.SplitShipmentid, cs.ContractNo, cs.DeliveryNo, cs.DeliveryDate,
          cs.WorkflowStatusId, cwfs.WorkflowStatusDesc, p.ProductId, p.ItemNo, p.SplitSuffix, p.ShortDesc AS ItemDesc
          FROM	(SELECT 1 AS ShipmentTypeId, s.ShipmentId, NULL AS SplitShipmentid, c.ContractNo, s.DeliveryNo,
          s.SupplierAtWarehouseDate AS DeliveryDate, c.ProductId, s.WorkflowStatusId, c.SeasonId, c.OfficeId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          UNION
          SELECT 2 AS ShipmentTypeId, s.ShipmentId, ss.SplitShipmentId, c.ContractNo, s.DeliveryNo,
          ss.SupplierAtWarehouseDate AS DeliveryDate, ss.ProductId, s.WorkflowStatusId, c.SeasonId, c.OfficeId
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1 AND s.Status = 1
          INNER JOIN SplitShipment ss WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId AND ss.Status = 1) cs
          INNER JOIN Product p WITH (NOLOCK) ON cs.ProductId = p.ProductId
          INNER JOIN ContractWFS cwfs WITH (NOLOCK) ON cs.WorkflowStatusId = cwfs.WorkflowStatusId
          WHERE (@OfficeId = -1 OR cs.OfficeId = @OfficeId)
          AND (@SeasonId = -1 OR cs.SeasonId = @SeasonId)
          AND (ISNULL(p.ParentId, cs.ProductId) @ProductIds)
          AND (cs.WorkflowStatusId NOT IN (8, 9))
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="SeasonId" name="@SeasonId" type="Int" direction="Input" />
          <param key="ProductIds" name="@ProductIds" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SplitProductSummary" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="ItemSetApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetItemSetDefListByProductId" type="Text">
        <commandText>
          SELECT p.ProductId, p.ItemNo, p.SplitSuffix AS ItemNoSuffix, ISNULL(pm.ShortDesc, p.ShortDesc) AS ItemDesc,
          p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5, p.ShortDesc AS ItemSetDesc
          FROM	Product p WITH (NOLOCK)
          LEFT OUTER JOIN Product pm WITH (NOLOCK) ON p.ParentId = pm.ProductId AND pm.Status = 1
          WHERE (p.Status = 1)
          AND ((p.ProductId = @ProductId) OR (p.ParentId = @ProductId))
          ORDER BY p.ItemNo
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ItemSet" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="SizeQtyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSizeQtyDefListByContractDelivery" type="Text">
        <commandText>
          SELECT DISTINCT so.SizeOptionNo, so.SizeDesc, sd.POQty, ISNULL(sd.RatioPack, 0) AS RatioPack,
          ISNULL(s.IsRatioPackOrder, 0) AS IsRatioPackOrder, ISNULL(s.RatioPackType, '') AS RatioPackType
          FROM	Contract c WITH (NOLOCK)
          INNER JOIN Shipment s WITH (NOLOCK) ON c.ContractId = s.ContractId
          INNER JOIN ShipmentDetail sd WITH (NOLOCK) ON s.ShipmentId = sd.ShipmentId
          INNER JOIN SizeOption so WITH (NOLOCK) ON sd.SizeOptionId = so.SizeOptionId
          WHERE (c.ContractNo = @ContractNo)
          AND (s.DeliveryNo = @DeliveryNo)
          AND (c.Status = 1) AND (s.Status = 1) AND (sd.Status = 1)
          ORDER BY so.SizeOptionNo, so.SizeDesc
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SizeQty" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="ShipModeApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipModeByKey" type="Text">
        <commandText>
          SELECT *
          FROM ShipmentMethod with (nolock)
          WHERE ShipmentMethodId = @ShipmentMethodId
        </commandText>
        <parameters>
          <param key="ShipmentMethodId" name="@ShipmentMethodId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentMethod" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="COPEvaluationVendorApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getCOPEvaluationVendorBySalesTop25" type="Text">
        <commandText>
          <![CDATA[
					select Top 25
						t.VendorId
						, sum(
							case when t.workflowstatusid= 8 then
								(t.TotalShippedAmt * (case when t.USExchangeRate=0 then 0 else t.InvoiceExchangeRate/t.USExchangeRate end))
							else
								(t.TotalOrderAmt * ((case when SellExchangeRate_From.ExchangeRate is null then SellExchangeRate_From_2.ExchangeRate else SellExchangeRate_From.ExchangeRate end)/(case when SellExchangeRate_To.ExchangeRate is null then SellExchangeRate_To_2.ExchangeRate else SellExchangeRate_To.ExchangeRate end)))
							end
						) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1
						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getCOPEvaluationVendorBySalesTop50" type="Text">
        <commandText>
          <![CDATA[
					select Top 50
						t.VendorId
						, sum(
							case when t.workflowstatusid= 8 then
								(t.TotalShippedAmt * (case when t.USExchangeRate=0 then 0 else t.InvoiceExchangeRate/t.USExchangeRate end))
							else
								(t.TotalOrderAmt * ((case when SellExchangeRate_From.ExchangeRate is null then SellExchangeRate_From_2.ExchangeRate else SellExchangeRate_From.ExchangeRate end)/(case when SellExchangeRate_To.ExchangeRate is null then SellExchangeRate_To_2.ExchangeRate else SellExchangeRate_To.ExchangeRate end)))
							end
						) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1
						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getCOPEvaluationVendorBySalesTop100" type="Text">
        <commandText>
          <![CDATA[
					select Top 100
						t.VendorId
						, sum(
							case when t.workflowstatusid= 8 then
								(t.TotalShippedAmt * (case when t.USExchangeRate=0 then 0 else t.InvoiceExchangeRate/t.USExchangeRate end))
							else
								(t.TotalOrderAmt * ((case when SellExchangeRate_From.ExchangeRate is null then SellExchangeRate_From_2.ExchangeRate else SellExchangeRate_From.ExchangeRate end)/(case when SellExchangeRate_To.ExchangeRate is null then SellExchangeRate_To_2.ExchangeRate else SellExchangeRate_To.ExchangeRate end)))
							end
						) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1

						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getCOPEvaluationVendorByQtyTop25" type="Text">
        <commandText>
          <![CDATA[
					select Top 25
						t.VendorId
						, sum(case when t.workflowstatusid= 8 then (t.TotalShippedQty * t.PiecesPerPack) else (t.TotalOrderQty * t.PiecesPerPack) end) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1

						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getCOPEvaluationVendorByQtyTop50" type="Text">
        <commandText>
          <![CDATA[
					select Top 50
						t.VendorId
						, sum(case when t.workflowstatusid= 8 then (t.TotalShippedQty * t.PiecesPerPack) else (t.TotalOrderQty * t.PiecesPerPack) end) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1

						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getCOPEvaluationVendorByQtyTop100" type="Text">
        <commandText>
          <![CDATA[
					select Top 100
						t.VendorId
						, sum(case when t.workflowstatusid= 8 then (t.TotalShippedQty * t.PiecesPerPack) else (t.TotalOrderQty * t.PiecesPerPack) end) as RankByDesc
						from
						(
							select
							 c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId,  c.piecesperpack, c.officeid, c.deptid,c.customerid
							, s.vendorid, s.TotalOrderQty, s.TotalShippedQty, s.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							,s.termofpurchaseid,  s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							where (c.setsplitcount = 0 or c.IsVirtualSetSplit = 1)
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1

							union all

							select
							c.productteamid, c.seasonId, c.TradingAgencyId, c.SupplierAssignTypeId, ss.piecesperpack,c.officeid, c.deptid, c.customerid
							, ss.vendorid, ss.TotalOrderQty, ss.TotalShippedQty, ss.TotalPOQty,s.ActualAtWarehouseDate, s.CustomerAtWarehouseDate
							, s.termofpurchaseid, s.shipmentid,s.SellCurrencyId, s.InvoiceExchangeRate , s.USExchangeRate, s.AgencyCommissionPercent
							, s.WorkflowStatusId	,s.TotalShippedAmt, s.TotalOrderAmt
							from CONTRACT c with (nolock)
							inner join shipment s with (nolock) on  c.contractid = s.contractid
							inner join splitshipment ss with (nolock) on s.shipmentid = ss.shipmentid
							where c.setsplitcount > 0 and c.IsVirtualSetSplit = 0
								and (c.productteamid = @productTeamId or @productTeamId=-1)
								and (c.productTeamId @productCodeList)
								and c.status = 1
								and (s.ActualAtWarehouseDate between @fromDate and @toDate)
								AND (s.WorkflowStatusId in (2,4,6,7,8))
								and s.status = 1
								and ss.IsVirtualSetSplit=0
								and ss.status = 1

						) as t
						inner join TermOfPurchase tp with (nolock) on t.TermOfPurchaseId=tp.TermOfPurchaseId
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON t.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and t.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON t.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(t.OfficeId = @officeId or @officeId =-1)
						AND (t.SeasonId =@seasonId or @seasonId = -1)
						AND (t.DeptId  @deptId)
						and (t.customerid @customerIdList)
						and (t.TradingAgencyId=@tradingAgency or @tradingAgency=-1)
						and (t.SupplierAssignTypeId=@assignTo or @assignTo=-1)
						AND (case t.WorkflowStatusId when 8 then						
								t.ActualAtWarehouseDate
							else
								t.CustomerAtWarehouseDate
							end
							between @fromDate and @toDate)
						and (tp.ordertype=@termOfPurchaseCode or @termOfPurchaseCode='-1')								
					 group by
						t.VendorId
					order by RankByDesc desc
					]]>
        </commandText>
        <parameters>
          <param key="FromDate" name="@fromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@toDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="TradingAgency" name="@tradingAgency" type="int" direction="Input" />
          <param key="AssignTo" name="@assignTo" type="int" direction="Input" />
          <param key="TermOfPurchaseCode" name="@termOfPurchaseCode" type="varchar" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="COPEvaluationVendor" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NssSamplingHitRateReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getNssSamplingHitRateReportSortByDepartment" type="Text">
        <commandText>
          <![CDATA[
						select

						 dr.DesignerId
						, dr.DesignerName as DesignedByName
						--, deptProductTeam.Description as ProductTeamDescription
						, deptProductTeam.Code as ProductTeamCode
						, sum(case when shipment.workflowstatusid= 8 then (SHIPMENT.TotalShippedQty * CONTRACT.PiecesPerPack) else (SHIPMENT.TotalOrderQty * CONTRACT.PiecesPerPack) end) as TotalNumberOfPieces 
						, sum(
							case when shipment.workflowstatusid= 8 then
								(SHIPMENT.TotalShippedAmt * (case when SHIPMENT.USExchangeRate=0 then 0 else SHIPMENT.InvoiceExchangeRate/SHIPMENT.USExchangeRate end))
							else
								(SHIPMENT.TotalOrderAmt * ((case when SellExchangeRate_From.ExchangeRate is null then SellExchangeRate_From_2.ExchangeRate else SellExchangeRate_From.ExchangeRate end)/(case when SellExchangeRate_To.ExchangeRate is null then SellExchangeRate_To_2.ExchangeRate else SellExchangeRate_To.ExchangeRate end)))
							end 
						) as SalesCost 
					from shipment with (nolock)
						inner join CONTRACT with (nolock) on  CONTRACT.contractId = SHIPMENT.contractId
						inner join product p with (nolock) on p.productid=contract.productid
						inner join vw_Designer dr with (nolock) on dr.designerid=p.designerid
						INNER JOIN vw_OfficeStructure productTeam WITH (NOLOCK) on productTeam.OfficeStructureId = CONTRACT.ProductTeamId AND (productTeam.ParentId @deptId)	
						INNER JOIN vw_OfficeStructure deptProductTeam WITH (NOLOCK) on deptProductTeam.OfficeStructureId = productTeam.ParentId
							
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON SHIPMENT.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and SHIPMENT.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and SHIPMENT.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON SHIPMENT.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(CONTRACT.OfficeId = @officeId or @officeId =-1)
						AND (CONTRACT.SeasonId =@seasonId or @seasonId = -1)		
						AND (CONTRACT.PhaseId @PhaseList)					
						AND (CONTRACT.DeptId  @deptId)
						and (contract.productteamid = @productTeamId or @productTeamId=-1)
						and (contract.productteamid @productCodeList)
						AND (@DesignedBy in (dr.DesignerId, -1))
						--and (p.DesignSourceId = @designSourceId or @designSourceId = -1)
						and (p.DesignSourceId @designSourceIdList)
						and (contract.customerid @customerIdList)	
						and (@VendorId in (SHIPMENT.VendorId, -1))			 
						and (SHIPMENT.status = 1)
						and (CONTRACT.status = 1)
						and (shipment.WorkflowStatusId in (2,4,6,7,8))
					 group by 
						dr.DesignerId
						,dr.DesignerName
						--, deptProductTeam.Description
						, deptProductTeam.Code

order by dr.designerId
					]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="PhaseList" name="@PhaseList" type="ArrayInt" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="DesignedBy" name="@DesignedBy" type="Int" direction="Input" />
          <param key="DesignSourceIdList" name="@designSourceIdList" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getNssSamplingHitRateReportSortByDesigner" type="Text">
        <commandText>
          <![CDATA[
						select

						 dr.DesignerId
						, dr.DesignerName as DesignedByName
						, sum(case when shipment.workflowstatusid= 8 then (SHIPMENT.TotalShippedQty * CONTRACT.PiecesPerPack) else (SHIPMENT.TotalOrderQty * CONTRACT.PiecesPerPack) end) as TotalNumberOfPieces 
						, sum(
							case when shipment.workflowstatusid= 8 then
								(SHIPMENT.TotalShippedAmt * (case when SHIPMENT.USExchangeRate=0 then 0 else SHIPMENT.InvoiceExchangeRate/SHIPMENT.USExchangeRate end))
							else
								(SHIPMENT.TotalOrderAmt * ((case when SellExchangeRate_From.ExchangeRate is null then SellExchangeRate_From_2.ExchangeRate else SellExchangeRate_From.ExchangeRate end)/(case when SellExchangeRate_To.ExchangeRate is null then SellExchangeRate_To_2.ExchangeRate else SellExchangeRate_To.ExchangeRate end)))
							end 
						) as SalesCost 
					from shipment with (nolock)
						inner join CONTRACT with (nolock) on  CONTRACT.contractId = SHIPMENT.contractId
						inner join product p with (nolock) on p.productid=contract.productid
						inner join vw_Designer dr with (nolock) on dr.designerid=p.designerid
								
						left JOIN ExchangeRate as SellExchangeRate_From with (nolock) ON SHIPMENT.SellCurrencyId=SellExchangeRate_From.currencyid and SellExchangeRate_From.ExchangeRateTypeId=1 and SHIPMENT.CustomerAtWarehouseDate between SellExchangeRate_From.EffectiveDateFrom and SellExchangeRate_From.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_To with (nolock) ON SellExchangeRate_To.currencyid=@currencyId and SellExchangeRate_To.ExchangeRateTypeId=1 and SHIPMENT.CustomerAtWarehouseDate between SellExchangeRate_To.EffectiveDateFrom and SellExchangeRate_To.EffectiveDateTo
						left JOIN ExchangeRate as SellExchangeRate_From_2 with (nolock) ON SHIPMENT.SellCurrencyId=SellExchangeRate_From_2.currencyid and SellExchangeRate_From_2.ExchangeRateTypeId=1 and SellExchangeRate_From_2.EffectiveTypeId=0
						left JOIN ExchangeRate as SellExchangeRate_To_2 with (nolock) ON SellExchangeRate_To_2.currencyid=@currencyId and SellExchangeRate_To_2.ExchangeRateTypeId=1 and SellExchangeRate_To_2.EffectiveTypeId=0
					Where
						(CONTRACT.OfficeId = @officeId or @officeId =-1)
						AND (CONTRACT.SeasonId =@seasonId or @seasonId = -1)		
						AND (CONTRACT.PhaseId @PhaseList)					
						AND (CONTRACT.DeptId  @deptId)
						and (contract.productteamid = @productTeamId or @productTeamId=-1)
						and (contract.productteamid @productCodeList)
						AND (@DesignedBy in (dr.DesignerId, -1))
						--and (p.DesignSourceId @designSourceIdList or @designSourceId = -1)
						and (p.DesignSourceId @designSourceIdList)
						and (contract.customerid @customerIdList)	
						and (@VendorId in (SHIPMENT.VendorId, -1))			 
						and (SHIPMENT.status = 1)
						and (CONTRACT.status = 1)
						and (shipment.WorkflowStatusId in (2,4,6,7,8))
					 group by 
						dr.DesignerId
						,dr.DesignerName

order by dr.designerId
					]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="PhaseList" name="@PhaseList" type="ArrayInt" direction="Input" />
          <param key="DeptId" name="@deptId" type="ArrayInt" direction="Input" />
          <param key="ProductTeamId" name="@productTeamId" type="int" direction="Input" />
          <param key="ProductCodeList" name="@productCodeList" type="ArrayInt" direction="Input" />
          <param key="DesignedBy" name="@DesignedBy" type="Int" direction="Input" />
          <param key="DesignSourceIdList" name="@designSourceIdList" type="ArrayInt" direction="Input" />
          <param key="CustomerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NssSamplingHitRateReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SeasonalExchangeRateApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSeasonalExchangeRate" type="Text">
        <commandText>
          <![CDATA[
            SELECT s.ExchangeRate
            FROM 
            (
                  SELECT FromCurrencyId AS FromCurrencyId, ToCurrencyId AS ToCurrencyId, ExchangeRate AS ExchangeRate FROM vw_PDS_SeasonalExchangeRate 
                  WHERE Status = 1 and SeasonId = @SeasonId
                        UNION
                  SELECT ToCurrencyId AS FromCurrencyId, FromCurrencyId AS ToCurrencyId, 1/ExchangeRate AS ExchangeRate FROM vw_PDS_SeasonalExchangeRate 
                  WHERE Status = 1 AND SeasonId = @SeasonId
                        UNION
                  SELECT l.FromCurrencyId AS FromCurrencyId, r.FromCurrencyId AS ToCurrencyId, l.ExchangeRate/r.ExchangeRate AS ExchangeRate
                        FROM vw_PDS_SeasonalExchangeRate l
                        LEFT JOIN vw_PDS_SeasonalExchangeRate r
                        ON l.ToCurrencyId = r.ToCurrencyId AND l.Status = 1 AND r.Status = 1 and l.SeasonId = @SeasonId and r.SeasonId = @SeasonId
                  WHERE r.FromCurrencyId IS NOT NULL
            ) s 
            WHERE s.FromCurrencyId = @FromCurrencyId AND ToCurrencyId = @ToCurrencyId
          ]]>
        </commandText>
        <parameters>
          <param key="SeasonId" name="@seasonId" type="int" direction="Input" />
          <param key="FromCurrencyId" name="@FromCurrencyId" type="int" direction="Input" />
          <param key="ToCurrencyId" name="@ToCurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
  </dataSetAdapter>


  <dataSetAdapter name="NssWeeklySalesSummaryReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand  name="getNssWeeklySalesSnapshotSummary" type="Text">
        <commandText>
          <![CDATA[
					
					select d.*, p.SnapshotNo,
						Timing = (case TimingStatus when 'S' then 'Slippage' when 'O' then 'OnTime' when 'E' then 'Early' else '' end),
						wk = case when (d.WeekNo < d.WeekNoParam and d.ShipmentStatus='OrderBook') then d.WeekNoParam when d.WeekNo < 1 then 1 else d.WeekNo end, 
						DlyDateDiffInWeek = datediff(wk, coalesce(PreviousDeliveryDate, DeliveryDate), DeliveryDate),
						p.PeriodStartDate, p.NoOfWeek, p.NextPeriodNoOfWeek, 
						LastPeriodDeliveryDate=null,
						Status = (case s.WorkflowStatusId when 8 then 'Actual' when 9 then 'Cancelled' else 'OrderBook' end),
						DlyDate = convert(varchar,(case when s.WorkflowStatusId=8 then s.ActualAtWarehouseDate else s.CustomerAtWarehouseDate end),23),
						Customer = (select replace(CustomerCode,char(13)+char(10),'') from Customer where CustomerId=c.CustomerId)
					into #snapshot
					from (select FiscalYear=fc.BudgetYear, FiscalPeriod=fc.Period, snapshotNo=@SnapshotNo, 
								PeriodStartDate=fc.StartDate, PeriodEndDate=fc.EndDate,
								NoOfWeek = datediff(ww,fc.StartDate,fc.EndDate)+1,
								NextPeriodNoOfWeek = datediff(ww,nfc.StartDate,nfc.EndDate)
							from nsldb..AccountFinancialCalender as fc
								inner join nsldb..AccountFinancialCalender as nfc on nfc.StartDate=dateadd(d,1,fc.EndDate) and nfc.AppId=9
							where fc.AppId=9 and fc.BudgetYear=@FiscalYear and fc.Period=@FiscalPeriod
						) as p
						inner join WeeklySalesSnapshotDetailForSimon as d on d.FiscalYear=p.FiscalYear and d.Period=p.FiscalPeriod
						inner join Shipment as s with (nolock) on s.shipmentId=d.ShipmentId
						inner join Contract as c with (nolock) on c.ContractId=s.ContractId
	
					---------------------------------------------------------------------------------------------
					-- Extract summary from snapshot detail with Timing status (Version 3)
					SELECT	o.OfficeCode,

							wk1_Slippage	= sum(case when wk=1 and Timing='Slippage'	then SalesAmt else 0 end),
							wk1_OnTime		= sum(case when wk=1 and Timing='OnTime'	then SalesAmt else 0 end),
							wk1_EarlyShip	= sum(case when wk=1 and Timing='Early'		then SalesAmt else 0 end),
							wk1_Total		= sum(case when wk=1 then SalesAmt else 0 end),

							wk2_Slippage	= sum(case when wk=2 and Timing='Slippage'	then SalesAmt else 0 end),
							wk2_OnTime		= sum(case when wk=2 and Timing='OnTime'	then SalesAmt else 0 end),
							wk2_EarlyShip	= sum(case when wk=2 and Timing='Early'		then SalesAmt else 0 end),
							wk2_Total		= sum(case when wk=2 then SalesAmt else 0 end),

							wk3_Slippage	= sum(case when wk=3 and Timing='Slippage'	then SalesAmt else 0 end),
							wk3_OnTime		= sum(case when wk=3 and Timing='OnTime'	then SalesAmt else 0 end),
							wk3_EarlyShip	= sum(case when wk=3 and Timing='Early'		then SalesAmt else 0 end),
							wk3_Total		= sum(case when wk=3 then SalesAmt else 0 end),

							wk4_Slippage	= sum(case when wk=4 and Timing='Slippage'	then SalesAmt else 0 end),
							wk4_OnTime		= sum(case when wk=4 and Timing='OnTime'	then SalesAmt else 0 end),
							wk4_EarlyShip	= sum(case when wk=4 and Timing='Early'		then SalesAmt else 0 end),
							wk4_Total		= sum(case when wk=4 then SalesAmt else 0 end),

							wk5_Slippage	= sum(case when wk=5 and Timing='Slippage'	then SalesAmt else 0 end),
							wk5_OnTime		= sum(case when wk=5 and Timing='OnTime'	then SalesAmt else 0 end),
							wk5_EarlyShip	= sum(case when wk=5 and Timing='Early'		then SalesAmt else 0 end),
							wk5_Total		= sum(case when wk=5 then SalesAmt else 0 end)
						FROM 
							vw_office as o 
							LEFT JOIN #snapshot as d ON o.OfficeCode = d.OfficeCode AND d.WeekNoParam=SnapshotNo and (d.WeekNoParam-1)<=NoOfWeek 
								and d.wk <= NoOfWeek
						WHERE o.OfficeCode in ('BD','CA','HK','IN','LK','ND','SH','TR','VN')
						GROUP by o.OfficeCode, d.FiscalYear, d.Period, d.WeekNoParam
						ORDER BY o.OfficeCode 
					]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="FiscalPeriod" name="@FiscalPeriod" type="int" direction="Input" />
          <param key="SnapshotNo" name="@SnapshotNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NssWeeklySalesSummary"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NssWeeklySalesDetailReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand  name="getNssWeeklySalesSnapshotDetail" type="Text">
        <commandText>
          <![CDATA[
					select d.*, p.MaxSnapshotNo,
						Timing = (case TimingStatus when 'S' then 'Slippage' when 'O' then 'OnTime' when 'E' then 'Early' else '' end),
						wk = case when (d.WeekNo < d.WeekNoParam and d.ShipmentStatus='OrderBook') then d.WeekNoParam when d.WeekNo < 1 then 1 else d.WeekNo end, 
						DlyDateDiffInWeek = datediff(wk, coalesce(PreviousDeliveryDate, DeliveryDate), DeliveryDate),
						p.PeriodStartDate, p.NoOfWeek, p.NextPeriodNoOfWeek, 
						LastPeriodDeliveryDate=null,
						Status = (case s.WorkflowStatusId when 8 then 'Actual' when 9 then 'Cancelled' else 'OrderBook' end),
						DlyDate = convert(varchar,(case when s.WorkflowStatusId=8 then s.ActualAtWarehouseDate else s.CustomerAtWarehouseDate end),23),
						Customer = (select replace(CustomerCode,char(13)+char(10),'') from Customer where CustomerId=c.CustomerId)
					into #snapshot
					from (select FiscalYear=fc.BudgetYear, FiscalPeriod=fc.Period, MaxSnapshotNo=@MaxSnapshotNo, 
								PeriodStartDate=fc.StartDate, PeriodEndDate=fc.EndDate,
								NoOfWeek = datediff(ww,fc.StartDate,fc.EndDate)+1,
								NextPeriodNoOfWeek = datediff(ww,nfc.StartDate,nfc.EndDate)+1
							from nsldb..AccountFinancialCalender as fc
								inner join nsldb..AccountFinancialCalender as nfc on nfc.StartDate=dateadd(d,1,fc.EndDate) and nfc.AppId=9
							where fc.AppId=9 and fc.BudgetYear=@FiscalYear and fc.Period=@FiscalPeriod
						) as p
						inner join WeeklySalesSnapshotDetailForSimon as d on d.FiscalYear=p.FiscalYear and d.Period=p.FiscalPeriod and d.WeekNoParam <= p.MaxSnapshotNo
						inner join Shipment as s with (nolock) on s.shipmentId=d.ShipmentId
						inner join Contract as c with (nolock) on c.ContractId=s.ContractId
	
					---------------------------------------------------------------------------------------------
					-- Weekly Sales detail in the period by Shipment (version 3 : include the order slipped to next period)
					SELECT t.officeCode, t.ContractNo, t.DeliveryNo, 
						t.Status, t.DlyDate, t.Customer,

						Week0_WkNo		= max(case when WeekNoParam=1 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week0_Timing	= max(case when WeekNoParam=1 and Wk<=NoOfWeek then Timing else '' end),
						Week0_Status	= max(case when WeekNoParam=1 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week0_DlyDate	= max(case when WeekNoParam=1 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week0_Amt		= max(case when WeekNoParam=1 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),

						Week1_WkNo		= max(case when WeekNoParam=2 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week1_Timing	= max(case when WeekNoParam=2 and Wk<=NoOfWeek then Timing else '' end),
						Week1_Status	= max(case when WeekNoParam=2 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week1_DlyDate	= max(case when WeekNoParam=2 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week1_Amt		= max(case when WeekNoParam=2 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),

						Week2_WkNo		= max(case when WeekNoParam=3 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week2_Timing	= max(case when WeekNoParam=3 and Wk<=NoOfWeek then Timing else '' end),
						Week2_Status	= max(case when WeekNoParam=3 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week2_DlyDate	= max(case when WeekNoParam=3 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week2_Amt		= max(case when WeekNoParam=3 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),
	
						Week3_WkNo		= max(case when WeekNoParam=4 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week3_Timing	= max(case when WeekNoParam=4 and Wk<=NoOfWeek then Timing else '' end),
						Week3_Status	= max(case when WeekNoParam=4 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week3_DlyDate	= max(case when WeekNoParam=4 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week3_Amt		= max(case when WeekNoParam=4 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),

						Week4_WkNo		= max(case when WeekNoParam=5 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week4_Timing	= max(case when WeekNoParam=5 and Wk<=NoOfWeek then Timing else '' end),
						Week4_Status	= max(case when WeekNoParam=5 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week4_DlyDate	= max(case when WeekNoParam=5 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week4_Amt		= max(case when WeekNoParam=5 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),

						Week5_WkNo		= max(case when WeekNoParam=6 and Wk<=NoOfWeek then convert(varchar,wk) else '' end),
						Week5_Timing	= max(case when WeekNoParam=6 and Wk<=NoOfWeek then Timing else '' end),
						Week5_Status	= max(case when WeekNoParam=6 and Wk<=NoOfWeek then ShipmentStatus else '' end),
						Week5_DlyDate	= max(case when WeekNoParam=6 and Wk<=NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						Week5_SalesAmt	= max(case when WeekNoParam=6 and Wk<=NoOfWeek then convert(varchar,SalesAmt) else '' end),

						WeekX_WkNo		= max(case when WeekNoParam=MaxSnapshotNo and Wk>NoOfWeek then convert(varchar,wk-NoOfWeek) else '' end),
						WeekX_Timing	= max(case when WeekNoParam=MaxSnapshotNo and Wk>NoOfWeek then Timing else '' end),
						WeekX_Status	= max(case when WeekNoParam=MaxSnapshotNo and Wk>NoOfWeek then ShipmentStatus else '' end),
						WeekX_DlyDate	= max(case when WeekNoParam=MaxSnapshotNo and Wk>NoOfWeek then convert(varchar, DeliveryDate,23) else '' end),
						WeekX_SalesAmt	= max(case when WeekNoParam=MaxSnapshotNo and Wk>NoOfWeek then convert(varchar,SalesAmt) else '' end),

						Other_DlyDate	= (CASE WHEN max((CASE WHEN WeekNoParam=MaxSnapshotNo and wk<=NoOfWeek+NextPeriodNoOfWeek THEN wk ELSE null END)) IS NOT NULL THEN ''
											ELSE convert(varchar, MAX(ISNULL(s.ActualAtWarehouseDate,s.CustomerAtWarehouseDate)),23) END),
						Other_SalesAmt	= (CASE WHEN max((CASE WHEN WeekNoParam=MaxSnapshotNo and wk<=NoOfWeek+NextPeriodNoOfWeek THEN wk ELSE null END)) IS NOT NULL THEN ''
											ELSE convert(varchar, MAX((CASE WHEN s.WorkflowStatusId=8 THEN s.TotalShippedAmt ELSE s.TotalOrderAmt END))) END), 
						Other_WFS		= (case when max((case when WeekNoParam=MaxSnapshotNo and wk<=NoOfWeek+NextPeriodNoOfWeek then wk else null end)) IS NOT NULL THEN ''
											ELSE (select WorkflowStatusDesc 
													from ContractWFS 
													where WorkflowStatusId=s.WorkflowStatusId)
											END) 
						FROM (select distinct ShipmentId from #snapshot where wk <= NoOfWeek) as x
							inner join #snapshot as t on x.ShipmentId=t.ShipmentId
							left join shipment as s on s.shipmentId=t.ShipmentId
							left join contract as c on c.ContractId=s.ContractId
						GROUP BY t.shipmentId, t.OfficeCode, t.ContractNo, t.DeliveryNo, t.LastPeriodDeliveryDate,t.Status,t.DlyDate, t.Customer, s.WorkflowStatusId
						ORDER BY t.OfficeCode, t.ContractNo, t.DeliveryNo
					
					]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="FiscalPeriod" name="@FiscalPeriod" type="int" direction="Input" />
          <param key="MaxSnapshotNo" name="@MaxSnapshotNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NssWeeklySalesDetail"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NssWeeklySalesSlippedOrderApt" populateCommands="false">
    <selectCommand>
      <dataCommand   name="getNssWeeklySalesSlippedOrder" type="Text">
        <commandText>
          select
          OfficeCode,
          Department = rtrim(replace(Dept,'('+OfficeCode+')','')),
          ProductTeam = ProductTeamCode + ' - ' + ProductTeam,
          ContractNo, DeliveryNo,
          OriginalDeliveryDate = convert(varchar,OriginalDeliveryDate,23),
          RevisedDeliveryDate = convert(varchar,RevisedDeliveryDate,23),
          SalesAmt
          from WeeklySalesSnapshotSlippedOrderForSimon as ws
          where ws.FiscalYear=@FiscalYear and ws.Period=@FiscalPeriod and WeekNoParam=@SnapshotNo
          order by OfficeCode,ContractNo,shipmentid
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="FiscalPeriod" name="@FiscalPeriod" type="int" direction="Input" />
          <param key="SnapshotNo" name="@SnapshotNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NssWeeklySalesSlippedOrder"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="FLContractApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetFLContractByCriteria" type="Text">
        <commandText>
          SELECT * FROM FLContract WHERE NSLRefNo = @NSLRefNo
        </commandText>
        <parameters>
          <param key="NSLRefNo" name="@NSLRefNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="FLContract" />
    </tableMappings>
  </dataSetAdapter>
  
</dataOperations>
