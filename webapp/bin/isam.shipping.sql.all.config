<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">

  <dataSetAdapter name="InvoiceApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetInvoiceByKey" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetInvoiceByInvoiceNo" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE InvoicePrefix = @InvoicePrefix AND InvoiceSeq = @InvoiceSeq AND InvoiceYear = @InvoiceYear
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeq" name="@InvoiceSeq" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetInvoiceByInvoiceNoAndSequenceNo" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE InvoicePrefix = @InvoicePrefix AND InvoiceSeq = @InvoiceSeq AND InvoiceYear = @InvoiceYear
          AND (@SequenceNo IS NULL OR SequenceNo = @SequenceNo) ORDER BY SequenceNo ASC
        </commandText>
      </dataCommand>
      <parameters>
        <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
        <param key="InvoiceSeq" name="@InvoiceSeq" type="int" direction="Input" />
        <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
        <param key="SequenceNo" name="@SequenceNo" type="int" direction="Input" />
      </parameters>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetInvoiceByEInvoiceBatchId" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE eInvoiceBatchId = @eInvoiceBatchId
        </commandText>
        <parameters>
          <param key="eInvoiceBatchId" name="@eInvoiceBatchId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetInvoiceSentList" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE IsReadyToSendInvoice = 1
          ORDER BY dbo.fn_formatInvoiceNo(InvoicePrefix, InvoiceSeq, InvoiceYear)
        </commandText>
      </dataCommand>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetInvoiceListForDMSUpload" type="Text">
        <commandText>
          SELECT * FROM Invoice WHERE IsUploadDMSDocument = 1
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Invoice" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentDeductionApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentDeductionByKey" type="Text">
        <commandText>
          SELECT * FROM ShipmentDeduction WHERE ShipmentDeductionId = @ShipmentDeductionId
        </commandText>
        <parameters>
          <param key="ShipmentDeductionId" name="@ShipmentDeductionId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShipmentDeductionByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM ShipmentDeduction WHERE ShipmentId = @ShipmentId AND DeductionType = @DeductionTypeId AND DocNo = @DocNo AND Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="DeductionTypeId" name="@DeductionTypeId" type="Int" direction="Input" />
          <param key="DocNo" name="@DocNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAllShipmentDeductionByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM ShipmentDeduction WHERE ShipmentId = @ShipmentId AND DeductionType = @DeductionTypeId AND DocNo = @DocNo
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="DeductionTypeId" name="@DeductionTypeId" type="Int" direction="Input" />
          <param key="DocNo" name="@DocNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShipmentDeductionList" type="Text">
        <commandText>
          SELECT * FROM ShipmentDeduction WHERE ShipmentId = @ShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxShipmentDeductionId" type="Text">
        <commandText>
          SELECT MAX(ShipmentDeductionId) FROM ShipmentDeduction
        </commandText>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentDeduction" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="InvoiceNoParamApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetLatestInvoiceNo" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT TOP 1 p.*, 
              Piority = (CASE WHEN p.SampleType > 0 THEN 0			-- MockShop Sample/Studio Sample
                              WHEN p.SpecialOrderTypeId > 0 THEN 1	-- Special Order
                              WHEN p.CustomerId = '0' THEN 2		-- UTurn order
                              ELSE 3 END)							-- Others
            FROM Contract c
              INNER JOIN Shipment s ON s.ContractId = c.ContractId AND s.ShipmentId = @ShipmentId
              INNER JOIN InvoiceNoParam p ON p.OfficeId = (case when c.OfficeId=17 then s.SalesForecastSpecialGroupId else c.officeId end)
			      AND (p.TradingAgencyId LIKE ('%' + CONVERT(varchar, c.TradingAgencyId) + '%') OR p.TradingAgencyId = '0')
                  AND ( ( -- UT, Special order, Mock shop or Studio Sample
						  ((s.IsMockShopSample = 1 AND p.SampleType='1')		-- Mock Shop order
							OR (s.IsStudioSample = 1 AND p.SampleType='2')		-- Studio Sample order
							OR (s.TermOfPurchaseId = 5 AND p.SampleType='0')	-- UT order
						  ) 
						  AND p.CustomerId = '0'
						)
						OR (-- Other order (neither UT nor Mock shop/Studio Sample)
							NOT (s.TermOfPurchaseId = 5 OR s.IsMockShopSample = 1 OR s.IsStudioSample = 1)
							--AND (p.SpecialOrderTypeId = s.SpecialOrderTypeid)
              AND ((p.SpecialOrderTypeId = s.SpecialOrderTypeid ) or c.customerid not in (1,2))
							AND (',' + p.CustomerId + ',' LIKE ('%,' + CONVERT(varchar, c.CustomerId) + ',%'))
						   )
                      )
            ORDER BY InvoiceYear DESC, Piority, InvoicePrefix
          ]]>
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetInvoiceNoParamByKey" type="Text">
        <commandText>
          SELECT * FROM InvoiceNoParam
          WHERE OfficeId = @OfficeId
          AND CustomerId = @CustomerId
          AND TradingAgencyId = @TradingAgencyId
          AND SampleType = @SampleType
          AND SpecialOrderTypeId = @SpecialOrderTypeId
          AND InvoiceYear = @InvoiceYear
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="CustomerId" name="@CustomerId" type="varchar" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="varchar" direction="Input" />
          <param key="SampleType" name="@SampleType" type="varchar" direction="Input" />
          <param key="SpecialOrderTypeId" name="@SpecialOrderTypeId" type="varchar" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="InvoiceNoParam" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="DocumentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetDocumentListByShipmentId" type="Text">
        <commandText>
          SELECT * FROM Document WHERE ShipmentId = @ShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetDocumentByKey" type="Text">
        <commandText>
          SELECT * FROM Document WHERE DocId = @DocId
        </commandText>
        <parameters>
          <param key="DocId" name="@DocId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetDocumentListByContractNoAndDeliveryNo" type="Text">
        <commandText>
          SELECT d.* FROM Document d
          INNER JOIN Shipment s ON d.ShipmentId = s.ShipmentId
          INNER JOIN Contract c ON s.ContractId = c.ContractId
          WHERE c.ContractNo = @ContractNo AND s.DeliveryNo = @DeliveryNo
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDocumentId" type="Text">
        <commandText>
          SELECT MAX(DocId) FROM Document
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Document" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ActionHistoryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetActionHistoryByShipmentId" type="Text">
        <commandText>
          SELECT * FROM ActionHistory WHERE ShipmentId = @ShipmentId
          AND Status = 1
          ORDER BY ActionDate DESC
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetActionHistoryByShipmentIdAndType" type="Text">
        <commandText>
          SELECT * FROM ActionHistory WHERE ShipmentId = @ShipmentId
          AND ActionHistoryTypeId = @ActionHistoryTypeId
          AND Status = 1
          ORDER BY ActionDate DESC
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="ActionHistoryTypeId" name="@ActionHistoryTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetActionHistoryByTypeAndActionDate" type="Text">
        <commandText>
          SELECT * FROM ActionHistory WHERE ActionHistoryTypeId = @ActionHistoryTypeId
          AND (DATEPART(yy, ActionDate))= @Year
          AND (DATEPART(mm, ActionDate))= @Month
          AND (DATEPART(dd, ActionDate))= @Day
          AND Status = 1
          ORDER BY ActionDate DESC
        </commandText>
        <parameters>
          <param key="Year" name="@Year" type="Int" direction="Input" />
          <param key="Month" name="@Month" type="Int" direction="Input" />
          <param key="Day" name="@Day" type="Int" direction="Input" />
          <param key="ActionHistoryTypeId" name="@ActionHistoryTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetActionHistoryByShipmentAndTypeAndActionDateRange" type="Text">
        <commandText>
          SELECT * FROM ActionHistory WHERE ShipmentId = @ShipmentId
          AND ActionHistoryTypeId = @ActionHistoryTypeId
          AND ActionDate between @dayFrom AND @dayTo
          AND Status = 1
          ORDER BY ActionDate DESC
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="dayFrom" name="@dayFrom" type="DateTime" direction="Input" />
          <param key="dayTo" name="@dayTo" type="DateTime" direction="Input" />
          <param key="ActionHistoryTypeId" name="@ActionHistoryTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetActionHistoryByKey" type="Text">
        <commandText>
          SELECT * FROM ActionHistory WHERE ActionHistoryId = @ActionHistoryId
        </commandText>
        <parameters>
          <param key="ActionHistoryId" name="@ActionHistoryId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxActionHistoryId" type="Text">
        <commandText>
          SELECT MAX(ActionHistoryId) FROM ActionHistory
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ActionHistory" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="InvoiceListReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetInvoiceListByCriteria" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT 
          InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
          i.InvoiceDate, i.SequenceNo,
          Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId), 
          ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId ), 
          Vendor = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId), 
          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),  c.ContractNo, s.DeliveryNo, 
          CustomerDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),  
          TermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = s.TermOfPurchaseId),           
          SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
          BuyCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.BuyCurrencyId),
          LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
          s.TotalShippedAmt,  s.TotalShippedQty, 
          TotalShippedAmtUSD = ROUND(s.TotalShippedAmt * sellER.ExchangeRate / ISNULL(sellBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3),
          TotalShippedNetFOBAmtAfterDiscount = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN s.TotalShippedNetFOBAmtAfterDiscount ELSE 0 END, 
		  TotalShippedNetFOBAmtAfterDiscountUSD = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN 
			        ROUND(s.TotalShippedNetFOBAmtAfterDiscount * buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3)
			        ELSE 0 END,
          i.SupplierInvoiceNo, 
          TotalShippedSupplierGmtAmtAfterDiscount = isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount), 
          TotalShippedSupplierGmtAmtAfterDiscountUSD = ROUND(isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount)* 
              buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3),
          i.IsLCPaymentChecked, 
          ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId), 
          CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId)
          ,s.QACommissionPercent, s.VendorPaymentDiscountPercent, m.DepartDate
		  ,i.APDate, s.PaymentTermId, i.LCNo, i.LCPaymentCheckedDate, i.LCExpiryDate, i.LCIssueDate
      , ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * (s.QACommissionPercent/100)* buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),2) As QAAmt
      ,CommSvc = CASE When s.TermOfPurchaseId = 5 Then 
      (Select CommSvc from  (Select ss.shipmentid, ROUND(ROUND(SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / ss.QuarterlyExchangeRate,2) * sd.ShippedQty) / ROUND(1.0 / ss.QuarterlyExchangeRate,4), 2) * 0.10417, 2)  As CommSvc
      from shipmentdetail sd INNER JOIN shipment ss ON sd.shipmentid = ss.shipmentid and ss.shipmentid = s.shipmentid and ss.QuarterlyExchangeRate != 0  Group by ss.shipmentid, ss.QuarterlyExchangeRate ) AS CommSvcTempTable )
      Else (0) END
          FROM invoice AS i
          INNER JOIN shipment AS s  ON i.ShipmentId = s.ShipmentId
          INNER JOIN Contract AS c  ON s.ContractId = c.ContractId                                                            
          --LEFT JOIN ExchangeRate AS sellER ON sellER.CurrencyId = s.SellCurrencyId  AND sellER.ExchangeRateTypeId = 1 AND i.InvoiceDate BETWEEN sellER.EffectiveDateFrom AND sellER.EffectiveDateTo AND sellER.Status = 1
          --LEFT JOIN ExchangeRate AS buyER ON buyER.CurrencyId = s.BuyCurrencyId  AND buyER.ExchangeRateTypeId = 1 AND i.InvoiceDate BETWEEN buyER.EffectiveDateFrom AND buyER.EffectiveDateTo AND buyER.Status = 1
          --LEFT JOIN ExchangeRate AS baseER ON baseER.CurrencyId = @baseCurrencyId AND baseER.ExchangeRateTypeId = 1 AND i.InvoiceDate BETWEEN baseER.EffectiveDateFrom AND baseER.EffectiveDateTo AND baseER.Status = 1
          		LEFT JOIN 
          (
                SELECT ShipmentId, TotalShippedSupplierGmtAmtAfterDiscount = SUM(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment
                WHERE
                Status = 1 AND IsVirtualSetSplit = 0
                GROUP BY ShipmentId
            ) AS x ON x.ShipmentId = i.ShipmentId
            LEFT JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.ShipmentId = i.ShipmentId and ir.IsCancelled = 0
            LEFT JOIN 
            (
				      SELECT  OrderRefId, 
					            VoyageNo = substring(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23) + im.VoyageNo),21,99),
					            DepartDate = SUBSTRING(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23)),11,10)
				      FROM ILSManifestDetail md 
					    INNER JOIN ILSManifest im ON im.ContainerNo = md.ContainerNo
				      WHERE md.IsCancelled = 0 
				      GROUP BY md.OrderRefid						
            ) AS m ON m.OrderRefId = ir.OrderRefId 
            LEFT JOIN 
				(
					SELECT DISTINCT ShipmentId, CASE WHEN @Version = 'SUN' THEN NULL ELSE EndDate END AS EndDate FROM SUNInterfaceLog si
						INNER JOIN NSLDB..AccountFinancialCalender ac ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
						WHERE SunInterfaceTypeId = 1 AND CategoryId IN (1,4) AND QueueId <> -1
				) AS y ON y.ShipmentId = i.ShipmentId
			LEFT JOIN ExchangeRate AS sellBaseER ON sellBaseER.CurrencyId = @baseCurrencyId AND sellBaseER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, InvoiceDate) BETWEEN sellBaseER.EffectiveDateFrom AND sellBaseER.EffectiveDateTo AND sellBaseER.Status = 1
			LEFT JOIN ExchangeRate AS sellER ON sellER.CurrencyId = s.SellCurrencyId AND sellER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, i.InvoiceDate) BETWEEN sellER.EffectiveDateFrom AND sellER.EffectiveDateTo AND sellER.Status = 1
			LEFT JOIN 
				(
					SELECT DISTINCT ShipmentId, CASE WHEN @Version = 'SUN' THEN NULL ELSE EndDate END AS EndDate FROM SUNInterfaceLog si
						INNER JOIN NSLDB..AccountFinancialCalender ac ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
						WHERE SunInterfaceTypeId = 3 AND CategoryId IN (1,4) AND QueueId <> -1
				) AS z ON z.ShipmentId = i.ShipmentId
			LEFT JOIN ExchangeRate AS buyBaseER ON buyBaseER.CurrencyId = @baseCurrencyId AND buyBaseER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate, InvoiceDate) BETWEEN buyBaseER.EffectiveDateFrom AND buyBaseER.EffectiveDateTo AND buyBaseER.Status = 1
			LEFT JOIN ExchangeRate AS buyER ON buyER.CurrencyId = s.BuyCurrencyId AND buyER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate , i.InvoiceDate) BETWEEN buyER.EffectiveDateFrom AND buyER.EffectiveDateTo AND buyER.Status = 1
          WHERE
			  s.WorkflowStatusId = 8 AND  s.Status = 1
			  AND (@InvoicePrefix = '' OR ((i.InvoicePrefix =@InvoicePrefix)
			  AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
			  AND (i.InvoiceYear = @InvoiceYear)))
			  AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
			  AND (@vendorId = -1 OR s.VendorId = @vendorId)
			  AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
			  AND c.OfficeId @officeIdList
			  AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)         
			  AND (@seasonId = -1 OR c.SeasonId = @seasonId)
			  AND c.ProductTeamId @productTeamList
			  AND (@oprFabricType = -1 OR (@oprFabricType = -2 AND s.WithOPRFabric <> 0) OR  s.WithOPRFabric = @oprFabricType)
			  AND (@budgetYear = -1 OR EXISTS(SELECT * FROM CutOffSales WHERE ShipmentId = s.ShipmentId AND IsAccrual = 0
							AND FiscalYear = @budgetYear AND Period BETWEEN @periodFrom AND @periodTo))
			  AND (c.CustomerId @customerIdList)
			  AND (c.TradingAgencyId @tradingAgencyList)
			  AND (s.ShipmentMethodId @shipmentMethodList)
			  AND (@voyageNo = '' OR m.VoyageNo = @voyageNo)
			  AND (@purchaseExtractDateFrom IS NULL OR EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 5 AND
				CreatedOn BETWEEN @purchaseExtractDateFrom AND DATEADD(d,1,@purchaseExtractDateTo)))
			  AND (@customerDestinationId = -1 OR s.CustomerDestinationId = @customerDestinationId)
			  AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
			  --AND (@isUTOrder = -1 OR (@isUTOrder = 1 AND s.CustomerDestinationId IN (4,5,28))  OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)) )
        --AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN  (5)) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5) )
		AND (@isUTOrder = -1 OR (@isUTOrder = 0 AND s.TermOfPurchaseId <> 5) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
			  AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
        AND ((@isSampleOrder = -1)
          OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
          OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1)))  
        
			  AND (@accountDocReceipt = -1 OR (@accountDocReceipt=1 AND i.AccountDocReceiptDate IS NOT NULL) OR (@accountDocReceipt=0 AND i.AccountDocReceiptDate IS NULL))
			  AND (@PaymentTermId = -1 OR s.PaymentTermId = @PaymentTermId)
			  AND (@IsAccountPaid = -1 OR @IsAccountPaid = (CASE WHEN i.APDate IS NOT NULL THEN 1 ELSE 0 END))
			  AND (@IsLCPaymentChecked = -1 OR i.IsLCPaymentChecked = @IsLCPaymentChecked)
        AND (@ShippingDocReceiptDate = -1 OR (@ShippingDocReceiptDate = 1 AND i.ShippingDocReceiptDate IS NOT NULL) OR (@ShippingDocReceiptDate = 0 AND i.ShippingDocReceiptDate IS NULL))        
          ]]>
        </commandText>
        <parameters>
          <param key="invoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="invoiceSeqFrom" name="@invoiceSeqFrom" type="int" direction="Input" />
          <param key="invoiceSeqTo" name="@invoiceSeqTo" type="int" direction="Input" />
          <param key="invoiceYear" name="@invoiceYear" type="int" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="departDateFrom" name="@departDateFrom" type="DateTime" direction="Input" />
          <param key="departDateTo" name="@departDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="oprFabricType" name="@oprFabricType" type="int" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="purchaseExtractDateFrom" name="@purchaseExtractDateFrom" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateTo" name="@purchaseExtractDateTo" type="DateTime" direction="Input" />
          <param key="customerDestinationId" name="@customerDestinationId" type="int" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="accountDocReceipt" name="@accountDocReceipt" type="int" direction="Input" />
          <param key="voyageNo" name="@voyageNo" type="varchar" direction="Input" />
          <param key="version" name="@version" type="varchar" direction="Input" />
          <param key="PaymentTermId" name="@PaymentTermId" type="int" direction="Input" />
          <param key="isAccountPaid" name="@IsAccountPaid" type="int" direction="Input" />
          <param key="isLcPaymentChecked" name="@IsLCPaymentChecked" type="int" direction="Input" />
          <param key="shippingDocReceiptDate" name="@ShippingDocReceiptDate" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="InvoiceListReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="InvoiceListSummaryReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetInvoiceListSummaryByCriteria" type="Text">
        <commandText>
          <![CDATA[
          /*
          SELECT
	          [InvoiceNo] = InvoiceNo,
	          [InvoiceDate] = InvoiceDate,
	          [Season] = Season,
	          [ProdTeam] = ProductTeam,
	          [SupplierName] = Vendor,
	          [ItemNo] = ItemNo,
	          [ContractNo] = ContractNo,
	          [DlyNo] = DeliveryNo,
	          [SeqNo] = isnull(convert(varchar,SequenceNo), ''),
	          [Destination] = CustomerDestination,
	          [PurchaseTerm] = TermOfPurchase,
	          [LoadingPort] = LoadingPort,
	          [ShippedQty] = TotalShippedQty,
	          [Ccy] = SellCurrency,
	          [NSLtoNUKInvAmt] = TotalShippedAmt,
	          [NSLtoNUKInvAmtUSD] = TotalShippedAmtUSD,
	          [TtlFOBAmtForCMT] = isnull(convert(varchar, TotalShippedNetFOBAmtAfterDiscount), ''),
	          [TtlFOBAmtForCMTUSD] = isnull(convert(varchar, TotalShippedNetFOBAmtAfterDiscountUSD), ''),
	          [SupInvNo] = isnull(SupplierInvoiceNo, ''),
	          [SupInvAmt] = TotalShippedSupplierGmtAmtAfterDiscount,
	          [SupInvAmtUSD] = TotalShippedSupplierGmtAmtAfterDiscountUSD,
	          [LCPaymentCheckedDate] = LCPaymentCheckedDate,
	          [ShipmentMethod] = ShipmentMethod,
	          [CO] = CO,
	          [DepartureDate] = DepartDate,
	          [AccountPayableDate] = APDate,
	          [PaymentTerm]= (SELECT PaymentTermDesc FROM paymentTerm WHERE paymentTermId = x.paymentTermId),
	          [LCNo] = isnull(LCNo, ''),
	          [LCIssueDate] = LCIssueDate,
	          [LCExpiryDate] = LCExpiryDate,
	          [LCBillRefNo] = isnull(LCBillRefNo, ''),
	          [QACommissionUSD] = QAAmt,
	          [UTCommAndServiceChargeUSD] = CommSvc,
	          -- New Columns
	          [ShippingDocReceiptDate] = ShippingDocReceiptDate,
	          [CostOfGoodSoldSettlementDate] = APDate,
	          [InvoiceDateVSShippingDocReceiptDate] = isnull(datediff(d, invoiceDate, ShippingDocReceiptDate), 0),
	          [ShippingDocReceiptDateVSLCCheckDate] = isnull(datediff(d, ShippingDocReceiptDate, lcPaymentCheckedDate), 0),
	          [LCCheckDateVSSettlementDate] = isnull(datediff(d, lcPaymentCheckedDate, apdate), 0),
	          [InvoiceDateVSReportDate] = isnull(datediff(d, invoicedate, CONVERT(VARCHAR(10), getdate(), 126)), 0),
	          [AnyManifest] = AnyManifest,
	          IsPaid = IsPaid,
	          CASE WHEN isnull(lcbillrefno, '') @lcNumberList THEN 'L/C Presented to Bank' else '' END as LCAdditionalRemark
          FROM
          (
	          SELECT 
		          InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
		          i.InvoiceDate, i.SequenceNo,
		          Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId), 
		          ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId), 
		          Vendor = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId), 
		          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),  c.ContractNo, s.DeliveryNo, 
		          CustomerDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),  
		          TermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = s.TermOfPurchaseId),           
		          SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
		          BuyCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.BuyCurrencyId),
		          LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
		          s.TotalShippedAmt, s.TotalShippedQty, 
		          TotalShippedAmtUSD = ROUND(s.TotalShippedAmt * sellER.ExchangeRate / ISNULL(sellBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3 AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)), 3),
		          TotalShippedNetFOBAmtAfterDiscount = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN s.TotalShippedNetFOBAmtAfterDiscount ELSE 0 END, 
		          TotalShippedNetFOBAmtAfterDiscountUSD = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN 
		          ROUND(s.TotalShippedNetFOBAmtAfterDiscount * buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3 AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)), 3)
		          ELSE 0 END,
		          i.SupplierInvoiceNo, 
		          TotalShippedSupplierGmtAmtAfterDiscount = isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount), 
		          TotalShippedSupplierGmtAmtAfterDiscountUSD = ROUND(isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount) * buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3 AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3),
		          i.IsLCPaymentChecked, 
		          ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId), 
		          CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),
		          s.QACommissionPercent, s.VendorPaymentDiscountPercent, m.DepartDate, i.APDate, 
		          s.PaymentTermId, i.LCNo, i.LCPaymentCheckedDate, i.LCExpiryDate, i.LCIssueDate, i.lcbillrefno,
		          QAAmt = ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * (s.QACommissionPercent/100) * buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3 AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)), 2),
		          CommSvc = CASE WHEN s.TermOfPurchaseId = 5 THEN 
			          (SELECT CommSvc FROM (SELECT ss.shipmentid, ROUND(ROUND(SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / ss.QuarterlyExchangeRate,2) * sd.ShippedQty) / ROUND(1.0 / ss.QuarterlyExchangeRate,4), 2) * 0.10417, 2) AS CommSvc
			          FROM shipmentdetail sd 
			          INNER JOIN shipment ss ON sd.shipmentid = ss.shipmentid and ss.shipmentid = s.shipmentid and ss.QuarterlyExchangeRate != 0  
			          GROUP BY ss.shipmentid, ss.QuarterlyExchangeRate) AS CommSvcTempTable 
			          ) ELSE(0) END,
		          ShippingDocReceiptDate,
		          AnyManifest = isnull((SELECT TOP 1 anyManifest = 'Y' FROM ilsmanifestdetail WITH (nolock) WHERE OrderRefId=ior.OrderRefId),'N'),
		          (CASE WHEN i.APDate IS NOT NULL THEN 'Y' ELSE 'N' END) AS IsPaid
	          FROM invoice AS i WITH (nolock)
	          INNER JOIN Shipment AS s WITH (nolock) ON i.ShipmentId = s.ShipmentId
	          INNER JOIN Contract AS c WITH (nolock) ON s.ContractId = c.ContractId                                                            
	          LEFT JOIN ILSOrderRef AS ior WITH (nolock) on ior.shipmentid = s.ShipmentId
	          LEFT JOIN (
		          SELECT ShipmentId, TotalShippedSupplierGmtAmtAfterDiscount = SUM(TotalShippedSupplierGmtAmtAfterDiscount) 
		          FROM SplitShipment WITH (nolock)
		          WHERE Status = 1 AND IsVirtualSetSplit = 0
		          GROUP BY ShipmentId
	          ) AS x ON x.ShipmentId = i.ShipmentId
	          LEFT JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.ShipmentId = i.ShipmentId and ir.IsCancelled = 0
	          LEFT JOIN (
		          SELECT OrderRefId, 
		          VoyageNo = SUBSTRING(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23) + im.VoyageNo), 21, 99),
		          DepartDate = SUBSTRING(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23)), 11, 10)
		          FROM ILSManifestDetail md WITH (nolock)
		          INNER JOIN ILSManifest im WITH (nolock) ON im.ContainerNo = md.ContainerNo
		          WHERE md.IsCancelled = 0 
		          GROUP BY md.OrderRefid                                      
	          ) AS m ON m.OrderRefId = ir.OrderRefId 
	          LEFT JOIN (
		          SELECT DISTINCT ShipmentId, CASE WHEN 'SUN' = 'SUN' THEN NULL ELSE EndDate END AS EndDate 
		          FROM SUNInterfaceLog si WITH (nolock)
		          INNER JOIN NSLDB..AccountFinancialCalender ac WITH (nolock) ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
		          WHERE SunInterfaceTypeId = 1 AND CategoryId IN (1,4) AND QueueId <> -1
	          ) AS y ON y.ShipmentId = i.ShipmentId
	          LEFT JOIN ExchangeRate AS sellBaseER WITH (nolock) ON sellBaseER.CurrencyId = 3 AND sellBaseER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, InvoiceDate) BETWEEN sellBaseER.EffectiveDateFrom AND sellBaseER.EffectiveDateTo AND sellBaseER.Status = 1
	          LEFT JOIN ExchangeRate AS sellER WITH (nolock) ON sellER.CurrencyId = s.SellCurrencyId AND sellER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, i.InvoiceDate) BETWEEN sellER.EffectiveDateFrom AND sellER.EffectiveDateTo AND sellER.Status = 1
	          LEFT JOIN (
		          SELECT DISTINCT ShipmentId, CASE WHEN 'SUN' = 'SUN' THEN NULL ELSE EndDate END AS EndDate 
		          FROM SUNInterfaceLog si WITH (nolock)
		          INNER JOIN NSLDB..AccountFinancialCalender ac WITH (nolock) ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
		          WHERE SunInterfaceTypeId = 3 AND CategoryId IN (1,4) AND QueueId <> -1
	          ) AS z ON z.ShipmentId = i.ShipmentId
	          LEFT JOIN ExchangeRate AS buyBaseER WITH (nolock) ON buyBaseER.CurrencyId = 3 AND buyBaseER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate, InvoiceDate) BETWEEN buyBaseER.EffectiveDateFrom AND buyBaseER.EffectiveDateTo AND buyBaseER.Status = 1
	          LEFT JOIN ExchangeRate AS buyER WITH (nolock) ON buyER.CurrencyId = s.BuyCurrencyId AND buyER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate, i.InvoiceDate) BETWEEN buyER.EffectiveDateFrom AND buyER.EffectiveDateTo AND buyER.Status = 1
	          WHERE
	          s.WorkflowStatusId = 8 
            AND s.Status = 1

	          AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
	          AND c.OfficeId = 7

          ) AS x
          ORDER BY Year(InvoiceDate), Month(InvoiceDate), ShipmentMethod, Day(InvoiceDate)
          */
          
        DECLARE @version varchar(10) = 'SUN'   
        DECLARE @BaseCurrencyId int = 3


        SELECT
       [InvoiceNo] = InvoiceNo,
       [InvoiceDate] = InvoiceDate,
       [Season] = Season,
       [ProdTeam] = ProductTeam,
       [SupplierName] = Vendor,
       [ItemNo] = ItemNo,
       [ContractNo] = ContractNo,
       [DlyNo] = DeliveryNo,
       [SeqNo] = isnull(convert(varchar,SequenceNo),''),
       [Destination] = CustomerDestination,
       [PurchaseTerm] = TermOfPurchase,
       [LoadingPort] = LoadingPort,
       [ShippedQty] = TotalShippedQty,
       [Ccy] = SellCurrency,
       [NSLtoNUKInvAmt] = TotalShippedAmt,
       [NSLtoNUKInvAmtUSD] = TotalShippedAmtUSD,
       [TtlFOBAmtForCMT] = isnull(convert(varchar,TotalShippedNetFOBAmtAfterDiscount),''),
       [TtlFOBAmtForCMTUSD] = isnull(convert(varchar,TotalShippedNetFOBAmtAfterDiscountUSD),''),
       [SupInvNo] = isnull(SupplierInvoiceNo,''),
       [SupInvAmt] = TotalShippedSupplierGmtAmtAfterDiscount,
       [SupInvAmtUSD] = TotalShippedSupplierGmtAmtAfterDiscountUSD,
       [LCPaymentCheckedDate] = LCPaymentCheckedDate,
       [ShipmentMethod] = ShipmentMethod,
       [CO] = CO,
       [DepartureDate] = DepartDate,
       [AccountPayableDate] = APDate,
       [PaymentTerm]= (select PaymentTermDesc from paymentTerm where paymentTermId=x.paymentTermId),
       [LCNo] = isnull(LCNo ,''),
       [LCIssueDate] = LCIssueDate,
       [LCExpiryDate] = LCExpiryDate,
       [LCBillRefNo] = isnull(LCBillRefNo ,''),
       [QACommissionUSD] = QAAmt,
       [UTCommAndServiceChargeUSD] = CommSvc,
       -- New Columns
       [ShippingDocReceiptDate] = ShippingDocReceiptDate,
       [CostOfGoodSoldSettlementDate] = APDate,
       [InvoiceDateVSShippingDocReceiptDate] = isnull(datediff(d,invoiceDate,ShippingDocReceiptDate),0),
       [ShippingDocReceiptDateVSLCCheckDate] = isnull(datediff(d,ShippingDocReceiptDate,lcPaymentCheckedDate),0),
       [LCCheckDateVSSettlementDate] = isnull(datediff(d,lcPaymentCheckedDate,apdate),0),
       [InvoiceDateVSReportDate] = isnull(datediff(d,invoicedate,@InvoiceDateTo),0),
       [AnyManifest] = AnyManifest,
          IsPaid = IsPaid,
          case when isnull(lcbillrefno,'') @lcNumberList THEN 'L/C Presented to Bank' else '' END as LCAdditionalRemark
      FROM
      (
       SELECT 
             InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
             i.InvoiceDate, i.SequenceNo,
            Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId), 
             ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId ), 
             Vendor = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId), 
             ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),  c.ContractNo, s.DeliveryNo, 
             CustomerDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),  
             TermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = s.TermOfPurchaseId),           
             SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
             BuyCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.BuyCurrencyId),
             LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
             s.TotalShippedAmt,  s.TotalShippedQty, 
             TotalShippedAmtUSD = ROUND(s.TotalShippedAmt * sellER.ExchangeRate / ISNULL(sellBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3),
             TotalShippedNetFOBAmtAfterDiscount = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN s.TotalShippedNetFOBAmtAfterDiscount ELSE 0 END, 
             TotalShippedNetFOBAmtAfterDiscountUSD = CASE WHEN s.TermOfPurchaseId = 2 OR s.TermOfPurchaseId = 3 THEN 
                           ROUND(s.TotalShippedNetFOBAmtAfterDiscount * buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3)
                           ELSE 0 END,
             i.SupplierInvoiceNo, 
             TotalShippedSupplierGmtAmtAfterDiscount = isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount), 
             TotalShippedSupplierGmtAmtAfterDiscountUSD = ROUND(isnull(x.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount)* 
                    buyER.ExchangeRate / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),3),
             i.IsLCPaymentChecked, 
             ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId), 
             CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId)
             ,s.QACommissionPercent, s.VendorPaymentDiscountPercent, m.DepartDate
             ,i.APDate, s.PaymentTermId, i.LCNo, i.LCPaymentCheckedDate, i.LCExpiryDate, i.LCIssueDate, i.lcbillrefno
             ,QAAmt = ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount 
                                 * (s.QACommissionPercent/100) * buyER.ExchangeRate 
                                 / ISNULL(buyBaseER.ExchangeRate, (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeId = 1 AND EffectiveTypeId = 0)),2) 
             ,CommSvc = CASE When s.TermOfPurchaseId = 5 Then 
                                    (Select CommSvc 
                                        from  (Select ss.shipmentid, 
                                                      ROUND(ROUND(SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / ss.QuarterlyExchangeRate,2) * sd.ShippedQty) / ROUND(1.0 / ss.QuarterlyExchangeRate,4), 2) * 0.10417, 2)  As CommSvc
                                                     from shipmentdetail sd 
                                                            INNER JOIN shipment ss ON sd.shipmentid = ss.shipmentid and ss.shipmentid = s.shipmentid and ss.QuarterlyExchangeRate != 0  
                                                     Group by ss.shipmentid, ss.QuarterlyExchangeRate 
                                                     ) AS CommSvcTempTable 
                                        )
                                   Else (0) END
             ,ShippingDocReceiptDate
             ,AnyManifest = isnull((select top 1 anyManifest='Y' from ilsmanifestdetail with (nolock) where OrderRefId=ior.OrderRefId),'N'),
                    (CASE WHEN i.APDate IS NOT NULL THEN 'Y' ELSE 'N' END) AS IsPaid

       FROM invoice AS i with (nolock)
        INNER JOIN shipment AS s with (nolock)  ON i.ShipmentId = s.ShipmentId
        INNER JOIN Contract AS c with (nolock)  ON s.ContractId = c.ContractId                                                            
             LEFT JOIN ilsorderref as ior with (nolock) on ior.shipmentid=s.ShipmentId
             LEFT JOIN (
             SELECT ShipmentId, TotalShippedSupplierGmtAmtAfterDiscount = SUM(TotalShippedSupplierGmtAmtAfterDiscount) 
                           FROM SplitShipment with (nolock)
                WHERE Status = 1 AND IsVirtualSetSplit = 0
                GROUP BY ShipmentId
            ) AS x ON x.ShipmentId = i.ShipmentId
            LEFT JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.ShipmentId = i.ShipmentId and ir.IsCancelled = 0
            LEFT JOIN (
                                 SELECT  OrderRefId, 
                                         VoyageNo = substring(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23) + im.VoyageNo),21,99),
                                         DepartDate = SUBSTRING(MAX(convert(varchar,im.CreateDate,23) + convert(varchar,im.DepartDate,23)),11,10)
                                 FROM ILSManifestDetail md  with (nolock)
                                     INNER JOIN ILSManifest im with (nolock) ON im.ContainerNo = md.ContainerNo
                                 WHERE md.IsCancelled = 0 
                                 GROUP BY md.OrderRefid                                      
                     ) AS m ON m.OrderRefId = ir.OrderRefId 
            LEFT JOIN (
                                 SELECT DISTINCT ShipmentId, CASE WHEN @Version = 'SUN' THEN NULL ELSE EndDate END AS EndDate 
                                        FROM SUNInterfaceLog si with (nolock)
                                        INNER JOIN NSLDB..AccountFinancialCalender ac with (nolock) ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
                                        WHERE SunInterfaceTypeId = 1 AND CategoryId IN (1,4) AND QueueId <> -1
                           ) AS y ON y.ShipmentId = i.ShipmentId
                    LEFT JOIN ExchangeRate AS sellBaseER with (nolock) ON sellBaseER.CurrencyId = @baseCurrencyId AND sellBaseER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, InvoiceDate) BETWEEN sellBaseER.EffectiveDateFrom AND sellBaseER.EffectiveDateTo AND sellBaseER.Status = 1
                    LEFT JOIN ExchangeRate AS sellER with (nolock) ON sellER.CurrencyId = s.SellCurrencyId AND sellER.ExchangeRateTypeId = 1 AND ISNULL(y.EndDate, i.InvoiceDate) BETWEEN sellER.EffectiveDateFrom AND sellER.EffectiveDateTo AND sellER.Status = 1
                    LEFT JOIN (
                                 SELECT DISTINCT ShipmentId, CASE WHEN @Version = 'SUN' THEN NULL ELSE EndDate END AS EndDate 
                                        FROM SUNInterfaceLog si with (nolock)
                                        INNER JOIN NSLDB..AccountFinancialCalender ac with (nolock) ON ac.BudgetYear = si.FiscalYear AND ac.Period = si.Period AND ac.AppId = 13
                                        WHERE SunInterfaceTypeId = 3 AND CategoryId IN (1,4) AND QueueId <> -1
                           ) AS z ON z.ShipmentId = i.ShipmentId
                    LEFT JOIN ExchangeRate AS buyBaseER with (nolock) ON buyBaseER.CurrencyId = @baseCurrencyId AND buyBaseER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate, InvoiceDate) BETWEEN buyBaseER.EffectiveDateFrom AND buyBaseER.EffectiveDateTo AND buyBaseER.Status = 1
                    LEFT JOIN ExchangeRate AS buyER with (nolock) ON buyER.CurrencyId = s.BuyCurrencyId AND buyER.ExchangeRateTypeId = 1 AND ISNULL(z.EndDate , i.InvoiceDate) BETWEEN buyER.EffectiveDateFrom AND buyER.EffectiveDateTo AND buyER.Status = 1
          WHERE
                    s.WorkflowStatusId = 8 AND s.Status = 1 
                   --AND (@InvoicePrefix = '' OR ((i.InvoicePrefix =@InvoicePrefix)        AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND @InvoiceSeqTo)       AND (i.InvoiceYear = @InvoiceYear))) 
                    AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo) 
                    AND (-1 = -1 OR s.VendorId = -1) 
                    AND (-1 = -1 OR s.TermOfPurchaseId = -1) 
                    AND c.OfficeId IN (7) 
                    AND (-1 = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = -1) 
                    AND (-1 = -1 OR c.SeasonId = -1) 
                    AND c.ProductTeamId IN (87105,57061,87001,87002,87003,57057,57145,57058,87004,57060,87005,87006,87007,87008,57059,57202,57201,87009,57203,87010,57253,57079,87011,57254,87012,87013,87014,57077,57147,57078,87015,87016,57081,87017,87018,87019,57080,57196,87020,57195,87021,57197,87022,57055,57049,57144,57050,57056,57051,87023,57053,57048,57052,87024,87106,87107,87108,87109,87110,87111,87025,57054,57205,57204,57206,57128,87026,87169,57082,57129,87027,87061,87062,87063,87064,87065,87066,87067,87068,87069,87070,87071,87072,87073,87074,87075,87076,87077,87078,87079,87080,87081,87082,87083,87084,87085,87086,87087,57075,57068,57146,57069,57074,57071,87028,57076,57067,57070,87029,87030,57073,57199,57198,57200,87112,87113,87114,87115,87163,87116,87117,87118,87119,87120,87168,87164,87121,87122,87123,87124,87182,87181,87180,87178,87173,87170,87177,87179,87176,87175,87172,87174,87171,57040,57214,57217,57218,57130,87088,87089,87167,57034,87090,57192,87091,57031,57038,87092,57033,87093,57036,57039,87094,57026,87095,87096,57032,57030,57143,87097,57191,57027,57044,87098,57042,57046,87099,57131,57215,57045,57028,87100,87101,87102,87103,87104,57035,57062,87031,87032,57063,87033,87034,57194,57065,87035,87036,87125,57085,87161,57091,87126,57086,87162,87127,57110,57139,57087,57123,87128,57092,57213,57093,57094,57095,57212,57207,57208,87129,57096,57090,57097,57098,57111,57099,57100,57101,57102,57135,57175,57103,57104,57178,57176,57105,57177,57182,57106,57107,57108,57109,57140,57083,87130,57126,57089,57133,57084,87131,57112,57113,57114,57124,57115,87132,57116,87133,57117,57118,57119,57120,57121,57122,87134,57134,87135,57088,87136,57132,87037,87038,87039,87040,87041,87042,87043,87044,87045,87046,87047,87048,87049,87050,87051,87052,87053,87054,87055,87056,87057,87058,87059,87060,57020,57016,87137,87138,57138,57187,57137,87139,57006,87165,87140,57185,57018,57004,87160,57183,57188,57008,57193,87141,87142,87143,57149,57148,87144,87145,87146,57003,57005,57142,57001,87147,57022,87148,57189,87149,57025,57141,57017,57007,57019,57009,57002,57023,57012,57014,87166,87151,57136,57190,57216,87152,87154,57011,87155,57184,57010,57186,57013,57024,87156,57015,87157,87159) 
                    AND (-1 = -1 OR (-1 = -2 AND s.WithOPRFabric <> 0) OR s.WithOPRFabric = -1) 
                    AND (-1 = -1 OR EXISTS(SELECT * FROM CutOffSales WHERE ShipmentId = s.ShipmentId AND IsAccrual = 0 
                    AND FiscalYear = -1 AND Period BETWEEN -1 AND -1)) 
                    AND (c.CustomerId IN (1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38)) 
                    AND (c.TradingAgencyId IN (1,2,3,4)) 
                    AND (s.ShipmentMethodId IN (1,5,2,3,4)) 
                    AND ('' = '' OR m.VoyageNo = '') 
                    AND (NULL IS NULL OR EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 5 AND 
                    CreatedOn BETWEEN NULL AND DATEADD(d,1,NULL))) 
                    AND (-1 = -1 OR s.CustomerDestinationId = -1) 
                    AND (-1 = -1 OR c.IsNextMfgOrder = -1) 
                    --AND (-1 = -1 OR (-1 = 1 AND s.CustomerDestinationId IN (4,5,28)) OR (-1 = 0 AND s.CustomerDestinationId NOT IN (4,5,28)) ) 
                    --AND ((-1 IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (-1 = 1 AND s.TermOfPurchaseId = 5) ) 
                    AND (-1 = -1 OR (-1 = 0 AND s.TermOfPurchaseId <> 5) OR (-1 = 1 AND s.TermOfPurchaseId = 5)) 
                    AND (-1 = -1 OR c.IsLDPOrder = -1) 
                    AND ((0 = -1) 
                    OR (0 = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1)) 
                    OR (0 = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))) 

                    AND (-1 = -1 OR (-1=1 AND i.AccountDocReceiptDate IS NOT NULL) OR (-1=0 AND i.AccountDocReceiptDate IS NULL)) 
                    AND (-1 = -1 OR s.PaymentTermId = -1) 
                    AND (-1 = -1 OR 0 = (CASE WHEN i.APDate IS NOT NULL THEN 1 ELSE 0 END)) 
                    AND (-1 = -1 OR i.IsLCPaymentChecked = -1) 

                ) as x
                ORDER BY Year(InvoiceDate), Month(InvoiceDate), ShipmentMethod, Day(InvoiceDate)  
          ]]>
        </commandText>
        <parameters>
          <param key="lcNumberList" name="@lcNumberList" type="ArrayChar" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="InvoiceListSummaryReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="CTSSTWReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetCTSSTWReport" type="Text">
        <commandText>
          <![CDATA[ 
			create table #temp_shipment (ShipmentId int, CTSDate datetime)
				
			insert #temp_shipment
				select i.ShipmentId, im.CTSDate
				FROM Invoice i with (nolock)
						left JOIN ILSOrderRef AS ior with (nolock)  ON i.ShipmentId=ior.ShipmentId

						LEFT JOIN vwILSManifestDetail im with (nolock) ON im.OrderRefId = ior.OrderRefId
				WHERE	(@CTSDateFrom is NULL OR (im.CTSDate BETWEEN @CTSDateFrom AND @CTSDateTo))
							AND (@STWDateFrom is NULL OR ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN @STWDateFrom AND @STWDateTo )

            SELECT DISTINCT s.ShipmentId,
				Customer =(SELECT CustomerCode From Customer with (nolock) WHERE CustomerId = c.CustomerId), 
				ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure with (nolock) WHERE OfficeStructureId = c.ProductTeamId AND OfficeStructureTypeId = 50), 
				Supplier = (SELECT Name From NSLIndustry..Vendor with (nolock) WHERE VendorId = s.VendorId),
				c.ContractNo, s.DeliveryNo,             
				ItemNo = (SELECT ItemNo From Product with (nolock) WHERE ProductId = c.ProductId), 
				ShipmentPort = (SELECT ShipmentPortDesc FROM ShipmentPort with (nolock) WHERE ShipmentPortId = s.ShipmentPortId),  
				Destination = (SELECT DestinationDesc FROM CustomerDestination with (nolock) WHERE CustomerDestinationId = s.CustomerDestinationId),
				s.TotalShippedQty, 
				InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
				i.InvoiceDate, isnull(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate ) AS STWDate, 
				--imd.CTSDate,
				t.CTSDate,
				Currency = (SELECT CurrencyCode From Currency with (nolock) WHERE CurrencyId = s.SellCurrencyId), 
				s.TotalShippedAmt AS InvoiceAmount, 
				InvoiceAmountUSD = ROUND( s.TotalShippedAmt * CASE WHEN i.InvoiceDate IS NOT NULL THEN i.InvoiceSellExchangeRate ELSE  
					(SELECT ExchangeRate FROM ExchangeRate with (nolock) WHERE CurrencyId = s.SellCurrencyId AND
					ExchangeRateTypeId = 1 AND (isnull(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN EffectiveDateFrom AND EffectiveDateTo)) END
					  / (SELECT ExchangeRate FROM ExchangeRate with (nolock) WHERE CurrencyId = 3 AND ExchangeRateTypeId = 1 AND
					  (isnull(i.InvoiceDate, isnull(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate)) BETWEEN EffectiveDateFrom AND EffectiveDateTo)),2),
				ShipmentMethod = (SELECT ShipmentMethodDesc From ShipmentMethod with (nolock) WHERE ShipmentMethodId = s.ShipmentMethodId), 
				OPRType = (SELECT OPRFabricTypeName FROM OPRFabricType with (nolock) WHERE OPRFabricTypeId = s.WithOPRFabric),
				i.SupplierInvoiceNo
            FROM 
			#temp_shipment as t
			/*
			(
					select ior.ShipmentId, im.CTSDate
					FROM ILSOrderRef AS ior with (nolock) 
							INNER JOIN Invoice i with (nolock) ON i.ShipmentId=ior.ShipmentId
								AND (@STWDateFrom is NULL OR ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN @STWDateFrom AND @STWDateTo )
							LEFT JOIN vwILSManifestDetail im with (nolock) ON im.OrderRefId = ior.OrderRefId
					WHERE	(@CTSDateFrom is NULL OR (im.CTSDate BETWEEN @CTSDateFrom AND @CTSDateTo))
			) as t
			*/
				INNER JOIN Shipment AS s with (nolock) ON s.ShipmentId=t.ShipmentId
					  AND (s.WorkflowStatusId @status)
					  --AND (@UTOrder = -1 OR (@UTOrder = 1 AND s.CustomerDestinationId IN (4,5,28))  OR (@UTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
            --AND ((@UTOrder IN (-1,0) AND s.TermOfPurchaseId NOT IN (5)) OR (@UTOrder = 1 AND s.TermOfPurchaseId = 5))
			AND (@UTOrder = -1 OR (@UTOrder = 0 AND s.TermOfPurchaseId <> 5) OR (@UTOrder = 1 AND s.TermOfPurchaseId = 5))
					  AND (s.ShipmentMethodId @shipmentMethodList)
					  AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
					  AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
					  AND (@oprFabricType = -1 OR (@oprFabricType = -2 AND s.WithOPRFabric <> 0) OR  s.WithOPRFabric = @oprFabricType)
					  AND (s.CustomerDestinationId @customerDestination)
					  AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
		        AND ((@isSampleOrder = -1)
              OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
              OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
            )  
				INNER JOIN Invoice AS i with (nolock) ON i.ShipmentId = s.ShipmentId
		              AND (@selfBilledOrder = -1 OR i.IsSelfBilledOrder = @selfBilledOrder)
                  
  			INNER JOIN Contract AS c with (nolock) ON c.ContractId = s.ContractId                                                                        
					  AND c.OfficeId @officeIdList
					  AND c.ProductTeamId @productTeamList
					  AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
					  AND (@seasonId = -1 OR c.SeasonId = @seasonId)
					  AND (c.CustomerId @customerIdList)
					  AND (@packingMethodId = -1 OR c.PackingMethodId = @packingMethodId)
					  AND (@DualSourcingOrder = -1 OR c.IsDualSourcingOrder = @DualSourcingOrder)
					  AND (@NSLSZOrder = -1 OR c.IsNextMfgOrder = @NSLSZOrder)
					  AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
				--LEFT JOIN ILSOrderRef AS ior with (nolock) ON ior.ShipmentId = s.ShipmentId
				--LEFT JOIN vwILSManifestDetail imd with (nolock) ON imd.OrderRefId = ior.OrderRefId --AND imd.IsCancelled = 0
				--LEFT JOIN ILSPackingList AS ipl with (nolock) ON ipl.OrderRefId = ior.OrderRefId
            WHERE s.Status=1
              --(@CTSDateFrom IS NULL OR (imd.CTSDate BETWEEN @CTSDateFrom AND @CTSDateTo))
              --AND (@STWDateFrom IS NULL OR ((i.ActualAtWarehouseDate IS NULL AND i.ILSActualAtWarehouseDate  BETWEEN @STWDateFrom AND @STWDateTo) 
              --  OR  i.ActualAtWarehouseDate BETWEEN @STWDateFrom AND @STWDateTo))

            --Order by InvoiceNo	
          ]]>
        </commandText>
        <parameters>
          <param key="CTSDateFrom" name="@CTSDateFrom" type="DateTime" direction="Input" />
          <param key="CTSDateTo" name="@CTSDateTo" type="DateTime" direction="Input" />
          <param key="STWDateFrom" name="@STWDateFrom" type="DateTime" direction="Input" />
          <param key="STWDateTo" name="@STWDateTo" type="DateTime" direction="Input" />
          <param key="dualSourcingOrder" name="@dualSourcingOrder" type="int" direction="Input" />
          <param key="NSLSZOrder" name="@NSLSZOrder" type="int" direction="Input" />
          <param key="SelfBilledOrder" name="@selfBilledOrder" type="int" direction="Input" />
          <param key="UTOrder" name="@UTOrder" type="int" direction="Input" />
          <param key="status" name="@status" type="ArrayInt" direction="Input" />
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="packingMethodId" name="@packingMethodId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="oprFabricType" name="@oprFabricType" type="int" direction="Input" />
          <param key="customerDestination" name="@customerDestination" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="CTSSTWReport" />
    </tableMappings>
  </dataSetAdapter>
  <dataSetAdapter name="WeeklyShipmentReportApt">
    <selectCommand>
      <dataCommand name="GetWeeklyShipmentReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT Customer = (SELECT CustomerTypeDesc FROM Customer cust
										INNER JOIN CustomerType custType ON custType.CustomerTypeId = cust.CustomerTypeId 
										WHERE cust.CustomerId = x.CustomerId),
			  ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = x.ProductTeamId),
			  Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = x.SeasonId),
			  Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = x.VendorId),
			  ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = x.ProductId),
			  ContractNo, DeliveryNo, CustomerAtWarehouseDate, TotalPOQty, 
			  Unit = CONVERT(VARCHAR, PiecesPerPack) + ' / ' + (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId),
			  CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = x.CountryOfOriginId),
			  Destination = (SELECT DestinationDesc FROM CustomerDestination WHERE CustomerDestinationId = x.CustomerDestinationId),
			  LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = x.ShipmentPortId),
			  BookingAtWarehouseDate, BookingQty,
			  PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = x.PackingMethodId),
			  NUKAirFreightPaymentPercent, NSLAirFreightPaymentPercent, FTYAirFreightPaymentPercent,
			  NSLSZAirFreightPaymentPercent, OtherAirFreightPaymentPercent, OtherAirFreightPaymentRemark,
			  DocNo, DespatchToUKDate, BookingSONo, TotalShippedQty,
			  ActualInWHDate,
			  CTSDate,         
			  NSLSZOrder = CASE WHEN IsNextMfgOrder = 1 THEN 'Y' ELSE 'N' END,
			  OPRType = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = WithOPRFabric),
			  PhaseId, SupplierAtWarehouseDate, InboundDeliveryNo,
			  SupplierPOAmt = TotalPOAmt,
			  SupplierInvoiceAmt = TotalShippedNetFOBAmtAfterDiscount,
			  PaymentTermId,
			  LCNo,
			  IsTradingAF,
			  WorkflowStatus = (SELECT Description FROM WorkflowStatus WHERE RecordTypeId=1 AND WorkflowStatusId=x.WorkflowStatusId)
          FROM 
		  (
          SELECT c.CustomerId,
			  c.ProductTeamId,
			  c.SeasonId,
			  s.VendorId,
			  c.ProductId,
			  c.ContractNo, s.DeliveryNo, s.CustomerAtWarehouseDate, s.TotalPOQty,
			  c.PiecesPerPack, c.PackingUnitId,
			  s.CountryOfOriginId,
			  s.CustomerDestinationId,
			  s.ShipmentPortId,
			  i.BookingAtWarehouseDate, i.BookingQty,
			  c.PackingMethodId,
			  s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent,
			  s.NSLSZAirFreightPaymentPercent, s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark,
			  d.DocNo, d.DespatchToUKDate, i.BookingSONo, s.TotalShippedQty,
			  ActualInWHDate = (case when i.ActualAtWarehouseDate IS NULL THEN i.ILSActualAtWarehouseDate ELSE i.ActualAtWarehouseDate END),
			  CTSDate = (SELECT CTSDate FROM vwILSManifestDetail WHERE OrderRefId = ior.OrderRefId),          
			  c.IsNextMfgOrder,
			  WithOPRFabric,
			  InBoundDeliveryNo = case when c.CustomerId=13 then c.BookingRefNo else null end,  -- For EZIBUY only
			  c.PhaseId, s.SupplierAtWarehouseDate,
			  s.TotalPOAmt,
			  s.TotalShippedNetFOBAmtAfterDiscount,
			  s.PaymentTermId,
			  i.LCNo,
			  IsTradingAF = isnull(s.IsTradingAF,0),
			  s.WorkflowStatusId
          FROM Shipment AS s
			  INNER JOIN Contract AS c ON c.ContractId = s.ContractId
			  INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
			  LEFT JOIN Document AS d ON d.ShipmentId = s.ShipmentId
			  LEFT JOIN ILSOrderRef AS ior ON ior.ShipmentId = s.ShipmentId
				  LEFT JOIN ILSManifestDetail AS imd ON imd.OrderRefId = ior.OrderRefId AND imd.IsCancelled = 0
				  LEFT JOIN ILSManifest AS im ON im.ContainerNo = imd.ContainerNo
          WHERE
			  s.status = 1
			  AND (@stockToWHDateFrom IS NULL OR (i.ActualAtWarehouseDate BETWEEN @stockToWHDateFrom AND @stockToWHDateTo
					OR (i.ActualAtWarehouseDate IS NULL AND i.ILSActualAtWarehouseDate BETWEEN @stockToWHDateFrom AND @stockToWHDateTo)))
			  AND (@bookingDateFrom IS NULL OR (i.BookingDate BETWEEN @bookingDateFrom AND @bookingDateTo))
			  AND (@bookedAtWHDateFrom IS NULL OR (i.BookingAtWarehouseDate BETWEEN @bookedAtWHDateFrom AND @bookedAtWHDateTo))
			  AND (@customerAtWHDateFrom IS NULL OR (s.CustomerAtWarehouseDate BETWEEN @customerAtWHDateFrom AND @customerAtWHDateTo))
				  AND (@departDateFrom IS NULL OR (im.DepartDate BETWEEN @departDateFrom AND @departDateTo))
				  AND (@voyageNo IS NULL OR VoyageNo = @voyageNo)
          
			  AND c.OfficeId   @officeIdList
			  AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)          
			  AND c.ProductTeamId  @productTeamIdList
			  AND c.CustomerId  @customerIdList
			  AND (s.CountryOfOriginId  @countryOfOriginIdList)
			  AND (s.CustomerDestinationId  @customerDestinationIdList)
			  AND (s.ShipmentPortId  @shipmentPortIdList)
			  AND (s.ShipmentMethodId  @shipmentMethodIdList)
			  AND (c.PackingMethodId  @packingMethodIdList)

			  AND (@vendorId = -1 OR s.VendorId = @vendorId)
			  AND (s.TermOfPurchaseId @termOfPurchaseIdList)
			  AND (s.WithOPRFabric  @oprFabricTypeIdList)
			  AND (@isNextMfgorder = -1 OR c.IsNextMfgOrder = @isNextMfgorder)
			  AND (@isDualSourcingOrder = -1 OR c.IsDualSourcingOrder = @isDualSourcingOrder)
			  AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
			  AND (@isSampleOrder = -1 
          OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
          OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1)))
		  
			  AND (s.WorkflowStatusId @WorkflowStatusIdList)
			  AND (@PaymentTermId = -1 OR s.PaymentTermId=@PaymentTermId)
			  AND ((@LCNoFrom='' AND @LCNoTo='') OR i.LCNo between @LCNoFrom AND @LCNoTo)

        ) as x
        
          ]]>
        </commandText>
        <parameters>
          <param key="stockToWHDateFrom" name="@stockToWHDateFrom" type="DateTime" direction="Input" />
          <param key="stockToWHDateTo" name="@stockToWHDateTo" type="DateTime" direction="Input" />
          <param key="customerAtWHDateFrom" name="@customerAtWHDateFrom" type="DateTime" direction="Input" />
          <param key="customerAtWHDateTo" name="@customerAtWHDateTo" type="DateTime" direction="Input" />
          <param key="bookingDateFrom" name="@bookingDateFrom" type="DateTime" direction="Input" />
          <param key="bookingDateTo" name="@bookingDateTo" type="DateTime" direction="Input" />
          <param key="bookedAtWHDateFrom" name="@bookedAtWHDateFrom" type="DateTime" direction="Input" />
          <param key="bookedAtWHDateTo" name="@bookedAtWHDateTo" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="productTeamIdList" name="@productTeamIdList" type="ArrayInt" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="countryOfOriginIdList" name="@countryOfOriginIdList" type="ArrayInt" direction="Input" />
          <param key="customerDestinationIdList" name="@customerDestinationIdList" type="ArrayInt" direction="Input" />
          <param key="shipmentPortIdList" name="@shipmentPortIdList" type="ArrayInt" direction="Input" />
          <param key="shipmentMethodIdList" name="@shipmentMethodIdList" type="ArrayInt" direction="Input" />
          <param key="packingMethodIdList" name="@packingMethodIdList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="termOfPurchaseIdList" name="@termOfPurchaseIdList" type="ArrayInt" direction="Input" />
          <param key="oprFabricTypeIdList" name="@oprFabricTypeIdList" type="ArrayInt" direction="Input" />
          <param key="isNextMfgOrder" name="@isNextMfgOrder" type="int" direction="Input" />
          <param key="isDualSourcingOrder" name="@isDualSourcingOrder" type="int" direction="Input" />
          <param key="departDateFrom" name="@departDateFrom" type="dateTime" direction="Input" />
          <param key="departDateTo" name="@departDateTo" type="dateTime" direction="Input" />
          <param key="voyageNo" name="@voyageNo" type="varchar" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="PaymentTermId" name="@PaymentTermId" type="int" direction="Input"/>
          <param key="LCNoFrom" name="@LCNoFrom" type="varchar" direction="Input" />
          <param key="LCNoTo" name="@LCNoTo" type="varchar" direction="Input" />
          <param key="WorkflowStatusIdList" name="@WorkflowStatusIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="WeeklyShipmentReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="TradingAFReportApt">
    <selectCommand>
      <dataCommand name="GetTradingAFReport" type="Text">
        <commandText>
          Select o.OfficeCode, dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) As InvoiceId, CONVERT(VARCHAR(10), i.InvoiceDate, 103) As InvoiceDate, v.Name As SupplierName,
          CONVERT(VARCHAR(10), s.CustomerAtWarehouseDate, 103) As CustomerAtWarehouseDate, p.ItemNo, c.ContractNo, s.DeliveryNo, sm.ShipmentMethodDesc, s.TotalOrderQty, s.TotalShippedQty,
          ISNULL((s.TradingAFEstimationCost*g.exchangerate/h.exchangerate), 0) as TradingAFEstimationCost, ISNULL((s.TradingAFActualCost*g.exchangerate/h.exchangerate), 0) As TradingAFActualCost
          from Contract c, Shipment s, Invoice i, Product p, [NSLDB].[dbo].[Office] o, [nslindustry].[dbo].[vendor] v,
          ShipmentMethod sm, ExchangeRate g, ExchangeRate h
          where s.ContractId = c.ContractId and s.IsTradingAF = 1 and i.ShipmentId = s.ShipmentId and c.ProductId = p.ProductId and c.OfficeId = o.OfficeId and s.VendorId = v.VendorId
          and c.Status = 1 AND s.Status = 1
          and s.ShipmentMethodId = sm.ShipmentMethodId and g.exchangeratetypeid = 1 and g.currencyid = s.sellcurrencyid and isnull(i.invoicedate, s.customeratwarehousedate) between g.effectivedatefrom and g.effectivedateto AND g.Status = 1
          and h.exchangeratetypeid = 1 and h.currencyid = 3 and isnull(i.invoicedate, s.customeratwarehousedate) between h.effectivedatefrom and h.effectivedateto AND h.Status = 1
          and c.OfficeId @officeList and (@customerAtWearHouseFrom IS NULL OR (s.CustomerAtWarehouseDate BETWEEN @customerAtWearHouseFrom AND @customerAtWearHouseTo))
          and (@invoiceFrom IS NULL OR (i.InvoiceDate BETWEEN @invoiceFrom AND @invoiceTo)) and s.CountryOfOriginId @countryList
          and s.ShipmentPortId @portList and ((s.ShipmentMethodId @shipmentList ) OR (-1 @shipmentList))
          and (@supplierId = -1 or v.vendorId = @supplierId)
          ORDER BY i.InvoiceDate, o.OfficeCode, c.ContractNo, i.ShipmentId ASC
        </commandText>
        <parameters>
          <param key="customerAtWearHouseFrom" name="@customerAtWearHouseFrom" type="DateTime" direction="Input" />
          <param key="customerAtWearHouseTo" name="@customerAtWearHouseTo" type="DateTime" direction="Input" />
          <param key="invoiceFrom" name="@invoiceFrom" type="DateTime" direction="Input" />
          <param key="invoiceTo" name="@invoiceTo" type="DateTime" direction="Input" />
          <param key="officeList" name="@officeList" type="ArrayInt" direction="Input" />
          <param key="countryList" name="@countryList" type="ArrayInt" direction="Input" />
          <param key="portList" name="@portList" type="ArrayInt" direction="Input" />
          <param key="shipmentList" name="@shipmentList" type="ArrayInt" direction="Input" />
          <param key="supplierId" name="@supplierId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="TradingAFReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="OutstandingBookingReportApt">
    <selectCommand>
      <dataCommand name="GetOutstandingBookingReport" type="Text">
        <commandText>
          <![CDATA[
          SELECT
          Customer = (SELECT CustomerCode From Customer WHERE CustomerId = c.CustomerId),
          Season = (SELECT Code From NSLDB..Season WHERE SeasonId = c.SeasonId),
          ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
          Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = s.VendorId),
          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
          c.ContractNo, s.DeliveryNo, s.TotalPOQty,
          Unit = CONVERT(VARCHAR, c.PiecesPerPack) + ' / ' + (SELECT PackingUnitDesc From PackingUnit WHERE PackingUnitId = c.PackingUnitId ),
          POAmountUSD = ROUND( s.TotalSupplierGmtAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = s.BuyCurrencyId
          AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.SupplierAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo) OR EffectiveTypeId = 0)) /
          (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3
          AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.SupplierAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo ) OR EffectiveTypeId = 0)),2),
          s.CustomerAtWarehouseDate,
          CountryOfOrigin = (SELECT Name From CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId ),
          LoadingPort = (SELECT ShipmentPortDesc FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
          ShipmentMode = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId),
          PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = c.PackingMethodId)
          --d.DocNo, DocType = (SELECT DocTypeCode FROM DocumentType WHERE DocTypeId = d.DocTypeId)
          FROM Shipment AS s
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId AND BookingSONo IS NULL
          --LEFT JOIN Document AS d ON d.ShipmentId = s.ShipmentId
          WHERE
          s.WorkflowStatusId IN (6,7,8)
          -- AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
          AND (c.OfficeId @officeIdList)
          AND c.ProductTeamId @productTeamList
          AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
          AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
          AND (s.ShipmentMethodId @shipmentMethodList)
          AND (@packingMethodId = -1 OR c.PackingMethodId = @packingMethodId)
          AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
          AND (@CustomerAtWHDateFrom IS NULL OR (s.CustomerAtWarehouseDate BETWEEN @CustomerAtWHDateFrom AND @CustomerAtWHDateTo))
          AND (@vendorId = -1 OR s.VendorId = @vendorId)
          AND (c.CustomerId @customerIdList)
          AND ((@isSampleOrder = -1)
            OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
            OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1)))  
          ]]>
        </commandText>
        <parameters>
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="packingMethodId" name="@packingMethodId" type="int" direction="Input" />
          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="CustomerAtWHDateFrom" name="@CustomerAtWHDateFrom" type="DateTime" direction="Input" />
          <param key="CustomerAtWHDateTo" name="@CustomerAtWHDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OutstandingBookingReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="PartialShipmentReportApt">
    <selectCommand>
      <dataCommand name="GetPartialShipmentReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT
              Customer = (SELECT CustomerCode FROM Customer WHERE CustomerId = c.CustomerId ),
              ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
              Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
              Office = (SELECT OfficeCode FROM Office WHERE OfficeId = c.OfficeId),
              Supplier = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId),
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              c.ContractNo, s.DeliveryNo, s.CustomerAtWarehouseDate, s.TotalPOQty,
              Unit = CONVERT(VARCHAR, c.PiecesPerPack) + ' / ' + (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = c.PackingUnitId),
              CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),
              LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
              CustomerDestination = (SELECT DestinationDesc FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),
              SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
              AmountUSD = ROUND(TotalPOAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = s.SellCurrencyId
                         AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.CustomerAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo) OR EffectiveTypeId = 0)) /
                          (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3
                          AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.CustomerAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo ) OR EffectiveTypeId = 0)),2),
              --PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = c.PackingMethodId),
              --PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = (case when ((c.CustomerId in (1,2) and s.CustomerDestinationId<>1) or s.IsMockShopSample=1) then 2 else c.PackingMethodId end)),
			  PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod 
								WHERE PackingMethodId = (case when ((c.CustomerId = 1 and s.CustomerDestinationId <> 69) or (c.CustomerId = 2 and s.CustomerDestinationId <> 1) or s.IsMockShopSample=1) then 2 else c.PackingMethodId end)
							  ),
              ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId),
              s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent, s.NSLSZAirFreightPaymentPercent,
              s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark,
              QuotaCategory = (SELECT QuotaCategoryGroupOPSKey FROM QuotaCategoryGroup WHERE QuotaCategoryGroupId = s.QuotaCategoryGroupId),
              c.IsNextMfgOrder,
              OPRType = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = WithOPRFabric),
              InBoundDeliveryNo = case when c.CustomerId=13 then c.BookingRefNo else null end,  -- For EZIBUY only
              c.PhaseId, s.SupplierAtWarehouseDate, i.BookingAtWarehouseDate,
              PaymentTerm = isnull((select PaymentTermDesc from PaymentTerm with (nolock) where PaymentTermId=s.PaymentTermId),''),
              LCNo = isnull(i.LCNo,''),
			  IsTradingAF = ISNULL(s.IsTradingAF,0), NSLtoSupplierInvoiceAmount = s.TotalPOSupplierGmtAmtAfterDiscount
          FROM Shipment AS s
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
          INNER JOIN CustomerDestination AS cd ON cd.CustomerDestinationId=s.CustomerDestinationId
          WHERE
              s.WorkflowStatusId IN (2,4,6,7)
              AND s.ShipmentMethodId @shipmentMethodList
              AND c.CustomerId @customerIdList
              AND (@atWHDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @atWHDateFrom AND @atWHDateTo)
              AND (@bookInWHDateFrom IS NULL OR i.BookingAtWarehouseDate BETWEEN @bookInWHDateFrom AND @bookInWHDateTo)
              AND c.OfficeId @officeIdList
              AND c.ProductTeamId @productTeamList
              AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
              AND (@vendorId = -1 OR s.VendorId = @vendorId)
              AND (@isNSLSZOrder = -1 OR c.IsNextMfgOrder = @isNSLSZOrder)
              AND (@isDualSourcingOrder = -1 OR c.IsDualSourcingOrder =@isDualSourcingOrder)
              AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
              --AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
              AND (s.CountryOfOriginId @countryOfOriginIdList)
              AND (@seasonId = -1 OR c.SeasonId = @seasonId)
              --AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
              --AND (@customerDestinationId = -1 OR s.CustomerDestinationId = @customerDestinationId)
              AND (s.ShipmentPortId @shipmentPortIdList)
              AND (s.CustomerDestinationId @customerDestinationIdList)
              AND (@oprFabricType = -1 OR (@oprFabricType = -2 AND s.WithOPRFabric <> 0) OR  s.WithOPRFabric = @oprFabricType)
              AND (@packingMethodId = -1 OR c.PackingMethodId = @packingMethodId)
              -- Packing Method of UT,DF or MockShopSample order is default as 2 (Flat Pack)
              -- AND (@packingMethodId = -1 OR ((case when ((c.CustomerId in (1,2) and s.CustomerDestinationId<>1) or s.IsMockShopSample=1) then 2 else c.PackingMethodId end)= @packingMethodId))
			  
              AND (@paymentTermId = -1 OR (s.PaymentTermId = @paymentTermId))
              AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
              AND (@isSampleOrder = -1 
                OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
                OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
                )
              AND (@isDFOrder = -1 OR @isDFOrder=(case when c.CustomerId in (1,2) and s.CustomerDestinationId in (2,3,6,7,32) then 1 else 0 end))
              --AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
              AND (@isUTOrder = -1 OR (@isUTOrder = 0 AND s.TermOfPurchaseId <> 5) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
            ]]>
        </commandText>
        <parameters>
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="AtWHDateFrom" name="@atWHDateFrom" type="DateTime" direction="Input" />
          <param key="AtWHDateTo" name="@atWHDateTo" type="DateTime" direction="Input" />
          <param key="BookInWHDateFrom" name="@bookInWHDateFrom" type="DateTime" direction="Input" />
          <param key="BookInWHDateTo" name="@bookInWHDateTo" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="isNSLSZOrder" name="@isNSLSZOrder" type="int" direction="Input" />
          <param key="isDualSourcingOrder" name="@isDualSourcingOrder" type="int" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="countryOfOriginIdList" name="@countryOfOriginIdList" type="Arrayint" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="shipmentPortIdList" name="@shipmentPortIdList" type="Arrayint" direction="Input" />
          <param key="customerDestinationIdList" name="@customerDestinationIdList" type="Arrayint" direction="Input" />
          <param key="oprFabricType" name="@oprFabricType" type="int" direction="Input" />
          <param key="packingMethodId" name="@packingMethodId" type="int" direction="Input" />
          <param key="paymentTermId" name="@paymentTermId" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="isDFOrder" name="@isDFOrder" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="PartialShipmentReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UTForecastApt">
    <selectCommand>
      <dataCommand name="GetUTForecastReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT
              Customer = (SELECT CustomerCode FROM Customer WHERE CustomerId = c.CustomerId ),
              ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
              Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
			        c.PhaseId,
              Office = (SELECT OfficeCode FROM Office WHERE OfficeId = c.OfficeId),
              Supplier = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId),
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              c.ContractNo, s.DeliveryNo, s.CustomerAtWarehouseDate, s.TotalPOQty,
              Unit = CONVERT(VARCHAR, c.PiecesPerPack) + ' / ' + (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = c.PackingUnitId),
              CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),
              LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
              CustomerDestination = (SELECT DestinationDesc FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),
              SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
			        i.SupplierInvoiceNo,
              PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = (case when ((c.CustomerId in (1,2) and s.CustomerDestinationId<>1) or s.IsMockShopSample=1) then 2 else c.PackingMethodId end)) 
          FROM Shipment AS s
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
          INNER JOIN CustomerDestination AS cd ON cd.CustomerDestinationId=s.CustomerDestinationId
          WHERE
              s.WorkflowStatusId IN (2,4,6,7,8)
              AND s.TermOfPurchaseId = 5
              AND (s.CustomerAtWarehouseDate BETWEEN @atWHDateFrom AND @atWHDateTo)
              --AND c.OfficeId in (1,2)
            ]]>
        </commandText>
        <parameters>
          <param key="AtWHDateFrom" name="@atWHDateFrom" type="DateTime" direction="Input" />
          <param key="AtWHDateTo" name="@atWHDateTo" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UTForcast" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="EziBuyPartialShipmentReportApt">
    <selectCommand>
      <dataCommand name="GetEziBuyPartialShipmentReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT
          Customer = (SELECT CustomerCode FROM Customer WHERE CustomerId = c.CustomerId ),
          ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
          Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
          Office = (SELECT OfficeCode FROM Office WHERE OfficeId = c.OfficeId),
          Supplier = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId),
          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
          c.ContractNo, s.DeliveryNo, s.CustomerAtWarehouseDate, s.TotalPOQty,
          Unit = CONVERT(VARCHAR, c.PiecesPerPack) + ' / ' + (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = c.PackingUnitId),
          CO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),
          LoadingPort = (SELECT OfficialCode FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
          CustomerDestination = (SELECT DestinationDesc FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),
          SellCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
          AmountUSD = ROUND(TotalPOAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = s.SellCurrencyId
                  AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.CustomerAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo) OR EffectiveTypeId = 0)) /
                  (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 3
                  AND ExchangeRateTypeId = 1 AND ((EffectiveTypeId = 1 AND s.CustomerAtWarehouseDate BETWEEN EffectiveDateFrom AND EffectiveDateTo ) OR EffectiveTypeId = 0)),2),
          PackingMethod = (SELECT PackingMethodDesc FROM PackingMethod WHERE PackingMethodId = c.PackingMethodId),
          ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId = s.ShipmentMethodId),
          s.NUKAirFreightPaymentPercent, s.NSLAirFreightPaymentPercent, s.FTYAirFreightPaymentPercent, s.NSLSZAirFreightPaymentPercent,
          s.OtherAirFreightPaymentPercent, s.OtherAirFreightPaymentRemark,
          c.PhaseId, s.SupplierAtWarehouseDate, 
          InBoundDeliveryNo = case when c.CustomerId=13 then c.BookingRefNo else null end,  -- For EZIBUY only
          i.BookingAtWarehouseDate, x.ExWorks AS OriginForwarderDate
          FROM Shipment AS s
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
          LEFT JOIN NSLDB02.NSS.dbo.EzibuyUploadOrder_All x ON c.ContractNo = x.PurchaseOrder AND c.BookingRefNo = x.InboundDeliveryNumber AND x.Status = 1
          WHERE
          s.WorkflowStatusId IN (2,4,6,7)
          AND s.ShipmentMethodId @shipmentMethodList
          AND c.CustomerId = 13
          AND (@atWHDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @atWHDateFrom AND @atWHDateTo)
          AND (@bookInWHDateFrom IS NULL OR i.BookingAtWarehouseDate BETWEEN @bookInWHDateFrom AND @bookInWHDateTo)
          AND c.OfficeId @officeIdList
          AND c.ProductTeamId @productTeamList
          AND (@vendorId = -1 OR s.VendorId = @vendorId)
          AND (@isNSLSZOrder = -1 OR c.IsNextMfgOrder = @isNSLSZOrder)
          AND (@isDualSourcingOrder = -1 OR c.IsDualSourcingOrder =@isDualSourcingOrder)
          AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
          AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
          AND (@seasonId = -1 OR c.SeasonId = @seasonId)
          AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
          AND (@customerDestinationId = -1 OR s.CustomerDestinationId = @customerDestinationId)
          AND (@phaseId = -1 OR c.PhaseId = @phaseId)
          AND (@packingMethodId = -1 OR c.PackingMethodId = @packingMethodId)
          AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
          AND ((@isSampleOrder = -1)
            OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
            OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
          )
            ]]>
        </commandText>
        <parameters>
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="AtWHDateFrom" name="@atWHDateFrom" type="DateTime" direction="Input" />
          <param key="AtWHDateTo" name="@atWHDateTo" type="DateTime" direction="Input" />
          <param key="BookInWHDateFrom" name="@bookInWHDateFrom" type="DateTime" direction="Input" />
          <param key="BookInWHDateTo" name="@bookInWHDateTo" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="isNSLSZOrder" name="@isNSLSZOrder" type="int" direction="Input" />
          <param key="isDualSourcingOrder" name="@isDualSourcingOrder" type="int" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="customerDestinationId" name="@customerDestinationId" type="int" direction="Input" />
          <param key="phaseId" name="@phaseId" type="int" direction="Input" />
          <param key="packingMethodId" name="@packingMethodId" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="PartialShipmentReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="OutstandingPaymentReportApt">
    <selectCommand>
      <dataCommand name="GetOustandingPaymentReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT 
              i.ShippingDocReceiptDate, IsUploadDMS = case when  i.IsUploadDMSDocument=1 then 'YES' else 'NO' end,
              UserName = (SELECT DisplayName FROM NSLDB..UserInfo WHERE UserId = i.InvoiceUploadUserId),
              PaymentTerm = (SELECT PaymentTermDesc FROM PaymentTerm WHERE PaymentTermId = s.PaymentTermId),
              Customer = (SELECT CustomerCode FROM Customer WHERE CustomerId = c.CustomerId),
              ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
              c.ContractNo, s.DeliveryNo, 
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              s.TotalShippedQty, s.TotalShippedAmt,
              Currency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.BuyCurrencyId),
              InvoiceNo =  dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
              i.InvoiceDate, i.SupplierInvoiceNo, i.AccountDocReceiptDate,
              Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = s.VendorId),NSLtoSupplierInvoiceAmount = s.TotalShippedSupplierGmtAmtAfterDiscount
          FROM Shipment AS s
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          WHERE 
              1 = 1
              --s.WorkflowStatusId = 8 
              AND (i.ShippingDocReceiptDate IS NULL OR i.AccountDocReceiptDate IS NULL)
              --AND (i.ShippingDocReceiptDate IS NOT NULL OR i.AccountDocReceiptDate IS NOT NULL) -- for winky
              --AND i.IsUploadDMSDocument = 0 -- for winky
              AND (@shipReceiptDateFrom IS NULL OR i.ShippingDocReceiptDate BETWEEN @shipReceiptDateFrom AND @shipReceiptDateTo)
              AND (@STWDateFrom IS NULL OR 
                (i.ActualAtWarehouseDate IS NULL AND i.ILSActualAtWarehouseDate  BETWEEN @STWDateFrom AND @STWDateTo) 
                OR i.ActualAtWarehouseDate BETWEEN @STWDateFrom AND @STWDateTo)
             AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFrom AND @invoiceDateTo)
             AND (@vendorId = -1 OR s.VendorId = @vendorId)
             -- AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
             AND (c.OfficeId @officeIdList)
             AND c.ProductTeamId @productTeamList
             AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
             AND (@paymentTermId = -1 OR s.PaymentTermId = @paymentTermId)
             AND (i.InvoiceUploadUserId @userIdList)
             AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample=1 then 1 else 0 end) = @isSampleOrder))
             --AND (@isUTOrder = -1 OR (@isUTOrder = 1 AND s.CustomerDestinationId IN (4,5, 28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5, 28)))
             AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
             --AND ((s.CustomerDestinationId IN (4,5, 28) and s.WorkflowStatusId NOT IN (3,5,9)) OR (s.CustomerDestinationId NOT IN (4,5, 28) and s.WorkflowStatusId =8)) 
             AND (@isUploadDMS = -1 OR i.IsUploadDMSDocument = @isUploadDMS)
           ORDER BY i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear
            ]]>
        </commandText>
        <parameters>
          <param key="shipReceiptDateFrom" name="@shipReceiptDateFrom" type="DateTime" direction="Input" />
          <param key="shipReceiptDateTo" name="@shipReceiptDateTo" type="DateTime" direction="Input" />
          <param key="STWDateFrom" name="@STWDateFrom" type="DateTime" direction="Input" />
          <param key="STWDateTo" name="@STWDateTo" type="DateTime" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />

          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="paymentTermId" name="@paymentTermId" type="int" direction="Input" />
          <param key="userIdList" name="@userIdList" type="ArrayInt" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input"/>
          <param key="isUploadDMS" name="@isUploadDMS" type="int" direction="Input"/>
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OutstandingPaymentReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLSZOrderReportApt">
    <selectCommand>
      <dataCommand name="GetNSLSZOrderReport" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT 
              Office = (SELECT OfficeCode From Office WHERE OfficeId = c.OfficeId ),
              ContractNo = c.ContractNo + '-' + CONVERT(VARCHAR, s.DeliveryNo),
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
              InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
              i.InvoiceDate, i.SupplierInvoiceNo, 
              TermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId =  s.TermOfPurchaseId),
              LoadingPort = (SELECT ShipmentPortDesc FROM ShipmentPort WHERE ShipmentPortId = s.ShipmentPortId),
              Destination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = s.CustomerDestinationId),
              Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = s.VendorId),
              Currency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
              s.TotalShippedQty, s.TotalShippedAmt, s.TotalShippedNetFOBAmt, 
	            InputVATCalculatedAmt = 
		            CASE WHEN i.InputVATCurrencyId = 4 THEN i.InputVATCalculatedAmt 
		            ELSE 
			            ROUND(i.InputVATCalculatedAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.InputVATCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0))  / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	            ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  ,
                        InputVATActualAmt =
		            CASE WHEN i.InputVATCurrencyId = 4 THEN i.InputVATActualAmt 
		            ELSE 
			            ROUND(i.InputVATActualAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.InputVATCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0))  / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	             ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  , 
	            OutputVATCalculatedAmt =
		            CASE WHEN i.OutputVATCurrencyId = 4 THEN i.OutputVATCalculatedAmt 
		            ELSE 
			            ROUND(i.OutputVATCalculatedAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.OutputVATCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0))  / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	             ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  , 
	            OutputVATActualAmt =
		            CASE WHEN i.OutputVATCurrencyId = 4 THEN i.OutputVATActualAmt 
		            ELSE 
			            ROUND(i.OutputVATActualAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.OutputVATCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)) / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	             ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  ,
	            ImportDutyCalculatedAmt = 
		            CASE WHEN i.ImportDutyCurrencyId = 4 THEN i.ImportDutyCalculatedAmt 
		            ELSE 
			            ROUND(i.ImportDutyCalculatedAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.ImportDutyCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0))  / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	             ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  , 
	            ImportDutyActualAmt =
		            CASE WHEN i.ImportDutyCurrencyId = 4 THEN i.ImportDutyActualAmt 
		            ELSE 
			            ROUND(i.ImportDutyActualAmt * (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = i.ImportDutyCurrencyId AND
			            ExchangeRateTypeId = 1 AND ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0))  / 
			            (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId = 4 AND ExchangeRateTypeId = 1 AND
	             	             ((i.InvoiceDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND EffectiveTypeId = 1) OR EffectiveTypeId = 0)),2)
		            END  
          FROM Shipment AS s
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          WHERE 

             (@customerAtWHDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @customerAtWHDateFrom AND @customerAtWHDateTo)
            AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFrom AND @invoiceDateTo)
            AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
            AND (@invoicePrefix IS NULL OR ((i.InvoicePrefix =@InvoicePrefix)
                AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
                AND i.InvoiceYear = @InvoiceYear))
            AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
            AND c.ProductTeamId @productTeamList
            AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
            AND (@customerDestinationId = -1 OR s.CustomerDestinationId = @customerDestinationId)
            AND (@packingMethodId = -1 OR c.PackingMethodId = @packingMethodId)
            AND s.ShipmentMethodId @shipmentMethodList
            AND c.CustomerId @customerIdList
            AND s.WorkflowStatusId @shipmentStatusList
            AND ((@isSZUTOrder = -1 AND (c.IsNextMfgOrder = 1 OR s.CustomerDestinationId IN (4,5,28)))
              OR (@isSZUTOrder = 1  AND c.IsNextMfgOrder = 1)
              OR (@isSZUTOrder = 2  AND s.CustomerDestinationId IN (4,5,28)))
            AND (@isDualSourcing = -1 OR c.IsDualSourcingOrder = @isDualSourcing)
            AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
            AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
	        ORDER BY InvoiceNo
            ]]>
        </commandText>
        <parameters>
          <param key="customerAtWHDateFrom" name="@customerAtWHDateFrom" type="DateTime" direction="Input" />
          <param key="customerAtWHDateTo" name="@customerAtWHDateTo" type="DateTime" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="invoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="invoiceSeqFrom" name="@invoiceSeqFrom" type="int" direction="Input" />
          <param key="invoiceSeqTo" name="@invoiceSeqTo" type="int" direction="Input" />
          <param key="invoiceYear" name="@invoiceYear" type="int" direction="Input" />

          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />

          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="customerDestinationId" name="@customerDestinationId" type="int" direction="Input" />
          <param key="packingMethodId" name="@packingMethodId" type="int" direction="Input" />
          <param key="shipmentMethodList" name="@shipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />

          <param key="shipmentStatusList" name="@shipmentStatusList" type="ArrayInt" direction="Input" />
          <param key="isSZUTOrder" name="@isSZUTOrder" type="int" direction="Input" />
          <param key="isDualSourcing" name="@isDualSourcing" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLSZOrderReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="STWDateDiscrepancyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSTWDateDiscrepancyByCriteria" type="Text">
        <commandText>
          <![CDATA[ 
          SELECT 
              InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
              i.SequenceNo,
              i.InvoiceDate, 
              i.IlsActualAtWarehouseDate, i.ActualAtWarehouseDate,
              c.ContractNo, s.DeliveryNo,
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),  c.ContractNo, s.DeliveryNo, 
              s.TotalShippedQty,
              s.TotalShippedAmt, 
              CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
		          InvoiceExchangeRate = i.InvoiceSellExchangeRate,
		          BaseExchangeRate = (SELECT TOP 1 ExchangeRate FROM ExchangeRate 
					                          WHERE Status=1 and CurrencyId=@BaseCurrencyId and ExchangeRateTypeId=1 
                                          and (i.invoicedate between EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0) 
					                          ORDER BY EffectiveTypeId DESC, EffectiveDateFrom DESC),
              Vendor = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId = s.VendorId), 
              TradingAgency = (SELECT ShortName FROM TradingAgency WHERE TradingAgencyId = c.TradingAgencyId), s.TotalShippedQty, 
              Customer = (select CustomerCode from Customer where CustomerId=c.CustomerId),
              ProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId ), 
              ShipmentPort = (SELECT ShipmentPortDesc FROM ShipmentPort WHERE ShipmentPortId=s.ShipmentPortId),
              ShipmentMethod = (SELECT ShipmentMethodDesc FROM ShipmentMethod WHERE ShipmentMethodId=s.ShipmentMethodId),
              CountryOfOrigin = (SELECT Name FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId)
          FROM invoice AS i
              INNER JOIN shipment AS s ON i.ShipmentId = s.ShipmentId
              INNER JOIN Contract AS c ON s.ContractId = c.ContractId                                                            
          WHERE
               s.Status = 1
               AND NOT ((i.IlsActualAtWarehouseDate is null and i.ActualAtWarehouseDate is null) or i.IlsActualAtWarehouseDate=i.ActualAtWarehouseDate)
               AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
               AND (@ilsStwDateFrom IS NULL OR i.IlsActualAtWarehouseDate BETWEEN @ilsStwDateFrom AND @ilsStwDateTo)
               AND (@actualStwDateFrom IS NULL OR i.ActualAtWarehouseDate BETWEEN @actualStwDateFrom AND @actualStwDateTo)
               AND c.OfficeId @officeIdList
               AND c.ProductTeamId @productTeamList
               AND (@budgetYear = -1 OR EXISTS(SELECT * FROM CutOffSales WHERE ShipmentId = s.ShipmentId AND IsAccrual = 0
 		                    AND FiscalYear = @budgetYear AND Period BETWEEN @periodFrom AND @periodTo))
               AND (c.CustomerId @customerIdList)
               AND (c.TradingAgencyId @tradingAgencyList)
               AND (@countryOfOriginId = -1 or s.CountryOfOriginId=@countryOfOriginId)
               AND (@ShipmentPortId = -1 or s.ShipmentPortId=@ShipmentPortId)
          ]]>
        </commandText>
        <parameters>
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="ilsStwDateFrom" name="@ilsStwDateFrom" type="DateTime" direction="Input" />
          <param key="ilsStwDateTo" name="@ilsStwDateTo" type="DateTime" direction="Input" />
          <param key="actualStwDateFrom" name="@actualStwDateFrom" type="DateTime" direction="Input" />
          <param key="actualStwDateTo" name="@actualStwDateTo" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="STWDateDiscrepancy" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ContainerManifestApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetContainerManifest" type="Text">
        <commandText>
          <![CDATA[ 

            SELECT DISTINCT 	
	              im.VesselName,
	              im.VoyageNo,
	              im.DepartDate,
	              im.DepartPort,
                DepartPortDesc = ISNULL((SELECT TOP 1 ShipmentPortDesc FROM ShipmentPort WITH (NOLOCK) WHERE OfficialCode=im.DepartPort ORDER BY Status DESC), ''),
	              im.ContainerNo, 
	              im.PartnerContainerNo,
	              VendorName = ISNULL((select name from nslindustry..vendor as v WITH (NOLOCK) where vendorId = s.VendorId), ''),
	              ContractNo = ISNULL(ior.ContractNo, ''),
	              DeliveryNo = ISNULL(ior.DeliveryNo, ''),
	              ItemNo = ISNULL((select ItemNo from Product WITH (NOLOCK) where ProductId=c.ProductId), ''),
	              TotalShippedQty = ISNULL(s.TotalShippedQty, 0),
	              InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.INvoiceYear),
	              UserName = ISNULL((select DisplayName from nsldb..userinfo WITH (NOLOCK) where userid=i.InvoiceUploadUserId), ''),
                LCNo = ISNULL(i.LCNo, ''),
                DestinationCode = ISNULL(cd.DestinationCode,'')
            FROM ILSManifest im WITH (NOLOCK)	
	              INNER JOIN ILSManifestDetail imd WITH (NOLOCK) ON imd.ContainerNo = im.ContainerNo AND imd.IsCancelled = 0
	              INNER JOIN ILSOrderRef ior WITH (NOLOCK) ON imd.OrderRefId = ior.OrderRefId
	              LEFT  JOIN Shipment as s WITH (NOLOCK) ON s.ShipmentId = ior.ShipmentId AND s.Status=1
	              LEFT JOIN Contract as c WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.Status = 1
	              LEFT JOIN Invoice as i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
                LEFT JOIN CustomerDestination as cd WITH (NOLOCK) ON s.CustomerDestinationId = cd.CustomerDestinationId
            WHERE 	
	              LegId = 1
	              AND (@voyageNo = '' OR im.VoyageNo = @voyageNo)
                AND (@departDate IS NULL OR im.DepartDate = @departDate)
                AND (@departPort = '' OR im.DepartPort = @departPort)
                AND (@vesselName = '' OR im.VesselName LIKE @vesselName)
                AND (@contractNo = '' OR ior.ContractNo = @contractNo)
            ORDER By 
                VesselName, VoyageNo, DepartDate, DepartPort, im.ContainerNo, VendorName, ContractNo, DeliveryNo 	
          ]]>
        </commandText>
        <parameters>
          <param key="voyageNo" name="@voyageNo" type="Varchar" direction="Input" />
          <param key="departDate" name="@departDate" type="DateTime" direction="Input" />
          <param key="departPort" name="@departPort" type="Varchar" direction="Input" />
          <param key="vesselName" name="@vesselName" type="Varchar" direction="Input" />
          <param key="contractNo" name="@contractNo" type="Varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ContainerManifestReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentToDMSApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentToDMSList" type="Text">
        <commandText>
          SELECT TOP 500
          a.ShipmentId, b.VendorId, c.ContractNo, b.DeliveryNo, d.Name AS VendorName, e.ItemNo, f.CustomerCode, b.TotalShippedQty, b.BuyCurrencyId AS CurrencyId, b.QACommissionPercent, b.VendorPaymentDiscountPercent,
          b.TotalShippedSupplierGmtAmtAfterDiscount, a.SupplierInvoiceNo, dbo.fn_formatInvoiceNo(a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear) AS InvoiceNo, a.InvoiceDate, b.SplitCount,
          a.ShippingDocCheckedBy, a.ShippingDocCheckedOn, a.ShippingDocReceiptDate, a.IsUploadDMSDocument, b.LabTestIncome
          FROM Invoice a INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId and b.WorkflowStatusId = 8 and a.Status = b.Status
          AND (@DocReceiptDateFrom IS NULL OR a.ShippingDocReceiptDate BETWEEN @DocReceiptDateFrom AND @DocReceiptDateTo)
          AND (@VendorId = -1 OR b.VendorId = @VendorId)
          AND (@PaymentTermId = -1 OR b.PaymentTermId = @PaymentTermId)
          AND ((@CheckStatus = 1 AND a.ShippingDocCheckedBy IS NOT NULL) OR (@CheckStatus = 0 AND a.ShippingDocCheckedBy IS NULL))
          INNER JOIN Contract c on b.ContractId = c.ContractId and c.Status = 1 AND (@ContractNo = '' OR c.ContractNo = @ContractNo)
          AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
          INNER JOIN NSLIndustry..Vendor d ON b.VendorId = d.VendorId
          INNER JOIN Product e ON c.ProductId = e.ProductId AND (@ItemNo = '' OR e.ItemNo = @ItemNo)
          INNER JOIN Customer f ON c.CustomerId = f.CustomerId

        </commandText>
        <parameters>
          <param key="DocReceiptDateFrom" name="@DocReceiptDateFrom" type="DateTime" direction="Input" />
          <param key="DocReceiptDateTo" name="@DocReceiptDateTo" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="PaymentTermId" name="@PaymentTermId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="CheckStatus" name="@CheckStatus" type="int" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentToDMS" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSSDiscrepancyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetNSSDiscrepancy" type="Text">
        <commandText>
          EXEC sp_Discrepancy_ISAM_NSS @StartDate
        </commandText>
        <parameters>
          <param key="StartDate" name="@StartDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
  </dataSetAdapter>

  <dataSetAdapter name="OutstandingGBTestReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingGBTestReport" type="Text">
        <commandText>
          SELECT	DISTINCT
          o.OfficeCode ,
          [SeasonCode] = (SELECT Code FROM NSLDB.dbo.Season WITH (NOLOCK) WHERE SeasonId = a.SeasonId),
          p.ItemNo,
          v.Name AS [VendorName],
          a.ContractNo ,
          b.DeliveryNo ,
          (CASE WHEN b.IsChinaGBTestRequired = 1 THEN 'Y' ELSE 'N' END) AS [ChinaGBTestRequired],
          (CASE WHEN b.IsChinaGBTestRequired = 1 THEN
          ISNULL((SELECT TOP 1  CASE WHEN CONVERT(int, tr.TestResult) = 1 THEN 'PASS'
          WHEN  CONVERT(int, tr.TestResult) = 0 THEN 'FAIL - Hold Payment'
          WHEN CONVERT(int, tr.TestResult) = 2 THEN 'FAIL - Release Payment'
          ELSE 'No result ' END
          FROM NSLDB02.NSS.dbo.ChinaGBTestResult tr
          WHERE Status = 1
          AND tr.ProductId = a.ProductId
          AND (tr.VendorId = b.VendorId OR tr.VendorId = -1)
          ORDER BY CASE WHEN CONVERT(int, tr.TestResult) = 1 THEN 1 ELSE 0 END DESC, ISNULL(tr.ModifiedOn, tr.CreatedOn) DESC), 'No result')
          ELSE 'N/A' END ) AS [ChinaGBTestResult],
          (CASE WHEN b.WorkflowStatusId = 8 THEN dbo.fn_formatInvoiceNo( c.InvoicePrefix, c.InvoiceSeq, c.InvoiceYear) ELSE '' END ) AS [InvoiceNo],
          (CASE WHEN b.WorkflowStatusId = 8 THEN c.InvoiceDate ELSE NULL END ) AS [InvoiceDate],
          b.CustomerAtWarehouseDate,
          TotalShippedQty,
          CurrencyCode = (SELECT CurrencyCode FROM Currency WITH (NOLOCK) WHERE CurrencyId = b.BuyCurrencyId),
          (CASE WHEN c.APDate IS NULL THEN NULL ELSE c.APDate END) AS [SettleToSupplierDate],
          TotalOrderAmt ,
          TotalShippedAmt ,
          TotalSupplierGmtAmtAfterDiscount ,
          TotalShippedSupplierGmtAmtAfterDiscount ,
          APAmt ,
          sm.ShipmentMethodDesc,
          b.PaymentTermId
          FROM	Contract AS a WITH (NOLOCK)
          INNER JOIN Shipment AS b WITH (NOLOCK) ON a.ContractId = b.ContractId
          INNER JOIN Invoice AS c WITH (NOLOCK) ON b.ShipmentId = c.ShipmentId
          AND a.status = 1 AND b.status = 1 AND c.status = 1
          AND ISNULL( c.InvoiceDate, b.CustomerAtWarehouseDate) >= '2014-08-01'
          AND b.IsChinaGBTestRequired = 1
          INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = a.OfficeId
          AND o.OfficeId @OfficeIdList
          AND b.WorkflowStatusId = 8
          INNER JOIN NSLIndustry.dbo.Vendor AS v ON v.VendorId = b.VendorId
          INNER JOIN Product AS p WITH (NOLOCK) ON p.ProductId = a.ProductId
          INNER JOIN ShipmentMethod AS sm WITH (NOLOCK) ON sm.ShipmentMethodId = b.ShipmentMethodId
          LEFT JOIN NSLDB02.NSS.dbo.ChinaGBTestResult AS ct ON ct.ProductId = a.ProductId AND (ct.VendorId = b.VendorId)
          WHERE	ISNULL((SELECT TOP 1  CONVERT(int, TestResult) AS TestResult -- AS Priority
          FROM NSLDB02.NSS.dbo.ChinaGBTestResult tr
          WHERE Status = 1
          AND tr.ProductId = a.ProductId
          AND (tr.VendorId = b.VendorId OR tr.VendorId = -1)
          ORDER BY CASE WHEN CONVERT(int, tr.TestResult) = 1 THEN 1 ELSE 0 END DESC, ISNULL(tr.ModifiedOn, tr.CreatedOn) DESC), 0) NOT IN ( 1 , 2 )
          AND p.ItemNo NOT IN ( '685093' , '945413' )
          AND (@InvoiceDateFrom IS NULL OR c.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
          AND (@CustAWHDateFrom IS NULL OR b.CustomerAtWarehouseDate BETWEEN @CustAWHDateFrom AND @CustAWHDateTo)
          AND (@VendorId = -1 OR b.VendorId = @VendorId)
          AND (sm.ShipmentMethodId @ShipmentMethodIdList)
          AND (b.PaymentTermId @PaymentTermIdList)
          AND (@PaymentStatus = -1 OR @PaymentStatus = (CASE WHEN c.APDate IS NOT NULL THEN 1 ELSE 0 END))
          ORDER BY o.OfficeCode, 10
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="CustAWHDateFrom" name="@CustAWHDateFrom" type="DateTime" direction="Input" />
          <param key="CustAWHDateTo" name="@CustAWHDateTo" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="ShipmentMethodIdList" name="@ShipmentMethodIdList" type="ArrayInt" direction="Input" />
          <param key="PaymentTermIdList" name="@PaymentTermIdList" type="ArrayInt" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OutstandingGBTestReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UTDiscrepancyApt">
    <selectCommand>
      <dataCommand name="GetUTDiscrepancyReport" type="Text">
        <commandText>
          select  distinct o.OfficeCode As Office,y.name As Vendor,x.itemno As Item, z.contractno As ContractNo, a.deliveryno As DeliveryNo, a.customeratwarehousedate As CustomerDeliveryDate,
          InvoiceNo = dbo.fn_formatInvoiceNo(e.InvoicePrefix, e.InvoiceSeq, e.INvoiceYear), e.InvoiceDate, w.sizeoptionno As SizeOptionNo, b.sellingprice As UTSellingPrice, d.sellingprice As UKSellingPrice,
          b.SupplierGmtPrice As UTSupplierPrice,d.SupplierGmtPrice As UKSupplierPrice
          from shipment a inner join shipmentdetail b on a.shipmentid = b.shipmentid and a.status = 1 and b.status = 1 and a.customeratwarehousedate >= '2017-01-01' and a.termofpurchaseid = 5 and a.workflowstatusid not in (1,3,5,9,8)
          inner join invoice e on e.shipmentid = a.shipmentid
          inner join sizeoption w on w.sizeoptionid = b.sizeoptionid
          inner join nslindustry..vendor y on y.vendorid = a.vendorid
          inner join contract z on a.contractid = z.contractid
          inner join product x on x.productid = z.productid
          inner join shipment c on c.contractid = a.contractid and c.workflowstatusid not in (1,3,5,9,8) and c.termofpurchaseid != 5
          inner join shipmentdetail d on c.shipmentid = d.shipmentid and d.status = 1 and d.sizeoptionid = b.sizeoptionid
          inner join office o on z.OfficeId = o.OfficeId
          where  z.OfficeId @officeList and (@customerAtWearHouseFrom IS NULL OR (a.CustomerAtWarehouseDate BETWEEN @customerAtWearHouseFrom AND @customerAtWearHouseTo))
          and (@invoiceFrom IS NULL OR (e.InvoiceDate BETWEEN @invoiceFrom AND @invoiceTo))
          and (@supplierId = -1 OR y.vendorId = @supplierId)
          order by 1,2,3,4,5,6
        </commandText>
        <parameters>
          <param key="customerAtWearHouseFrom" name="@customerAtWearHouseFrom" type="DateTime" direction="Input" />
          <param key="customerAtWearHouseTo" name="@customerAtWearHouseTo" type="DateTime" direction="Input" />
          <param key="invoiceFrom" name="@invoiceFrom" type="DateTime" direction="Input" />
          <param key="invoiceTo" name="@invoiceTo" type="DateTime" direction="Input" />
          <param key="officeList" name="@officeList" type="ArrayInt" direction="Input" />
          <param key="supplierId" name="@supplierId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UTDiscrepancy" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentAttributeApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentAttributeByKey" type="Text">
        <commandText>
          SELECT * FROM ShipmentAttribute WHERE ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentAttribute" />
    </tableMappings>
  </dataSetAdapter>
  
</dataOperations>
