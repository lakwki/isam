<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">

  <dataSetAdapter name="SizeOptionApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSizeOptionByKey" type="Text">
        <commandText>
          SELECT * FROM SizeOption
          WHERE SizeOptionId = @SizeOptionId
        </commandText>
        <parameters>
          <param key="SizeOptionId" name="@SizeOptionId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedSizeOption" type="Text">
        <commandText>
          SELECT TOP 1 e.* FROM Product a INNER JOIN Contract b ON a.ItemNo = @ItemNo AND a.ProductId = b.ProductId AND a.Status = 1 AND b.Status = 1
          AND b.CustomerId @CustomerIdList
          INNER JOIN Shipment c ON b.ContractId = c.ContractId AND c.Status = 1
          INNER JOIN ShipmentDetail d ON c.ShipmentId = d.ShipmentId AND d.Status = 1
          INNER JOIN SizeOption e ON d.SizeOptionId = e.SizeOptionId AND e.Status = 1 AND e.SizeOptionNo = @SizeOptionNo
          ORDER BY e.CreatedOn Desc
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="SizeOptionNo" name="@SizeOptionNo" type="varchar" direction="Input" />
          <param key="CustomerIdList" name="@CustomerIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SizeOption" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ProductApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetProductByKey" type="Text">
        <commandText>
          SELECT * FROM Product
          WHERE ProductId = @ProductId
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetProductByItemNo" type="Text">
        <commandText>
          SELECT * FROM Product
          WHERE (ItemNo = @ItemNo)
          AND	(ParentId IS NULL OR ParentId = 0)
          ORDER BY ItemNo
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetProductListByItemNo" type="Text">
        <commandText>
          SELECT * FROM Product
          WHERE (ItemNo LIKE @ItemNo + '%')
          AND	(ParentId IS NULL OR ParentId = 0)
          ORDER BY ItemNo
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetTop20ProductListByItemNo" type="Text">
        <commandText>
          SELECT top 20 * FROM Product
          WHERE (ItemNo LIKE @ItemNo + '%')
          AND	(ParentId IS NULL OR ParentId = 0)
          ORDER BY ItemNo
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSplitProductListByParentId" type="Text">
        <commandText>
          SELECT * FROM Product
          WHERE ParentId = @ParentId
          AND	(ParentId > 0)
        </commandText>
        <parameters>
          <param key="ParentId" name="@ParentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Product" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ContractApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetContractByKey" type="Text">
        <commandText>
          SELECT * FROM Contract
          WHERE ContractId = @ContractId
        </commandText>
        <parameters>
          <param key="ContractId" name="@ContractId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetContractByItemNoAndCustomerId" type="Text">
        <commandText>
          SELECT * FROM Contract a INNER JOIN Product b ON a.ProductId = b.ProductId
          AND a.CustomerId = @CustomerId AND a.Status = 1
          AND b.ItemNo = @ItemNo
          AND (@IsSelfBilling = -1 OR @IsSelfBilling = 1 AND EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = a.UKSupplierCode)
          OR @IsSelfBilling = 0 AND NOT EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = a.UKSupplierCode))
          AND (@IsInvoiced = -1 OR @IsInvoiced = 1 AND EXISTS(SELECT * FROM Shipment WHERE ContractId = a.ContractId AND Status = 1 AND WorkflowStatusId = 8)
          OR @IsInvoiced = 0 AND EXISTS(SELECT * FROM Shipment WHERE ContractId = a.ContractId AND Status = 1 AND WorkflowStatusId NOT IN (3,5,9,8)))
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="CustomerId" name="@CustomerId" type="Int" direction="Input" />
          <param key="IsSelfBilling" name="@IsSelfBilling" type="Int" direction="Input" />
          <param key="IsInvoiced" name="@IsInvoiced" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetContractByContractNo" type="Text">
        <commandText>
          SELECT * FROM Contract
          WHERE ContractNo = @ContractNo AND Status = 1
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetContractByShipmentId" type="Text">
        <commandText>
          SELECT c.* FROM Contract c
          INNER JOIN Shipment s ON s.ContractId = c.ContractId AND s.Status = 1
          WHERE s.ShipmentId = @ShipmentId AND c.Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUpdatableContract" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM Contract a INNER JOIN NSLDB..Office b
          ON a.OfficeId = b.OfficeId
          INNER JOIN NSLDB..MonthEndStatus e ON b.OfficeId = e.OfficeId AND e.MonthEndStatusId <= 1
          AND a.ContractNo = @ContractNo
          ]]>
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedUnitPrice" type="Text">
        <commandText>
          SELECT SUM(CASE WHEN ISNULL(c.ReducedSupplierGmtPrice,0) = 0 THEN c.SupplierGmtPrice ELSE ISNULL(c.ReducedSupplierGmtPrice,0) END * c.ShippedQty) / SUM(c.ShippedQty) AS UnitPrice
          FROM Contract a
          INNER JOIN Shipment b ON a.ContractId = b.ContractId AND a.CustomerId = 27 AND a.Status = 1 AND b.Status = 1 AND WorkflowStatusId = 8
          INNER JOIN Product e ON e.ProductId = a.ProductId AND e.ItemNo = @ItemNo AND e.Status = 1
          INNER JOIN ShipmentDetail c ON b.ShipmentId = c.ShipmentId AND c.Status = 1
          INNER JOIN SizeOption d ON c.SizeOptionId = d.SizeOptionId AND d.SizeOptionNo = @SizeOptionNo AND d.Status = 1
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="SizeOptionNo" name="@SizeOptionNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetContractListByCriteria" type="Text">
        <commandText>
          <![CDATA[
                select *
                from contract WITH (NOLOCK) 
                where contractId in 
                (
                    select c.contractId
                    from product p WITH (NOLOCK) 
                    inner join contract c WITH (NOLOCK) on c.productId = p.productId
                    inner join shipment s WITH (NOLOCK) on s.contractId = c.contractId
                    --inner join shipmentDetail sd WITH (NOLOCK) on s.shipmentId = sd.shipmentId
                    where (p.ProductId = @ProductId or @ProductId = -1)
                    and (c.SeasonId = @SeasonId or @SeasonId = -1)
                    and (c.officeId = @OfficeId or @officeId = -1)
                    and (c.deptId = @DeptId or @deptId = -1)
                    and (c.productTeamId = @ProductTeamId or @ProductTeamId = -1)
                                    
                    and (s.VendorId = @VendorId or @VendorId = -1)
                    and (s.WorkflowStatusId @WorkflowStatusList)
                                    
                    and (p.designRef <> 'N/A' and p.designRef <> 'NIL' and p.designRef <> 'TBA' and p.designRef <> '')
                                    
                    group by c.contractId
                )
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="DeptId" name="@DeptId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input" />
          <param key="SeasonId" name="@SeasonId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="ProductId" name="@ProductId" type="int" direction="Input" />
          <param key="WorkflowStatusList" name="@WorkflowStatusList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Contract" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetMaxShipmentId" type="Text">
        <commandText>
          SELECT MAX(ShipmentId) FROM Shipment
        </commandText>
      </dataCommand>

      <dataCommand name="GetMaxDeliveryNo" type="Text">
        <commandText>
          SELECT MAX(DeliveryNo) FROM Shipment WHERE ContractId = @ContractId
        </commandText>
        <parameters>
          <param key="ContractId" name="@ContractId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM Shipment
          WHERE ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetShipmentByContractId" type="Text">
        <commandText>
          SELECT * FROM Shipment
          WHERE ContractId = @ContractId AND Status = 1
        </commandText>
        <parameters>
          <param key="ContractId" name="@ContractId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetShipmentByContractNoAndDlyNo" type="Text">
        <commandText>
          SELECT Shipment.* FROM Shipment
          INNER JOIN Contract ON Shipment.ContractId = Contract.ContractId
          WHERE ContractNo = @ContractNo AND DeliveryNo = @DeliveryNo
          AND Shipment.Status = 1 AND Contract.Status = 1
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetShipmentByContractNoAndDeliveryNo" type="Text">
        <commandText>
          SELECT Shipment.* FROM Shipment
          INNER JOIN Contract ON Shipment.ContractId = Contract.ContractId
          WHERE ContractNo = @ContractNo AND DeliveryNo = @DeliveryNo
          AND Shipment.Status = 1 AND Contract.Status = 1
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShipmentListByContractNo" type="Text">
        <commandText>
          SELECT Shipment.* FROM Shipment
          WHERE exists	(	Select top 1 ContractId from Contract
          where Contract.ContractId = Shipment.ContractId
          AND Contract.ContractNo = @ContractNo
          AND Contract.Status = 1
          )
          AND Shipment.Status = 1
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetChinaGBTestShipmentList" type="Text">
        <commandText>
          <![CDATA[
          SELECT a.* FROM Shipment a INNER JOIN Contract b ON a.ContractId = b.ContractId AND a.Status = 1 AND b.Status = 1 
          AND b.CustomerId = 1 
          AND b.ProductId = @ProductId
          AND a.IsMockShopSample = 0 AND a.IsPressSample = 0 AND a.IsStudioSample = 0 AND (b.SeasonId = @SeasonId OR @SeasonId = -1) AND b.SeasonId > 26
          AND a.WorkflowStatusId IN (6,7,8)
          ]]>
        </commandText>
        <parameters>
          <param key="ProductId" name="@ProductId" type="Int" direction="Input" />
          <param key="SeasonId" name="@SeasonId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetChinaGBTestNonDirectoryShipmentList" type="Text">
        <commandText>
          <![CDATA[
          SELECT a.* FROM Shipment a INNER JOIN Contract b ON a.ShipmentId = @ShipmentId AND a.ContractId = b.ContractId AND a.Status = 1 AND b.Status = 1 
          AND b.CustomerId <> 1 
          AND a.IsChinaGBTestRequired = 1
          ]]>
        </commandText>
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
      </dataCommand>


    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Shipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ContractShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentList" type="Text">
        <commandText>
          SELECT TOP 100
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, p.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          ,i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          ,s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          ,s.TermOfPurchaseId
          FROM
          Contract AS c
          INNER JOIN Shipment AS s ON c.ContractId = s.ContractID AND c.status = 1 AND s.status = 1
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId AND i.status = 1
          INNER JOIN Product AS p ON p.ProductId = c.ProductId AND p.status = 1
          WHERE
          ( @ContractNo IS NULL OR c.ContractNo = @ContractNo)
          AND (( @InvoicePrefix IS NULL OR i.InvoicePrefix = @InvoicePrefix)
          AND (@InvoiceSeq IS NULL OR i.InvoiceSeq = @InvoiceSeq)
          AND (@InvoiceYear IS NULL OR i.InvoiceYear = @InvoiceYear))
          AND (@ItemNo IS NULL OR p.ItemNo = @ItemNo)
          AND (c.OfficeId  @OfficeCodeList)
          ORDER BY c.ContractNo, s.DeliveryNo
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeq" name="@InvoiceSeq" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="OfficeCodeList" name="@OfficeCodeList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShipmentAdvanceSearchList" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 100  
              s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, p.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
              s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
              i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
              c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
              i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
              i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder,  CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
              SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
              s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount, 
              i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt, 
              s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
              QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
		                                THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
		                                ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) 
			                                        FROM SplitShipment
			                                        WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
		                                END,
              VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                        THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
			                                        ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) 
				                                                FROM SplitShipment
				                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
			                                        END,
              LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
                                      THEN s.TotalShippedQty * s.LabTestIncome
                                      ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
                                                FROM SplitShipment
                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
                                      END
              ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
              --,i.PiecesPerDeliveryUnit
              , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
              , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
			  , s.TermOfPurchaseId
          FROM Shipment AS s
              INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
              INNER JOIN Contract AS c ON s.ContractId = c.ContractId
              INNER JOIN Product AS p  ON c.ProductId = p.ProductId
			  INNER JOIN TermOfPurchase as tp ON tp.TermOfPurchaseId = s.TermOfPurchaseId
          WHERE (@ContractNo = '' OR c.ContractNo = @ContractNo)
              AND (@DeliveryNo = -1 OR s.DeliveryNo = @DeliveryNo)
              AND (@ItemNo = '' OR p.ItemNo = @ItemNo)
              AND (@InvoicePrefix = '' OR ((i.InvoicePrefix =@InvoicePrefix)
              AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
              AND (i.InvoiceYear = @InvoiceYear)))              
              AND (@VendorId = -1 OR s.VendorId = @VendorId)
              AND (@CustomerId = -1 OR c.CustomerId = @CustomerId)
              AND (@SupplierInvoiceNoFrom = '' OR i.SupplierInvoiceNo BETWEEN @SupplierInvoiceNoFrom AND @SupplierInvoiceNoTo)
              AND c.OfficeId @OfficeCodeList
              AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
              AND (@InvoiceSentDateFrom IS NULL OR i.InvoiceSentDate BETWEEN @InvoiceSentDateFrom AND @InvoiceSentDateTo)
              AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
              --AND (@OrderType IS NULL OR ((@OrderType = 'F' AND s.TermOfPurchaseId = 1) OR (@OrderType = 'V' AND s.TermOfPurchaseId <> 1)))
              AND (@OrderType IS NULL OR @OrderType like '%' + tp.OrderType + '%')
              AND (@TermOfPurchaseId = -1 OR s.TermOfPurchaseId = @TermOfPurchaseId)
              AND (@CountryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
              AND (@InvoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @InvoiceUploadDateFrom AND DATEADD(d,1,@InvoiceUploadDateTo))
              AND (@CustomerAtWarehouseDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @CustomerAtWarehouseDateFrom AND @CustomerAtWarehouseDateTo)
              AND (@ILSActualAtWarehouseDateFrom IS NULL OR i.ILSActualAtWarehouseDate BETWEEN @ILSActualAtWarehouseDateFrom AND @ILSActualAtWarehouseDateTo)
              AND (@OPRTypeId = -1 OR s.WithOPRFabric = @OPRTypeId OR (@OPRTypeId = -2 AND s.WithOPRFabric IS NOT NULL AND NOT (s.WithOPRFabric = 0)))
              AND (@CustomerDestinationId = -1 OR s.CustomerDestinationId = @CustomerDestinationId)
              AND (@DocNo IS NULL OR EXISTS(SELECT * FROM Document WHERE ShipmentId = s.ShipmentId AND DocNo = @DocNo))
              AND s.WorkflowStatusId  @WorkflowStatusList
              AND s.ShipmentMethodId @ShipmentMethodList
              AND (@SplitOnly = 0 OR (s.SplitCount > 0 AND s.IsVirtualSetSplit = 0))
              AND (@SZOrderOnly = 0 OR c.IsNextMfgOrder = 1)
              AND (@IsSample = 0 OR s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1)
              AND (@IsLDPOrder = 0 OR c.IsLDPOrder = 1)
              AND (@WithQCCharge = 0 OR s.WithQCCharge = 1)
			  AND (@IsReprocessGoods = 0 OR s.SpecialOrderTypeId = 1)
              AND (@InvoiceUploadUserId = -1 OR i.InvoiceUploadUserId = @InvoiceUploadUserId)
              AND (@IsGBTestRequired = 0 OR s.IsChinaGBTestRequired = @IsGBTestRequired)
			  AND (@IsQccInspection = 0 OR dbo.fn_IsViaCambodiaQCC(s.ShipmentId)=1 )
			  AND (@IsTradingAF = 0 OR s.IsTradingAF=@IsTradingAF )
              AND s.Status = 1
          ORDER BY c.ContractNo, s.DeliveryNo
          ]]>
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="CustomerId" name="@CustomerId" type="int" direction="Input" />
          <param key="SupplierInvoiceNoFrom" name="@SupplierInvoiceNoFrom" type="varchar" direction="Input" />
          <param key="SupplierInvoiceNoTo" name="@SupplierInvoiceNoTo" type="varchar" direction="Input" />
          <param key="OfficeCodeList" name="@OfficeCodeList" type="ArrayInt" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="InvoiceSentDateFrom" name="@InvoiceSentDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceSentDateTo" name="@InvoiceSentDateTo" type="DateTime" direction="Input" />
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input" />
          <param key="OrderType" name="@OrderType" type="varchar" direction="Input" />
          <param key="InvoiceUploadDateFrom" name="@InvoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceUploadDateTo" name="@InvoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="OPRTypeId" name="@OPRTypeId" type="int" direction="Input" />
          <param key="CustomerDestinationId" name="@CustomerDestinationId" type="int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="int" direction="Input" />
          <param key="DocNo" name="@DocNo" type="varchar" direction="Input" />
          <param key="WorkflowStatusList" name="@WorkflowStatusList" type="ArrayInt" direction="Input" />
          <param key="ShipmentMethodList" name="@ShipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="SplitOnly" name="@SplitOnly" type="int" direction="Input" />
          <param key="SZOrderOnly" name="@SZOrderOnly" type="int" direction="Input" />
          <param key="CustomerAtWarehouseDateFrom" name="@CustomerAtWarehouseDateFrom" type="DateTime" direction="Input" />
          <param key="CustomerAtWarehouseDateTo" name="@CustomerAtWarehouseDateTo" type="DateTime" direction="Input" />
          <param key="ILSActualAtWarehouseDateFrom" name="@ILSActualAtWarehouseDateFrom" type="DateTime" direction="Input" />
          <param key="ILSActualAtWarehouseDateTo" name="@ILSActualAtWarehouseDateTo" type="DateTime" direction="Input" />
          <param key="CountryOfOriginId" name="@CountryOfOriginId" type="int" direction="Input" />
          <param key="IsSample" name="@IsSample" type="int" direction="Input" />
          <param key="IsLDPOrder" name="@IsLDPOrder" type="int" direction="Input" />
          <param key="WithQCCharge" name="@WithQCCharge" type="int" direction="Input" />
          <param key="IsReprocessGoods" name="@IsReprocessGoods" type="int" direction="Input" />
          <param key="InvoiceUploadUserId" name="@InvoiceUploadUserId" type="int" direction="Input" />
          <param key="IsGBTestRequired" name="@IsGBTestRequired" type="int" direction="Input" />
          <param key="IsQccInspection" name="@IsQccInspection" type="int" direction="Input" />
          <param key="IsTradingAF" name="@IsTradingAF" type="int" direction="Input" />
        </parameters>

      </dataCommand>

      <dataCommand name="GetShipmentMassUpdateList" type="Text">
        <commandText>
          <![CDATA[
          
          SELECT TOP 100  
              s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, p.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
              s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
              i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
              c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, 
              i.PurchaseScanDate, i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
              i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder,  CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
              SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
              s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount,
              TotalShippedSupplierGmtAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                                    THEN s.TotalShippedSupplierGmtAmt
			                                                    ELSE isnull((SELECT sum(TotalShippedSupplierGmtAmt) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END, 
              TotalShippedSupplierGmtAmtAfterDiscount = CASE WHEN s.SplitCount=0 or s.IsVirtualSetSplit=1
			                                                    then s.TotalShippedSupplierGmtAmtAfterDiscount
			                                                    else isnull((select sum(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END,
              i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
              s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome, 
              QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
				                            THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
				                            ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) 
					                                    FROM SplitShipment
					                                    WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
				                            END,
              VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
					                                    THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
					                                    ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) 
						                                            FROM SplitShipment
						                                            WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
					                                    END,
              LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
                                      THEN s.TotalShippedQty * s.LabTestIncome
                                      ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
                                                FROM SplitShipment
                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
                                      END
              ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
              --,i.PiecesPerDeliveryUnit
              , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
              , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
			  , s.TermOfPurchaseId
          FROM Shipment AS s
              INNER JOIN Invoice AS i  ON i.ShipmentId = s.ShipmentId AND s.Status = 1 AND (@DeliveryNo = -1  OR  s.DeliveryNo = @DeliveryNo)
              AND (@InvoicePrefix = '' OR ((i.InvoiceYear = @InvoiceYear) AND (i.InvoicePrefix =@InvoicePrefix)
              AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)))
              AND (@VendorId = -1 OR s.VendorId = @VendorId)              
              INNER JOIN Contract AS c ON s.ContractId = c.ContractId AND (@ContractNo = '' OR c.ContractNo = @ContractNo)
              INNER JOIN Product AS p  On c.ProductId = p.ProductId AND (@ItemNo = '' or p.ItemNo = @ItemNo)
              INNER JOIN ( SELECT DISTINCT ProductTeamId=pt.OfficeStructureId, pt.OfficeId, DepartmentCode=dp.Code, 
                                  UserId = (SELECT TOP 1 UserId 
                                              FROM NSLDB..UserSeasonOfficeStructure AS uo 
					                                    WHERE (uo.OfficeStructureId=pt.ParentId or uo.OfficeStructureId=pt.OfficeStructureId) 
						                                      AND uo.UserId=@UserId AND uo.Status=1)
			                        FROM NSLDB..OfficeStructure AS pt 
			                        INNER join NSLDB..OfficeStructure AS dp ON dp.OfficeStructureId=pt.ParentId AND dp.Status=1
			                        WHERE pt.status=1 AND pt.OfficeStructureTypeId = 50
		                    ) as up ON up.ProductTeamId=c.ProductTeamId
              LEFT JOIN NSLDB..UserInfo AS u ON u.UserId=i.InvoiceUploadUserId
          WHERE 
              --AND (@CustomerId = -1 OR c.CustomerId = @CustomerId)
              (c.CustomerId @CustomerList)
              AND (@SupplierInvoiceNoFrom = '' OR i.SupplierInvoiceNo BETWEEN @SupplierInvoiceNoFrom AND @SupplierInvoiceNoTo)
              AND c.OfficeId @OfficeCodeList
              --AND i.InvoiceUploadUserId @ShippingUserIdList
              AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
              AND (@InvoiceSentDateFrom IS NULL OR i.InvoiceSentDate BETWEEN @InvoiceSentDateFrom AND @InvoiceSentDateTo)
              AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
              AND (@OrderType IS NULL OR ((@OrderType = 'F' AND s.TermOfPurchaseId = 1) OR (@OrderType = 'V' AND s.TermOfPurchaseId <> 1)))
              AND (@TermOfPurchaseId = -1 OR s.TermOfPurchaseId = @TermOfPurchaseId)
              AND (@CountryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
              AND (@InvoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @InvoiceUploadDateFrom AND DATEADD(d,1,@InvoiceUploadDateTo))
              AND (@CustomerAtWarehouseDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @CustomerAtWarehouseDateFrom AND @CustomerAtWarehouseDateTo)
              AND (@ILSActualAtWarehouseDateFrom IS NULL OR i.ILSActualAtWarehouseDate BETWEEN @ILSActualAtWarehouseDateFrom AND @ILSActualAtWarehouseDateTo)
              AND (@OPRTypeId = -1 OR s.WithOPRFabric = @OPRTypeId OR (@OPRTypeId = -2 AND s.WithOPRFabric IS NOT NULL AND NOT (s.WithOPRFabric = 0)))
              AND (@CustomerDestinationId = -1 OR s.CustomerDestinationId = @CustomerDestinationId)
              AND (@DocNo IS NULL OR EXISTS(SELECT * FROM Document WHERE ShipmentId = s.ShipmentId AND DocNo = @DocNo))
              AND s.WorkflowStatusId  @WorkflowStatusList
              AND s.ShipmentMethodId @ShipmentMethodList
              AND (@SplitOnly = 0 OR (s.SplitCount > 0 AND s.IsVirtualSetSplit = 0))
              AND (@SZOrderOnly = 0 OR c.IsNextMfgOrder = 1)
              AND (@IsSample = 0 OR s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1)
              AND (@IsLDPOrder = 0 OR c.IsLDPOrder = 1)
              AND (@WithQCCharge = 0 OR s.WithQCCharge = 1)
              AND (@InvoiceUploadUserId = -1 OR i.InvoiceUploadUserId = @InvoiceUploadUserId)

	            AND (@LCNoFrom='' OR i.LcNo between @LCNoFrom and @LCNoTo) 
              AND (@ActualAtWarehouseDateFrom IS NULL OR i.ActualAtWarehouseDate BETWEEN @ActualAtWarehouseDateFrom AND @ActualAtWarehouseDateTo)
              AND (@ShippingDocumentReceiptStatus=-1 OR (case when i.ShippingDocReceiptDate is not null then 1 else 0 end)=@ShippingDocumentReceiptStatus)
              AND (@LcPaymentCheckStatus=-1 OR (case when i.LcPaymentCheckedDate is not null then 1 else 0 end)=@LcPaymentCheckStatus)

          --ORDER BY c.ContractNo, s.DeliveryNo
          ]]>
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="CustomerList" name="@CustomerList" type="arrayInt" direction="Input" />
          <param key="SupplierInvoiceNoFrom" name="@SupplierInvoiceNoFrom" type="varchar" direction="Input" />
          <param key="SupplierInvoiceNoTo" name="@SupplierInvoiceNoTo" type="varchar" direction="Input" />
          <param key="OfficeCodeList" name="@OfficeCodeList" type="ArrayInt" direction="Input" />
          <param key="ShippingUserIdList" name="@ShippingUserIdList" type="ArrayInt" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="InvoiceSentDateFrom" name="@InvoiceSentDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceSentDateTo" name="@InvoiceSentDateTo" type="DateTime" direction="Input" />
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input" />
          <param key="OrderType" name="@OrderType" type="varchar" direction="Input" />
          <param key="InvoiceUploadDateFrom" name="@InvoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceUploadDateTo" name="@InvoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="OPRTypeId" name="@OPRTypeId" type="int" direction="Input" />
          <param key="CustomerDestinationId" name="@CustomerDestinationId" type="int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="int" direction="Input" />
          <param key="DocNo" name="@DocNo" type="varchar" direction="Input" />
          <param key="WorkflowStatusList" name="@WorkflowStatusList" type="ArrayInt" direction="Input" />
          <param key="ShipmentMethodList" name="@ShipmentMethodList" type="ArrayInt" direction="Input" />
          <param key="SplitOnly" name="@SplitOnly" type="int" direction="Input" />
          <param key="SZOrderOnly" name="@SZOrderOnly" type="int" direction="Input" />
          <param key="CustomerAtWarehouseDateFrom" name="@CustomerAtWarehouseDateFrom" type="DateTime" direction="Input" />
          <param key="CustomerAtWarehouseDateTo" name="@CustomerAtWarehouseDateTo" type="DateTime" direction="Input" />
          <param key="ILSActualAtWarehouseDateFrom" name="@ILSActualAtWarehouseDateFrom" type="DateTime" direction="Input" />
          <param key="ILSActualAtWarehouseDateTo" name="@ILSActualAtWarehouseDateTo" type="DateTime" direction="Input" />
          <param key="CountryOfOriginId" name="@CountryOfOriginId" type="int" direction="Input" />
          <param key="IsSample" name="@IsSample" type="int" direction="Input" />
          <param key="IsLDPOrder" name="@IsLDPOrder" type="int" direction="Input" />
          <param key="WithQCCharge" name="@WithQCCharge" type="int" direction="Input" />
          <param key="InvoiceUploadUserId" name="@InvoiceUploadUserId" type="int" direction="Input" />

          <param key="LCNoFrom" name="@LCNoFrom" type="varchar" direction="Input" />
          <param key="LCNoTo" name="@LCNoTo" type="varchar" direction="Input" />
          <param key="ActualAtWarehouseDateFrom" name="@ActualAtWarehouseDateFrom" type="DateTime" direction="Input" />
          <param key="ActualAtWarehouseDateTo" name="@ActualAtWarehouseDateTo" type="DateTime" direction="Input" />
          <param key="ShippingDocumentReceiptStatus" name="@ShippingDocumentReceiptStatus" type="int" direction="Input" />
          <param key="LcPaymentCheckStatus" name="@LcPaymentCheckStatus" type="int" direction="Input" />
          <param key="UserId" name="@UserId" type="int" direction="Input" />

        </parameters>

      </dataCommand>

      <dataCommand name="GetShipmentListByAdvancePaymentVendor" type="Text">
        <commandText>
          SELECT
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, p.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          ,i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          ,s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          ,s.TermOfPurchaseId
          FROM
          Contract AS c
          INNER JOIN Shipment AS s ON (c.ContractId = s.ContractID AND s.WorkflowStatusId != 9 AND s.status = 1)
          INNER JOIN Invoice AS i ON (i.ShipmentId = s.ShipmentId AND i.APDate IS NULL AND i.status = 1 AND i.ShippingDocCheckedOn IS NULL)
          INNER JOIN Product AS p ON (p.ProductId = c.ProductId AND p.status = 1)
          INNER JOIN AdvancePayment AS a ON (a.VendorId = s.VendorId)
          WHERE
          (c.status = 1)
          AND
          (a.PaymentId = @PaymentId)
          AND
          s.ShipmentId NOT IN (
          SELECT ShipmentId FROM AdvancePaymentOrderDetail WHERE PaymentId = @PaymentId AND Status = 1
          )
          AND s.CustomerAtWarehouseDate >= dateadd(yy,-1, getdate())
          ORDER BY c.ContractNo, s.DeliveryNo
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetInvoiceListByInvoiceNo" type="Text">
        <commandText>
          SELECT TOP 100
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, p.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo,
          i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount,
          TotalShippedSupplierGmtAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedSupplierGmtAmt
          ELSE isnull((SELECT sum(TotalShippedSupplierGmtAmt) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
          END,
          TotalShippedSupplierGmtAmtAfterDiscount = CASE WHEN s.SplitCount=0 or s.IsVirtualSetSplit=1
          then s.TotalShippedSupplierGmtAmtAfterDiscount
          else isnull((select sum(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
          END,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          , s.TermOfPurchaseId
          FROM
          Shipment AS s
          INNER JOIN Contract AS c  ON c.ContractId = s.ContractID AND (c.OfficeId  @OfficeIdList)
          AND c.status = 1 AND s.status = 1
          INNER JOIN Invoice AS i  ON i.ShipmentId = s.ShipmentId AND InvoicePrefix = @InvoicePrefix AND InvoiceSeq = @InvoiceSeq AND InvoiceYear = @InvoiceYear
          AND (@SequenceNo IS NULL OR i.SequenceNo = @SequenceNo) AND i.status = 1
          INNER JOIN Product AS p ON p.ProductId = c.ProductId
          AND p.status = 1
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeq" name="@InvoiceSeq" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="SequenceNo" name="@SequenceNo" type="int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetInvoiceList" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 100  
              s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId,
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
              s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
              i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
              c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, 
              TotalShippedSupplierGmtAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                                    THEN s.TotalShippedSupplierGmtAmt
			                                                    ELSE isnull((SELECT sum(TotalShippedSupplierGmtAmt) FROM SplitShipment WITH (NOLOCK) WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END, 
              i.PurchaseScanDate,
              i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
              i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, s.SplitCount, 
              SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder, s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount,
              TotalShippedSupplierGmtAmtAfterDiscount = CASE WHEN s.SplitCount=0 or s.IsVirtualSetSplit=1
			                                                    then s.TotalShippedSupplierGmtAmtAfterDiscount
			                                                    else isnull((select sum(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment WITH (NOLOCK) WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END,
              i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
              s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome, 
              QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
		                                THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
		                                ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) 
			                                        FROM SplitShipment WITH (NOLOCK)
			                                        WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
		                                END,
              VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                        THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
			                                        ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) 
				                                                FROM SplitShipment WITH (NOLOCK)
				                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
			                                        END,
              LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
                                    THEN s.TotalShippedQty * s.LabTestIncome
                                    ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
                                            FROM SplitShipment WITH (NOLOCK)
                                            WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
                                    END
              ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
              --,i.PiecesPerDeliveryUnit
              , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
              , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
			  , s.TermOfPurchaseId
          FROM invoice AS i WITH (NOLOCK)
              INNER JOIN shipment AS s WITH (NOLOCK)  ON i.ShipmentId = s.ShipmentId
              INNER join Contract AS c WITH (NOLOCK)  ON s.ContractId = c.ContractId
          WHERE
              s.Status = 1
              AND (@InvoicePrefix = '' OR ((i.InvoicePrefix =@InvoicePrefix)
              AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
              AND (i.InvoiceYear = @InvoiceYear)))
              AND ((@OfficeId = -1 AND c.OfficeId  @OfficeCodeList) OR c.OfficeId = @OfficeId)
              AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
              AND (@TermOfPurchaseId = -1 OR s.TermOfPurchaseId = @TermOfPurchaseId)
              AND (@InvoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @InvoiceUploadDateFrom AND DATEADD(d,1,@InvoiceUploadDateTo))
              AND (@WorkflowStatusId = -1 OR s.WorkflowStatusId = @WorkflowStatusId)
              AND (@TradingAgencyId = -1 OR c.TradingAgencyId = @TradingAgencyId)
              AND (@PurchaseScanDateFrom IS NULL OR i.PurchaseScanDate BETWEEN  @PurchaseScanDateFrom AND DATEADD(d,1,@PurchaseScanDateTo))
              AND (@OrderType = '' OR (SELECT OrderType FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId) = @OrderType)
              AND (@CurrencyId = -1 OR s.SellCurrencyId = @CurrencyId)
              AND (@SalesScanDateFrom IS NULL OR i.SalesScanDate BETWEEN @SalesScanDateFrom AND DATEADD(d,1,@SalesScanDateTo))
              AND ((@SubmittedOnFrom IS NOT NULL OR @BatchNo = '') 
                    OR EXISTS(SELECT * FROM eInvoiceBatch WITH (NOLOCK) 
                                WHERE (@SubmittedOnFrom IS NULL OR SubmittedOn BETWEEN @SubmittedOnFrom AND @SubmittedOnTo)
                                    AND (@BatchNo = '' OR eInvoiceBatchNo = @BatchNo)))
              AND (@InvoiceBatchStatus = -1 
                      OR (@InvoiceBatchStatus = 0 AND i.SalesScanDate IS NOT NULL)
                      OR (i.SalesScanDate IS NOT NULL 
                            AND ( (@InvoiceBatchStatus = 2 AND i.eInvoiceBatchId > 0)
                                  OR (@InvoiceBatchStatus = 1 AND (i.eInvoiceBatchId = 0 OR i.eInvoiceBatchId IS NULL)))))
              AND (@PurchaseScanStatus = -1 
                    OR ((@PurchaseScanStatus = 1 AND i.PurchaseScanDate IS NULL)
		                    OR (@PurchaseScanStatus = 2 AND i.PurchaseScanDate IS NOT NULL AND NOT EXISTS(SELECT * FROM SunInterfaceLog sil WITH (NOLOCK) WHERE sil.ShipmentId = i.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 2))
		                    OR (@PurchaseScanStatus = 3 AND EXISTS(SELECT * FROM SunInterfaceLog sil WITH (NOLOCK) WHERE sil.ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 2))))
          ORDER BY InvoicePrefix, InvoiceSeq, InvoiceYear
          ]]>
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="OfficeCodeList" name="@OfficeCodeList" type="ArrayInt" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="InvoiceUploadDateFrom" name="@InvoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceUploadDateTo" name="@InvoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="int" direction="Input" />
          <param key="WorkflowStatusId" name="@WorkflowStatusId" type="int" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="int" direction="Input" />
          <param key="PurchaseScanDateFrom" name="@PurchaseScanDateFrom" type="DateTime" direction="Input" />
          <param key="PurchaseScanDateTo" name="@PurchaseScanDateTo" type="DateTime" direction="Input" />
          <param key="PurchaseScanStatus" name="@PurchaseScanStatus" type="int" direction="Input" />
          <param key="OrderType" name="@OrderType" type="varchar" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
          <param key="SalesScanDateFrom" name="@SalesScanDateFrom" type="DateTime" direction="Input" />
          <param key="SalesScanDateTo" name="@SalesScanDateTo" type="DateTime" direction="Input" />
          <param key="SubmittedOnFrom" name="@SubmittedOnFrom" type="DateTime" direction="Input" />
          <param key="SubmittedOnTo" name="@SubmittedOnTo" type="DateTime" direction="Input" />
          <param key="BatchNo" name="@BatchNo" type="varchar" direction="Input" />
          <param key="InvoiceBatchStatus" name="@InvoiceBatchStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetInvoiceListForInvoiceBatch" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 300  
              s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId,
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
              s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
              i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
              c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, 
              TotalShippedSupplierGmtAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                                    THEN s.TotalShippedSupplierGmtAmt
			                                                    ELSE isnull((SELECT sum(TotalShippedSupplierGmtAmt) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END, 
              i.PurchaseScanDate,
              i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
              i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, s.SplitCount, 
              SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder, s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount,
              TotalShippedSupplierGmtAmtAfterDiscount = CASE WHEN s.SplitCount=0 or s.IsVirtualSetSplit=1
			                                                    then s.TotalShippedSupplierGmtAmtAfterDiscount
			                                                    else isnull((select sum(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END,
              i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
              s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
              QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
		                                THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
		                                ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) 
			                                        FROM SplitShipment
			                                        WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
		                                END,
              VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                        THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
			                                        ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) 
				                                                FROM SplitShipment
				                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
			                                        END,
              LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
                                    THEN s.TotalShippedQty * s.LabTestIncome
                                    ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
                                            FROM SplitShipment
                                            WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
                                    END
              ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
              --,i.PiecesPerDeliveryUnit
              , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
              , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
			  , s.TermOfPurchaseId
          FROM invoice AS i
              INNER JOIN shipment AS s  ON i.ShipmentId = s.ShipmentId
              INNER join Contract AS c  ON s.ContractId = c.ContractId
          WHERE
              (@InvoicePrefix = '' OR ((i.InvoicePrefix =@InvoicePrefix)
              AND (i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
              AND (i.InvoiceYear = @InvoiceYear)))
              AND c.OfficeId = @OfficeId
              AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
 
              AND (@WorkflowStatusId = -1 OR s.WorkflowStatusId = @WorkflowStatusId)
              AND (@TradingAgencyId = -1 OR c.TradingAgencyId = @TradingAgencyId)

              AND (@OrderType = '' OR (SELECT OrderType FROM TermOfPurchase WHERE TermOfPurchaseId = s.TermOfPurchaseId) = @OrderType)
              AND (@CurrencyId = -1 OR s.SellCurrencyId = @CurrencyId)
              AND (@SalesScanDateFrom IS NULL OR i.SalesScanDate BETWEEN @SalesScanDateFrom AND DATEADD(d,1,@SalesScanDateTo))
              
              AND ( (@SubmittedOnFrom IS  NULL AND @BatchNo = '') 
                    OR EXISTS(SELECT * FROM eInvoiceBatch 
                                WHERE eInvoiceBatchId = i.eInvoiceBatchId
                                  AND (@SubmittedOnFrom IS NULL OR SubmittedOn BETWEEN @SubmittedOnFrom AND @SubmittedOnTo)
                                  AND (@BatchNo = '' OR eInvoiceBatchNo = @BatchNo)))
              
              AND (@InvoiceBatchStatus = -1 OR (@InvoiceBatchStatus = 0 AND i.SalesScanDate IS NOT NULL)
                    OR (i.SalesScanDate IS NOT NULL 
                        AND ( (@InvoiceBatchStatus = 2 AND i.eInvoiceBatchId > 0)
                              OR (@InvoiceBatchStatus = 1 AND (i.eInvoiceBatchId = 0 OR i.eInvoiceBatchId IS NULL)))
                       )
                  )
              AND i.IsSelfBilledOrder = 0
              AND s.Status = 1
          ORDER BY InvoicePrefix, InvoiceSeq, InvoiceYear
          ]]>
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />

          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />


          <param key="WorkflowStatusId" name="@WorkflowStatusId" type="int" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="int" direction="Input" />

          <param key="OrderType" name="@OrderType" type="varchar" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
          <param key="SalesScanDateFrom" name="@SalesScanDateFrom" type="DateTime" direction="Input" />
          <param key="SalesScanDateTo" name="@SalesScanDateTo" type="DateTime" direction="Input" />
          <param key="SubmittedOnFrom" name="@SubmittedOnFrom" type="DateTime" direction="Input" />
          <param key="SubmittedOnTo" name="@SubmittedOnTo" type="DateTime" direction="Input" />
          <param key="BatchNo" name="@BatchNo" type="varchar" direction="Input" />
          <param key="InvoiceBatchStatus" name="@InvoiceBatchStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetInvoiceListByLcBillRefNo" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 100  
              s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId,
              ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
              s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
              s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
              i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
              c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, 
              TotalShippedSupplierGmtAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                                    THEN s.TotalShippedSupplierGmtAmt
			                                                    ELSE isnull((SELECT sum(TotalShippedSupplierGmtAmt) FROM SplitShipment WITH (NOLOCK) WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END, 
              i.PurchaseScanDate,
              i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
              i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, s.SplitCount, 
              SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder, s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount,
              TotalShippedSupplierGmtAmtAfterDiscount = CASE WHEN s.SplitCount=0 or s.IsVirtualSetSplit=1
			                                                    then s.TotalShippedSupplierGmtAmtAfterDiscount
			                                                    else isnull((select sum(TotalShippedSupplierGmtAmtAfterDiscount) FROM SplitShipment WITH (NOLOCK) WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0),0)
			                                                    END,
              i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
              s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome, 
              QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
		                                THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
		                                ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) 
			                                        FROM SplitShipment WITH (NOLOCK)
			                                        WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
		                                END,
              VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
			                                        THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
			                                        ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) 
				                                                FROM SplitShipment WITH (NOLOCK)
				                                                WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
			                                        END,
              LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
                                    THEN s.TotalShippedQty * s.LabTestIncome
                                    ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
                                            FROM SplitShipment WITH (NOLOCK)
                                            WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
                                    END
              ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
              , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
              , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
			  , s.TermOfPurchaseId
          FROM (SELECT * FROM invoice WITH (NOLOCK) WHERE LCBillRefNo=@LCBillRefNo) AS i 
              INNER JOIN shipment AS s WITH (NOLOCK)  ON i.ShipmentId = s.ShipmentId
              INNER join Contract AS c WITH (NOLOCK)  ON s.ContractId = c.ContractId
          WHERE
              s.Status = 1
              AND (@WorkflowStatusId = -1 OR s.WorkflowStatusId = @WorkflowStatusId)
          ORDER BY InvoicePrefix, InvoiceSeq, InvoiceYear
          ]]>
        </commandText>
        <parameters>
          <param key="WorkflowStatusId" name="@WorkflowStatusId" type="int" direction="Input" />
          <param key="LCBillRefNo" name="@LCBillRefNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSplitShipmentByPONo" type="Text">
        <commandText>
          SELECT
          s.ShipmentId, c.ContractNo, s.DeliveryNo, ss.VendorId, c.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, ss.SellCurrencyId, ss.BuyCurrencyId, ss.TotalPOQty, ss.TotalShippedQty,
          ss.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, ss.SupplierInvoiceNo, ss.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, ss.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, ss.APAmt, ss.APDate, ss.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, s.SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder, s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, ss.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, ss.QACommissionPercent, ss.VendorPaymentDiscountPercent, ss.LabTestIncome,
          QACommissionAmt = ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.QACommissionPercent / 100, 2),
          VendorPaymentDiscountAmt = ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.VendorPaymentDiscountPercent / 100, 2),
          LabTestIncomeAmt = (ss.TotalShippedQty * ss.LabTestIncome)
          ,ss.RejectPaymentReasonId, ss.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          , ss.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          , s.TermOfPurchaseId
          FROM SplitShipment AS ss
          INNER JOIN Shipment AS s  ON ss.ShipmentId = s.ShipmentId
          INNER JOIN Invoice AS i  ON i.ShipmentId = s.ShipmentId
          INNER join Contract AS c  ON s.ContractId = c.ContractId
          INNER JOIN Product AS p  On c.ProductId = p.ProductId
          where  (@ContractNo IS NULL OR c.ContractNo = @ContractNo)
          AND (@SplitSuffix IS NULL OR ss.SplitSuffix = @SplitSuffix)
          AND (@DeliveryNo = -1 OR s.DeliveryNo = @DeliveryNo)
          AND ss.Status = 1 AND ss.IsVirtualSetSplit = 0
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="SplitSuffix" name="@SplitSuffix" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetLast10Shipment" type="Text">
        <commandText>
          SELECT TOP 10
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          , s.TermOfPurchaseId
          FROM Shipment s
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN Product p ON p.ProductId = c.ProductId
          WHERE
          --s.WorkflowStatusId = 8
          s.Status = 1
          AND s.WorkflowStatusId NOT IN (5,9) -- Not a rejected nor cancelled shipment
          AND (p.ItemNo = @ItemNo
          OR c.ContractNo = @ContractNo)
          ORDER BY InvoiceDate DESC, s.CustomerAtWarehouseDate DESC
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetLastShipmentDate" type="Text">
        <commandText>
          SELECT a.InvoiceDate FROM Product d
          INNER JOIN Contract c ON d.ItemNo = @ItemNo AND (c.ContractNo = @ContractNo OR @ContractNo = '') AND d.ProductId = c.ProductId AND c.Status = 1
          INNER JOIN Shipment b ON b.ContractId = c.ContractId AND b.Status = 1 AND b.WorkflowStatusId = 8 AND (b.VendorId = -1 OR b.VendorId = @VendorId)
          INNER JOIN Invoice a ON b.ShipmentId = a.ShipmentId AND a.InvoiceDate IS NOT NULL
          ORDER BY a.InvoiceDate DESC
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetLastShipmentDateByVendor" type="Text">
        <commandText>
          SELECT aa.InvoiceDate FROM Invoice aa
          INNER JOIN Shipment bb ON bb.VendorId = @VendorId AND aa.ShipmentId = bb.ShipmentId AND bb.Status = 1 AND aa.InvoiceDate IS NOT NULL and bb.IsMockShopSample = 0
          INNER JOIN Contract cc ON bb.ContractId = cc.ContractId AND cc.Status = 1 AND cc.CustomerId NOT IN (8)
          INNER JOIN Product dd ON cc.ProductId = dd.ProductId
          ORDER BY aa.InvoiceDate DESC
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetShippedSummaryByItemNo" type="Text">
        <commandText>
          SELECT ISNULL(SUM(b.TotalShippedQty),0) AS TotalShippedQty, ISNULL(SUM(b.TotalShippedAmt * y.ExchangeRate / z.ExchangeRate),0) AS TotalShippedAmt
          FROM Product d WITH (NOLOCK) INNER JOIN Contract c WITH (NOLOCK) ON d.ItemNo = @ItemNo AND d.ProductId = c.ProductId AND c.Status = 1
          INNER JOIN Shipment b WITH (NOLOCK) ON c.ContractId = b.ContractId AND b.WorkflowStatusId = 8 AND b.IsMockShopSample = 0 AND b.IsPressSample = 0 AND b.IsStudioSample = 0 AND b.Status = 1
          INNER JOIN Invoice a WITH (NOLOCK) ON b.ShipmentId = a.ShipmentId  AND a.InvoiceDate BETWEEN @FromDate AND @ToDate
          INNER JOIN ExchangeRate y WITH (NOLOCK) ON y.CurrencyId = b.SellCurrencyId AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
          INNER JOIN ExchangeRate z WITH (NOLOCK) ON z.CurrencyId = 3 AND z.ExchangeRateTypeId = 1 and a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="datetime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="datetime" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetFutureOrderInfoByVendor" type="Text">
        <commandText>
          SELECT CONVERT(decimal, ISNULL(SUM(bb.TotalPOAmt * ISNULL(ex.ExchangeRate, ex2.ExchangeRate) / ISNULL(ex1.ExchangeRate, ex3.ExchangeRate)),0)) AS TotalSales,
          MIN(bb.CustomerAtWarehouseDate) AS NextShipmentDate,
          CONVERT(INT, ISNULL(COUNT(*),0)) AS FutureOrderCnt
          FROM Invoice aa INNER JOIN Shipment bb ON bb.VendorId = @VendorId AND aa.ShipmentId = bb.ShipmentId AND bb.Status = 1 AND aa.InvoiceDate IS NULL and bb.WorkflowStatusId NOT IN (3,5,9) AND bb.IsMockShopSample = 0 AND bb.IsStudioSample = 0
          INNER JOIN Contract cc ON bb.ContractId = cc.ContractId AND cc.Status = 1 --AND cc.CustomerId NOT IN (8)
          AND cc.CustomerId NOT IN (20, 24)
          INNER JOIN Product dd ON cc.ProductId = dd.ProductId
          LEFT JOIN ExchangeRate ex ON bb.CustomerAtWarehouseDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo AND ex.ExchangeRateTypeId = 1 AND ex.Status = 1 AND bb.SellCurrencyId = ex.CurrencyId
          LEFT JOIN ExchangeRate ex1 ON bb.CustomerAtWarehouseDate BETWEEN ex1.EffectiveDateFrom AND ex1.EffectiveDateTo AND ex1.ExchangeRateTypeId = 1 AND ex1.Status = 1 AND 3 = ex1.CurrencyId
          LEFT JOIN ExchangeRate ex2 ON ex2.EffectiveTypeId = 0 AND ex2.ExchangeRateTypeId = 1 AND ex2.Status = 1 AND bb.SellCurrencyId = ex2.CurrencyId
          LEFT JOIN ExchangeRate ex3 ON ex3.EffectiveTypeId = 0 AND ex3.ExchangeRateTypeId = 1 AND ex3.Status = 1 AND 3 = ex3.CurrencyId
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetFutureOrderCountByVendor" type="Text">
        <commandText>
          SELECT COUNT(*) FROM Shipment As ts
          INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 13 AND b.Status = 1 AND CONVERT(datetime,CONVERT(varchar, DATEADD(d, -30, GETDATE()) , 102)) BETWEEN b.StartDate AND b.EndDate
          LEFT JOIN SplitShipment AS ss1 WITH (NOLOCK) ON ss1.ShipmentId=ts.ShipmentId AND (ts.IsVirtualSetSplit=0 AND ss1.IsVirtualSetSplit=0 AND ss1.Status = 1)
          INNER JOIN Currency AS ccy1 WITH (NOLOCK) ON ccy1.CurrencyId = ISNULL(ss1.BuyCurrencyId,ts.BuyCurrencyId)
          INNER JOIN Contract c on c.ContractId = ts.ContractId and (c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId =  @OfficeId) OR @officeid = -1)
          WHERE (ts.VendorId = @VendorId OR ss1.VendorId = @VendorId) and ts.Status = 1 AND ts.WorkflowStatusId in (1,2,4,6,7) and ts.IsMockShopSample = 0 AND ts.IsStudioSample = 0
          AND c.CustomerId NOT IN (20, 24)
          AND ts.CustomerAtWarehouseDate > b.StartDate
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetVendorNSLDocumentCount" type="Text">
        <commandText>
          SELECT dbo.fn_getVendorNSLDocCount(@VendorId) AS VendorDocCnt
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOSAdvancePaymentInstalmentAmt" type="Text">
        <commandText>
          SELECT dbo.fn_getOSAdvancePaymentInstalments(@VendorId) AS OSAdvPaymentInstalments
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOSNextClaimAmtByVendorId" type="Text">
        <commandText>
          SELECT dbo.fn_OSUKClaim(@VendorId, @OfficeId) AS OSUKClaim
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingPaymentAmtByVendorId" type="Text">
        <commandText>
          SELECT CONVERT(decimal, ISNULL(SUM(bb.TotalShippedAmt * ISNULL(ex.ExchangeRate, ex2.ExchangeRate) / ISNULL(ex1.ExchangeRate, ex3.ExchangeRate)),0)) AS OSPaymentAmt
          FROM Invoice aa INNER JOIN Shipment bb ON bb.VendorId = @VendorId AND aa.ShipmentId = bb.ShipmentId AND bb.Status = 1 AND aa.InvoiceDate IS NOT NULL and aa.APDate IS NULL and bb.WorkflowStatusId NOT IN (3,5,9) AND bb.IsMockShopSample = 0
          INNER JOIN Contract cc ON bb.ContractId = cc.ContractId AND cc.Status = 1 --AND cc.CustomerId NOT IN (8)
          INNER JOIN Product dd ON cc.ProductId = dd.ProductId
          LEFT JOIN ExchangeRate ex ON aa.InvoiceDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo AND ex.ExchangeRateTypeId = 1 AND ex.Status = 1 AND bb.SellCurrencyId = ex.CurrencyId
          LEFT JOIN ExchangeRate ex1 ON aa.InvoiceDate BETWEEN ex1.EffectiveDateFrom AND ex1.EffectiveDateTo AND ex1.ExchangeRateTypeId = 1 AND ex1.Status = 1 AND 3 = ex1.CurrencyId
          LEFT JOIN ExchangeRate ex2 ON ex2.EffectiveTypeId = 0 AND ex2.ExchangeRateTypeId = 1 AND ex2.Status = 1 AND bb.SellCurrencyId = ex2.CurrencyId
          LEFT JOIN ExchangeRate ex3 ON ex3.EffectiveTypeId = 0 AND ex3.ExchangeRateTypeId = 1 AND ex3.Status = 1 AND 3 = ex3.CurrencyId
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand >

      <dataCommand name="GetLatest10UKProductGroupByItemNo" type="Text">
        <commandText>
          SELECT TOP 10
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          , s.TermOfPurchaseId
          FROM Shipment s
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN Product p ON p.ProductId = c.ProductId
          WHERE
          s.WorkflowStatusId = 8
          and	p.ItemNo = @ItemNo
          and ISNUMERIC(LEFT(c.ContractNo,2))=0 -- UK Product Group Code is assumed to be the first two character in Contract No if they are not a number
          ORDER BY s.CustomerAtWarehouseDate DESC
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand >

      <dataCommand name="GetInvoiceByShipmentId" type="Text">
        <commandText>
          SELECT TOP 10
          s.ShipmentId, c.ContractNo, s.DeliveryNo, s.VendorId, c.ProductId, p.ItemNo, s.CustomerAtWarehouseDate, s.SellCurrencyId, s.BuyCurrencyId, s.TotalPOQty, s.TotalShippedQty,
          s.TotalShippedAmt, i.InvoiceDate, s.WorkflowStatusId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.SequenceNo, s.CustomerDestinationId, c.CustomerId,
          i.InvoiceUploadUserId, c.IsNextMfgOrder, c.IsDualSourcingOrder, s.IsUKDiscount, s.WithOPRFabric,
          c.TradingAgencyid, c.ProductTeamId, i.SupplierInvoiceNo, s.TotalShippedSupplierGmtAmt, i.PurchaseScanDate,
          i.PurchaseScanBy, s.EditLock, s.IsMockShopSample, s.IsPressSample, s.IsStudioSample, c.OfficeId, s.PaymentTermId, i.ARAmt, i.ARDate, i.ARRefNo, i.APAmt, i.APDate, i.APRefNo,
          i.SalesScanDate, i.eInvoiceBatchId, i.IsSelfBilledOrder, CASE WHEN s.IsVirtualSetSplit = 0 THEN s.SplitCount ELSE 0 END AS SplitCount,
          SeasonId, s.PaymentLock, s.WithQCCharge, c.IsLDPOrder,
          s.TotalOrderQty, s.TotalOrderAmt, s.TotalShippedNetFOBAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount,
          i.NSLCommissionSettlementDate, i.NSLCommissionSettlementAmt, i.NSLCommissionRefNo, i.NSLCommissionAmt,
          s.NSLCommissionPercent, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome,
          QACommissionAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100,2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          VendorPaymentDiscountAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
          ELSE (SELECT SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2))
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END,
          LabTestIncomeAmt = CASE WHEN s.SplitCount=0 OR s.IsVirtualSetSplit=1
          THEN s.TotalShippedQty * s.LabTestIncome
          ELSE (SELECT SUM(TotalShippedQty * LabTestIncome)
          FROM SplitShipment
          WHERE ShipmentId=s.ShipmentId AND isVirtualSetSplit=0)
          END
          ,s.RejectPaymentReasonId, s.DMSWorkflowStatusId
          --,i.PiecesPerDeliveryUnit
          , i.ShippingDocReceiptDate, i.IsLCPaymentChecked, i.IsUploadDMSDocument
          , s.ShipmentMethodId, s.SpecialOrderTypeId, s.IsChinaGBTestRequired
          , s.TermOfPurchaseId
          FROM Shipment s
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN Product p ON p.ProductId = c.ProductId
          WHERE
          s.ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand >

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ContractShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentProductApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentProductByItemNo" type="Text">
        <commandText>
          <![CDATA[
          SELECT
              p.ProductId,
              ParentProductId = p.ParentId,
              p.ItemNo,
              ItemDesc = ISNULL(p.ShortDesc, pm.ShortDesc),
              p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5,
              c.DeptId,
              DepartmentCode = pd.Code,
              DepartmentName = pd.Description,
              c.ProductTeamId,
              ProductTeamCode = pt.Code,
              ProductTeamName = pt.Description,
              CASE WHEN s.VendorId = 8549 THEN 9111  WHEN s.VendorId = 6112 THEN 12909 ELSE s.VendorId END AS VendorId,
              VendorName = (SELECT Name FROM nslindustry..Vendor WITH (NOLOCK) WHERE VendorId = CASE WHEN s.VendorId = 8549 THEN 9111 WHEN s.VendorId = 6112 THEN 12909 ELSE s.VendorId END),
              c.OfficeId,
              o.OfficeCode, 
              OfficeName = RTRIM(REPLACE(o.Description,'Office','')),
              c.ContractId,
              s.ShipmentId,
              DeliveryDate = ISNULL(i.InvoiceDate,s.SupplierAtWarehouseDate),
              CASE WHEN s.OriginalTermOfPurchaseId NOT IN (1, 4) THEN 2 ELSE 1 END AS TermOfPurchaseId,
              --ISNULL(NULLIF(s.SalesForecastSpecialGroupId, -1), c.OfficeId) AS HandlingOfficeId
              c.OfficeId AS HandlingOfficeId
          FROM
                Product AS p WITH (NOLOCK)
                LEFT OUTER JOIN Product AS pm WITH (NOLOCK) ON p.ParentId = pm.ProductId AND pm.Status = 1
                LEFT OUTER JOIN Contract AS c WITH (NOLOCK) ON c.ProductId = p.ProductId AND c.Status=1 
                LEFT OUTER JOIN Shipment AS s WITH (NOLOCK) ON s.ContractId = c.ContractId AND s.Status = 1 AND s.CustomerDestinationId NOT IN (4,5)
                LEFT OUTER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
                LEFT OUTER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId=c.OfficeId AND o.Status=1
                LEFT OUTER JOIN nsldb..OfficeStructure pd WITH (NOLOCK) ON pd.OfficeStructureId=c.DeptId AND pd.status=1
                LEFT OUTER JOIN nsldb..OfficeStructure pt WITH (NOLOCK) ON pt.OfficeStructureId=c.ProductTeamId AND pt.Status=1 --AND pt.Description NOT LIKE '%(DO NOT USE)%'
                WHERE p.Status = 1 AND (s.WorkflowStatusId = 8 OR p.ItemNo = '809348')
                AND p.ItemNo = @ItemNo
                AND (c.CustomerId IN (27,28) OR EXISTS(SELECT * FROM Customer WHERE Status = 1 AND c.CustomerId = CustomerId )) --AND IsSelfBilling = 1 
                AND (@ContractNo IS NULL OR c.ContractNo = @ContractNo)
                AND (s.VendorId = @VendorId OR @VendorId = -1)
                AND s.VendorId NOT IN (1572, 6144, 4647)
                ORDER BY DeliveryDate DESC, s.ShipmentId DESC
          ]]>
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetShipmentProductByVendorId" type="Text">
        <commandText>
          <![CDATA[
        SELECT TOP 1
        p.ProductId,
        ParentProductId = p.ParentId,
        p.ItemNo,
        ItemDesc = ISNULL(p.ShortDesc, pm.ShortDesc),
        p.Desc1, p.Desc2, p.Desc3, p.Desc4, p.Desc5,
        c.DeptId,
        DepartmentCode = pd.Code,
        DepartmentName = pd.Description,
        c.ProductTeamId,
        ProductTeamCode = pt.Code,
        ProductTeamName = pt.Description,
        CASE WHEN s.VendorId = 8549 THEN 9111 WHEN s.VendorId = 6112 THEN 12909 ELSE s.VendorId END,
        VendorName = (SELECT Name FROM nslindustry..Vendor WITH (NOLOCK) WHERE VendorId = CASE WHEN s.VendorId = 8549 THEN 9111 WHEN s.VendorId = 6112 THEN 12909 ELSE s.VendorId END),
        c.OfficeId,
        o.OfficeCode,
        OfficeName = RTRIM(REPLACE(o.Description,'Office','')),
        c.ContractId,
        s.ShipmentId,
        DeliveryDate = ISNULL(i.InvoiceDate,s.SupplierAtWarehouseDate),
        CASE WHEN s.OriginalTermOfPurchaseId NOT IN (1, 4) THEN 2 ELSE 1 END AS TermOfPurchaseId,
        --ISNULL(NULLIF(s.SalesForecastSpecialGroupId, -1), c.OfficeId) AS HandlingOfficeId
        c.OfficeId AS HandlingOfficeId
        FROM
        Product AS p WITH (NOLOCK)
        LEFT OUTER JOIN Product AS pm WITH (NOLOCK) ON p.ParentId = pm.ProductId AND pm.Status = 1
        LEFT OUTER JOIN Contract AS c WITH (NOLOCK) ON c.ProductId = p.ProductId AND c.Status=1
        LEFT OUTER JOIN Shipment AS s WITH (NOLOCK) ON s.ContractId = c.ContractId AND s.Status = 1
        LEFT OUTER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
        LEFT OUTER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId=c.OfficeId AND o.Status=1
        LEFT OUTER JOIN nsldb..OfficeStructure pd WITH (NOLOCK) ON pd.OfficeStructureId=c.DeptId AND pd.status=1
        LEFT OUTER JOIN nsldb..OfficeStructure pt WITH (NOLOCK) ON pt.OfficeStructureId=c.ProductTeamId AND pt.status=1
        WHERE p.Status = 1
        AND s.VendorId = @VendorId
        ORDER BY
        DeliveryDate DESC, s.ShipmentId DESC
        ]]>
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentProduct" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetShipmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM ShipmentDetail
          WHERE ShipmentDetailId = @ShipmentDetailId
        </commandText>
        <parameters>
          <param key="ShipmentDetailId" name="@ShipmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetShipmentDetailByShipmentId" type="Text">
        <commandText>
          SELECT a.* FROM ShipmentDetail a
          INNER JOIN SizeOption b ON a.SizeOptionId = b.SizeOptionId
          WHERE a.ShipmentId = @ShipmentId AND a.Status = 1 ORDER BY a.Colour, b.SizeOptionNo ASC
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SplitShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSplitShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM SplitShipment
          WHERE SplitShipmentId = @SplitShipmentId
        </commandText>
        <parameters>
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSplitShipmentByShipmentId" type="Text">
        <commandText>
          SELECT * FROM SplitShipment
          WHERE ShipmentId = @ShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSplitShipmentByPONo" type="Text">
        <commandText>
          SELECT ss.* FROM SplitShipment ss
          INNER JOIN Shipment s ON ss.ShipmentId = s.ShipmentId AND s.Status = 1
          INNER JOIN Contract c ON s.ContractId = c.ContractId AND c.Status = 1
          WHERE
          c.ContractNo = @ContractNo
          AND ss.SplitSuffix = @SplitSuffix
          AND s.DeliveryNo = @DeliveryNo
          AND ss.Status = 1
        </commandText>
        <parameters>
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="SplitSuffix" name="@SplitSuffix" type="varchar" direction="Input" />
          <param key="DeliveryNo" name="@DeliveryNo" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SplitShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SplitShipmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSplitShipmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM SplitShipmentDetail
          WHERE SplitShipmentDetailId = @SplitShipmentDetailId
        </commandText>
        <parameters>
          <param key="SplitShipmentDetailId" name="@SplitShipmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSplitShipmentDetailBySplitShipmentId" type="Text">
        <commandText>
          SELECT a.* FROM SplitShipmentDetail a
          INNER JOIN SizeOption b ON a.SizeOptionId = b.SizeOptionId
          WHERE a.SplitShipmentId = @SplitShipmentId AND a.Status = 1
          ORDER BY b.SizeOptionNo
        </commandText>
        <parameters>
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUpdatableSplitShipmentDetailByShipmentId" type="Text">
        <commandText>
          SELECT a.* FROM SplitShipmentDetail a
          INNER JOIN SizeOption b ON a.SizeOptionId = b.SizeOptionId AND a.Status = 1
          INNER JOIN SplitShipment c ON c.SplitShipmentId = a.SplitShipmentId AND c.Status = 1 AND c.IsILSQtyUploadAllowed = 1
          WHERE c.ShipmentId = @ShipmentId
          ORDER BY b.SizeOptionNo
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SplitShipmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="OtherCostApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOtherCostByKey" type="Text">
        <commandText>
          SELECT * FROM OtherCost
          WHERE OtherCostId = @OtherCostId
          AND ShipmentTypeId = 1
        </commandText>
        <parameters>
          <param key="OtherCostId" name="@OtherCostId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOtherCostByShipmentDetailId" type="Text">
        <commandText>
          SELECT * FROM OtherCost AS oc
          INNER JOIN OtherCostType AS oct ON oct.OtherCostTypeId=oc.OtherCostTypeId
          WHERE oc.ShipmentTypeId = 1 AND oc.Status = 1 AND oct.Status=1
          AND oc.ShipmentDetailId = @ShipmentDetailId
        </commandText>
        <parameters>
          <param key="ShipmentDetailId" name="@ShipmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetSplitOtherCostByKey" type="Text">
        <commandText>
          SELECT * FROM OtherCost
          WHERE OtherCostId = @OtherCostId
          AND ShipmentTypeId = 2
        </commandText>
        <parameters>
          <param key="OtherCostId" name="@OtherCostId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetSplitOtherCostBySplitShipmentDetailId" type="Text">
        <commandText>
          SELECT * FROM OtherCost
          WHERE ShipmentDetailId = @SplitShipmentDetailId
          AND ShipmentTypeId = 2 AND Status = 1
        </commandText>
        <parameters>
          <param key="SplitShipmentDetailId" name="@SplitShipmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OtherCost" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="WorkflowStatusApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetWorkflowStatusList" type="Text">
        <commandText>
          SELECT RecordId, WorkflowStatusId, Description, RecordTypeId FROM WorkflowStatus WHERE RecordTypeId = @RecordTypeId
        </commandText>
        <parameters>
          <param key="RecordTypeId" name="@RecordTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetWorkflowStatusById" type="Text">
        <commandText>
          SELECT RecordId, WorkflowStatusId, Description, RecordTypeId FROM WorkflowStatus
          WHERE RecordTypeId = @RecordTypeId AND WorkflowStatusId = @WorkflowStatusId
        </commandText>
        <parameters>
          <param key="RecordTypeId" name="@RecordTypeId" type="Int" direction="Input" />
          <param key="WorkflowStatusId" name="@WorkflowStatusId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="WorkflowStatus" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ILSManifestDetailShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetILSManifestDetailShipmentList" type="Text">
        <commandText>
          SELECT     im.VoyageNo, im.VesselName, im.ContainerNo, ior.ContractNo, ior.DeliveryNo, p.ItemNo, s.VendorId, c.PackingMethodId, ipl.InWarehouseDate,
          im.TotalVolume, ipl.TotalCartons, s.TotalShippedQty, i.BookingSONo, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceUploadUserId, s.ShipmentId, imd.ContainerPosition,
          s.CustomerDestinationId, c.CustomerId, cd.DestinationCode
          FROM         ILSManifestDetail imd INNER JOIN
          ILSManifest im ON im.ContainerNo = imd.ContainerNo LEFT OUTER JOIN
          ILSOrderRef ior ON imd.OrderRefId = ior.OrderRefId LEFT OUTER JOIN
          Shipment  s ON ior.ShipmentId = s.ShipmentId LEFT OUTER JOIN
          Contract  c ON s.ContractId = c.ContractId LEFT OUTER JOIN
          Product  p ON c.ProductId = p.ProductId LEFT OUTER JOIN
          ILSPackingList  ipl ON ipl.OrderRefId = ior.OrderRefId LEFT OUTER JOIN
          Invoice  i ON i.ShipmentId = s.ShipmentId LEFT OUTER JOIN
          CustomerDestination cd ON s.CustomerDestinationId = cd.CustomerDestinationId
          WHERE imd.ContainerNo = @ContainerNo
          ORDER BY c.ContractNo, s.DeliveryNo
        </commandText>
        <parameters>
          <param key="ContainerNo" name="@ContainerNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ILSManifestDetailShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="FutureOrderApt" populateCommands="false">
    <selectCommand>
    </selectCommand>
  </dataSetAdapter>

</dataOperations>
