<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">

  <dataSetAdapter name="SunInterfaceLogApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetMaxSunInterfaceLogId" type="Text">
        <commandText>
          SELECT MAX(SunInterfaceLogId) FROM SunInterfaceLog
        </commandText>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetMaxSunInterfaceLogId" type="Text">
        <commandText>
          SELECT MAX(SunInterfaceLogId) FROM SunInterfaceLog
        </commandText>
      </dataCommand>
    </selectCommand>

    <dataCommand name="GetSunInterfaceLogByKey" type="Text">
      <commandText>
        SELECT * FROM SunInterfaceLog WHERE SunInterfaceLogId = @SunInterfaceLogId
      </commandText>
      <parameters>
        <param key="SunInterfaceLogId" name="@SunInterfaceLogId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLog" type="Text">
      <commandText>
        SELECT * FROM SunInterfaceLog WHERE IsReversalEntry = 1
        AND SunInterfaceTypeId = @SunInterfaceTypeId AND OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND CustomerDestinationId @CustomerDestinationIdList
        AND ShipmentId NOT IN (SELECT * FROM SunHoiZeroMarginShipment)
        --AND ShipmentId IN (1274758)
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLogHistory" type="Text">
      <commandText>
        <![CDATA[
          SELECT b.* FROM SunInterfaceLog a INNER JOIN SunInterfaceLog b ON a.SunInterfaceLogId = @SunInterfaceLogId and a.SunInterfaceTypeId = b.SunInterfaceTypeId
          AND a.ShipmentId = b.ShipmentId AND a.SplitShipmentId = b.SplitShipmentId AND b.CategoryId IN (1,4,5,3)
          ORDER BY QueueId, 1
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceLogId" name="@SunInterfaceLogId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLogHistoryForUKClaimRecharge" type="Text">
      <commandText>
        <![CDATA[
          SELECT b.* FROM SunInterfaceLog a INNER JOIN SunInterfaceLog b ON a.SunInterfaceLogId = @SunInterfaceLogId and a.SunInterfaceTypeId = b.SunInterfaceTypeId
          AND a.RefNo = b.RefNo AND b.CategoryId IN (1,4,5,3)
          ORDER BY QueueId, 1
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceLogId" name="@SunInterfaceLogId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLogHistoryByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT * FROM SunInterfaceLog 
        WHERE SunInterfaceTypeId = @SunInterfaceTypeId
        AND ShipmentId = @ShipmentId
        AND SplitShipmentId = @SplitShipmentId
        AND SunInterfaceLogId <> @SunInterfaceLogId
        ORDER BY SunInterfaceLogId DESC
        ]]>
      </commandText>
      <parameters>
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="SunInterfaceLogId" name="@SunInterfaceLogId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetInterfacedLogByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT TOP 1 * FROM SunInterfaceLog 
        WHERE SunInterfaceTypeId = @SunInterfaceTypeId
        AND ShipmentId = @ShipmentId
        AND SplitShipmentId = @SplitShipmentId
        AND IsReversalEntry = 0 AND CategoryId <> 2 
        ORDER BY SunInterfaceLogId DESC
        ]]>
      </commandText>
      <parameters>
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetInterfacedPurchaseBySupplierInvoiceNo" type="Text">
      <commandText>
        <![CDATA[
        SELECT * FROM SunInterfaceLog 
        WHERE SunInterfaceTypeId = 3
        AND SupplierInvoiceNo = @SupplierInvoiceNo
        --AND IsReversalEntry = 0 AND CategoryId NOT IN (2, 5)
        AND IsReversalEntry = 0 AND CategoryId NOT IN (2)
        ORDER BY SunInterfaceLogId DESC
        ]]>
      </commandText>
      <parameters>
        <param key="SupplierInvoiceNo" name="@SupplierInvoiceNo" type="varchar" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetInitialInterfacedLogByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT TOP 1 * FROM SunInterfaceLog 
        WHERE SunInterfaceTypeId = @SunInterfaceTypeId
        AND ShipmentId = @ShipmentId
        AND SplitShipmentId = @SplitShipmentId
        AND IsReversalEntry = 0 AND CategoryId <> 2 
        ORDER BY SunInterfaceLogId ASC
        ]]>
      </commandText>
      <parameters>
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLogByShipmentId" type="Text">
      <commandText>
        SELECT * FROM SunInterfaceLog WHERE IsReversalEntry = 1
        AND SunInterfaceTypeId = @SunInterfaceTypeId
        AND ShipmentId = @ShipmentId
        AND SplitShipmentId = @SplitShipmentId
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversalLogListByShipmentId" type="Text">
      <commandText>
        SELECT * FROM SunInterfaceLog WHERE CategoryId = 5
        AND (@SunInterfaceTypeId = -1 OR SunInterfaceTypeId = @SunInterfaceTypeId)
        AND ShipmentId = @ShipmentId
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetSunInterfaceLogByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT * FROM SunInterfaceLog
        WHERE SunInterfaceTypeId = @SunInterfaceTypeId AND ShipmentId = @ShipmentId
        AND SplitShipmentId = @SplitShipmentId
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDCNoteNoByQueueId" type="Text">
      <commandText>
        <![CDATA[
        SELECT DISTINCT c.DCNoteNo FROM SunInterfaceLog a INNER JOIN MockShopDCNoteShipment b ON a.ShipmentId = b.ShipmentId
        AND a.QueueId = @QueueId
        INNER JOIN MockShopDCNote c ON b.DCNoteId = c.DCNoteId 
        ]]>
      </commandText>
      <parameters>
        <param key="QueueId" name="@QueueId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetConsolidatedLog" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId, ShipmentId, SplitShipmentId, FiscalYear,
               Period, TransactionDate, ContractNo, NSLPONo, DeliveryNo, OfficeId, DeptId, ProductTeamId, ProductId, SeasonId,
               VendorId, CustomerId, TermOfPurchaseId, CustomerDestinationId, TradingAgencyId, CurrencyId, PaymentTermId, 
               CountryOfOriginId, DesignSourceId, WithOPRFabric, InvoicePrefix, InvoiceSeq, InvoiceYear, SequenceNo, InvoiceUploadDate, 
               BaseAmt, OtherAmt, Qty, PiecesPerPack, PackingUnitId, SupplierInvoiceNo, RefNo, DCNoteNo, BaseTax, OtherTax, 
               SetSplitCount, QACommissionPercent, VendorPaymentDiscountPercent, LabTestIncome, UKSupplierCode, SalesCommission, TotalShippedAmt, TotalShippedNetFOBAmt,
               TotalShippedSupplierGmtAmt, UTInputVATAmt, UTOutputVATAmt, UTImportDuty, UTImportDutyInBaseCurrency, UTTotalShippedAmt, UTTotalShippedNetFOBAmt, 
               UTTotalShippedSupplierGmtAmt, UTSalesCommission, IsNextMfgOrder, IsPOIssueToNextMfg, IsMockShopSample, IsStudioSample, IsSelfBilledOrder, @CategoryId AS CategoryId, FullBaseAmt, FullOtherAmt, 
               FullBaseTax, FullOtherTax, FullQty, IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn 
        INTO #SunInterfaceLog               
        FROM SunInterfaceLog WHERE CategoryId = 4 AND SunInterfaceTypeId = @SunInterfaceTypeId
        AND FiscalYear = @FiscalYear AND Period = @Period AND OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND TermOfPurchaseId @TermOfPurchaseIdList
        AND TradingAgencyId @TradingAgencyIdList
        AND CustomerDestinationId @CustomerDestinationIdList
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualSales" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedAmtInBaseCurrency AS BaseAmt,
        a.TotalShippedAmt AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, 
        --CASE WHEN b.ContractId IN (814526, 814527) THEN 'D63760' ELSE a.UKSupplierCode END AS UKSupplierCode, -- FE8428723, FE8428710, overrided as bulk duty orders. 2020-12-07
        a.UKSupplierCode,
        a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedAmtInBaseCurrency AS FullBaseAmt, 
        a.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsMockShopSample = 0 AND a.IsStudioSample = 0 --and a.shipmentid = 984509
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        --and b.shipmentid in (select shipmentid from P12_LK_duplicates)
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        
        --AND a.Shipmentid IN (1283316,1283524,1281047)
        INNER JOIN Contract c ON b.ContractId = c.ContractId 
  		  AND NOT ((c.CustomerId IN (20, 24) OR 
		         (c.CustomerId = 27 AND NOT EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = CASE WHEN b.ContractId IN (814526, 814527) THEN 'D63760' ELSE a.UKSupplierCode END AND Status = 1))) 
             AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualMockShopSales" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedAmtInBaseCurrency AS BaseAmt,
        a.TotalShippedAmt AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        dc.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedAmtInBaseCurrency AS FullBaseAmt, 
        a.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsMockShopSample = 1
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN MockShopDCNoteShipment dcs ON dcs.ShipmentId = b.ShipmentId
        INNER JOIN MockShopDCNote dc ON dc.DCNoteId = dcs.DCNoteId
        ORDER BY dc.DCNoteNo
        
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualStudioSampleSales" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedAmtInBaseCurrency AS BaseAmt,
        a.TotalShippedAmt AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        dc.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedAmtInBaseCurrency AS FullBaseAmt, 
        a.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsStudioSample = 1
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN StudioDCNoteShipment dcs ON dcs.ShipmentId = b.ShipmentId
        INNER JOIN StudioDCNote dc ON dc.DCNoteId = dcs.DCNoteId
        ORDER BY dc.DCNoteNo
        
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualSales" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedAmtInBaseCurrency AS BaseAmt,
        a.TotalShippedAmt AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample, 
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedAmtInBaseCurrency AS FullBaseAmt,
        a.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId 
  		  AND NOT ((c.CustomerId IN (20, 24) OR 
		         (c.CustomerId = 27 AND NOT EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = c.UKSupplierCode AND Status = 1))) 
             AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)             
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --and a.shipmentid in (1168538,1168539,1168426,1169543,1169544)

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedSales" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedAmt * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedAmt AS OtherAmt, b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        CASE WHEN a.ARDate IS NULL THEN 'N' ELSE 'Y' END AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedAmt * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        b.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                --AND s.ShipmentId = 1112423
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 
  		  AND NOT ((c.CustomerId IN (20, 24) OR 
		         (c.CustomerId = 27 AND NOT EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = c.UKSupplierCode AND Status = 1))) 
             AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseSalesByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedAmt ELSE b.TotalShippedAmt END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedAmt ELSE b.TotalShippedAmt END AS OtherAmt, 
        b.TotalShippedQty AS Qty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CASE WHEN b.IsMockShopSample = 1 THEN 'MS' WHEN b.IsStudioSample = 1 THEN 'SS' ELSE '' END AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedAmt ELSE b.TotalShippedAmt END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedAmt ELSE b.TotalShippedAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 
  		  AND NOT ((c.CustomerId IN (20, 24) OR 
		         (c.CustomerId = 27 AND NOT EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = c.UKSupplierCode AND Status = 1))) 
             AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualDevelopmentCost" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        3 AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.03 ELSE 0 END AS BaseAmt,
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.03 ELSE 0 END AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.03 ELSE 0 END AS FullBaseAmt, 
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.03 ELSE 0 END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.OfficeId = 3
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedDevelopmentCost" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        3 AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.03 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.03 ELSE 0 END AS OtherAmt, b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.03 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.03 ELSE 0 END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.OfficeId = 3
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualProvisionForFabricLiabilities" type="Text">
      <commandText>
        <![CDATA[
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        3 AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.02 ELSE 0 END AS BaseAmt,
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.02 ELSE 0 END AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.02 ELSE 0 END AS FullBaseAmt, 
        a.TotalShippedQty * CASE WHEN a.OfficeId = 3 THEN 0.02 ELSE 0 END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.OfficeId = 3
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        */

        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        3 AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, 
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, 
	      SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, 
        SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.OfficeId = 3
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON i.shipmentId = b.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON b.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 22
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder, 
	      b.OriginalTermOfPurchaseId
        */  
  
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        3 AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, 
        ROUND(SUM( 0.02 * e.ShippedQty ), 2) AS BaseAmt, 
	      SUM( 0.02 * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM( 0.02 * e.ShippedQty ), 2) AS FullBaseAmt, 
        SUM( 0.02 * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.OfficeId = 3
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON i.shipmentId = b.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON b.ShipmentId = e.ShipmentId
        --INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 22
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        b.SellCurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder, 
	      b.OriginalTermOfPurchaseId

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedProvisionForFabricLiabilities" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        3 AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END AS OtherAmt, b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.OfficeId = 3
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseProvisionForFabricLiabilitiesByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END AS OtherAmt, 
        b.TotalShippedQty AS Qty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CASE WHEN b.IsMockShopSample = 1 THEN 'MS' WHEN b.IsStudioSample = 1 THEN 'SS' ELSE '' END AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        b.TotalShippedQty * CASE WHEN c.OfficeId = 3 THEN 0.02 ELSE 0 END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualSalesCommission" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.SalesCommissionInBaseCurrency AS BaseAmt, a.SalesCommission AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome,
        --CASE WHEN b.ContractId IN (814526, 814527) THEN 'D63760' ELSE a.UKSupplierCode END AS UKSupplierCode, -- FE8428723, FE8428710, overrided as bulk duty orders. 2020-12-07
        a.UKSupplierCode,
        a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        a.SalesCommissionInBaseCurrency AS FullBaseAmt, a.SalesCommission AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsMockShopSample = 0 AND a.IsStudioSample = 0 --and a.shipmentid = 984509
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        --AND a.Shipmentid IN (1283316,1283524,1281047)

        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.CustomerId NOT IN (3, 4, 11)
        --AND NOT (c.CustomerId = 8 AND c.OfficeId IN (3, 7, 8, 14, 9, 18))
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualMockShopSalesCommission" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.SalesCommissionInBaseCurrency AS BaseAmt, a.SalesCommission AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        dc.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        a.SalesCommissionInBaseCurrency AS FullBaseAmt, a.SalesCommission AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsMockShopSample = 1
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.CustomerId NOT IN (3, 4, 11)
        AND NOT (c.CustomerId = 8 AND c.OfficeId IN (3, 7, 8, 14))
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN MockShopDCNoteShipment dcs ON dcs.ShipmentId = b.ShipmentId
        INNER JOIN MockShopDCNote dc ON dc.DCNoteId = dcs.DCNoteId
        ORDER BY dc.DCNoteNo

        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualStudioSampleSalesCommission" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.SalesCommissionInBaseCurrency AS BaseAmt, a.SalesCommission AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        dc.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        a.SalesCommissionInBaseCurrency AS FullBaseAmt, a.SalesCommission AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND a.IsStudioSample = 1
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.CustomerId NOT IN (3, 4, 11)
        AND NOT (c.CustomerId = 8 AND c.OfficeId IN (3, 7, 8, 14))
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN StudioDCNoteShipment dcs ON dcs.ShipmentId = b.ShipmentId
        INNER JOIN StudioDCNote dc ON dc.DCNoteId = dcs.DCNoteId
        ORDER BY dc.DCNoteNo

        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>


    <dataCommand name="GetAccrualSalesCommission" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, a.SalesCommissionInBaseCurrency AS BaseAmt, a.SalesCommission AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        a.SalesCommissionInBaseCurrency AS FullBaseAmt, a.SalesCommission AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        AND NOT (a.CustomerId = 8 AND a.OfficeId IN (3, 8, 14))
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --and a.shipmentid in (1168538,1168539,1168426,1169543,1169544)

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>


    <dataCommand name="GetRealizedSalesCommission" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(a.NSLCommissionAmt * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        a.NSLCommissionAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(a.NSLCommissionAmt * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, a.NSLCommissionAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                --AND s.ShipmentId = 1112423
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId) 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.CustomerId NOT IN (3, 4, 11)
        AND NOT (c.CustomerId = 8 AND c.OfficeId IN (3, 8, 14))
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>


    <dataCommand name="GetReverseSalesCommissionByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderNSLCommissionAmt ELSE a.NSLCommissionAmt END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderNSLCommissionAmt ELSE a.NSLCommissionAmt END AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CASE WHEN b.IsMockShopSample = 1 THEN 'MS' WHEN b.IsStudioSample = 1 THEN 'SS' ELSE '' END AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderNSLCommissionAmt ELSE a.NSLCommissionAmt END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderNSLCommissionAmt ELSE a.NSLCommissionAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.CustomerId NOT IN (3, 4, 11)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualPurchase" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.BuyCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmtInBaseCurrency ELSE a.TotalShippedSupplierGmtAmtInBaseCurrency END AS BaseAmt,
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmt ELSE a.TotalShippedSupplierGmtAmt END AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample, 
        a.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmtInBaseCurrency ELSE a.TotalShippedSupplierGmtAmtInBaseCurrency END AS FullBaseAmt, 
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmt ELSE a.TotalShippedSupplierGmtAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList 
        --AND a.Shipmentid IN (1283316,1283524,1281047)
        
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId 
        --AND d.ItemNo IN ('603109','A04207','A00455','A00456','A00462','A00769')
        AND d.ItemNo NOT IN (SELECT ItemNo FROM NSLedMissingRangePlanItemNo)
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.ExtractedDate IS NULL AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        
        UNION ALL

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, ss.SplitShipmentId AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo,
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, bs.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ss.BuyCurrencyId AS CurrencyId, ss.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmtInBaseCurrency ELSE ss.TotalShippedSupplierGmtAmtInBaseCurrency END AS BaseAmt,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmt ELSE ss.TotalShippedSupplierGmtAmt END AS OtherAmt,
        ss.TotalShippedQty AS Qty,
        ss.PiecesPerPack, ss.PackingUnitId, ss.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, ss.QACommissionPercent,
        ss.VendorPaymentDiscountPercent, ss.LabTestIncome, c.UKSupplierCode,
        ss.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ss.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        ss.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        ss.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        s.UTImportDutyInBaseCurrency AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(ss.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(ss.TotalShippedNetFOBAmt * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(ss.TotalShippedSupplierGmtAmt * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(ss.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        s.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmtInBaseCurrency ELSE ss.TotalShippedSupplierGmtAmtInBaseCurrency END AS FullBaseAmt, 
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmt ELSE ss.TotalShippedSupplierGmtAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, ss.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND s.FiscalYear = @FiscalYear AND s.Period = @Period AND s.IsAccrual = 0
        AND s.TermOfPurchaseId @TermOfPurchaseIdList
        AND s.TradingAgencyId @TradingAgencyIdList
        AND s.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN CutOffSplitSales ss ON s.ShipmentId = ss.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1
        
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN SplitShipment bs ON ss.SplitShipmentId = bs.SplitShipmentId AND ss.ShipmentId = bs.ShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.ExtractedDate IS NULL AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = bs.SplitShipmentId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE (c.SetSplitCount > 0 AND bs.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        ) r
        

        SELECT * FROM #SunInterfaceLog ORDER BY SupplierInvoiceNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualPurchase" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.BuyCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmtInBaseCurrency ELSE a.TotalShippedSupplierGmtAmtInBaseCurrency END AS BaseAmt,
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmt ELSE a.TotalShippedSupplierGmtAmt END AS OtherAmt,
        a.TotalShippedQty AS Qty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample, 
        a.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmtInBaseCurrency ELSE a.TotalShippedSupplierGmtAmtInBaseCurrency END AS FullBaseAmt, 
        CASE WHEN a.TradingAgencyId = 2 AND a.TermOfPurchaseId <> 1 THEN a.TotalShippedAmt ELSE a.TotalShippedSupplierGmtAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        --and a.shipmentid in (1168538,1168539,1168426,1169543,1169544)

        UNION ALL

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, ss.SplitShipmentId AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo,
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, bs.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ss.BuyCurrencyId AS CurrencyId, ss.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmtInBaseCurrency ELSE ss.TotalShippedSupplierGmtAmtInBaseCurrency END AS BaseAmt,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmt ELSE ss.TotalShippedSupplierGmtAmt END AS OtherAmt,
        ss.TotalShippedQty AS Qty,
        ss.PiecesPerPack, ss.PackingUnitId, ss.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, ss.QACommissionPercent,
        ss.VendorPaymentDiscountPercent, ss.LabTestIncome, c.UKSupplierCode,
        ss.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ss.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        ss.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        ss.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        s.UTInputVATAmt,
        s.UTOutputVATAmt,
        s.UTImportDuty,
        s.UTImportDutyInBaseCurrency AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(ss.TotalShippedAmt * w.ExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(ss.TotalShippedNetFOBAmt * v.ExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(ss.TotalShippedSupplierGmtAmt * v.ExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(ss.TotalShippedAmt * b.NSLCommissionPercent * w.ExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        s.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmtInBaseCurrency ELSE ss.TotalShippedSupplierGmtAmtInBaseCurrency END AS FullBaseAmt, 
        CASE WHEN s.TradingAgencyId = 2 AND s.TermOfPurchaseId <> 1 THEN ss.TotalShippedAmt ELSE ss.TotalShippedSupplierGmtAmt END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, ss.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND s.FiscalYear = @FiscalYear AND s.Period = @Period AND s.IsAccrual = 1
        AND s.TermOfPurchaseId @TermOfPurchaseIdList
        AND s.TradingAgencyId @TradingAgencyIdList
        AND s.CustomerDestinationId @CustomerDestinationIdList  
        INNER JOIN CutOffSplitSales ss ON s.ShipmentId = ss.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN SplitShipment bs ON ss.SplitShipmentId = bs.SplitShipmentId AND ss.ShipmentId = bs.ShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND ISNULL(s.ActualAtWarehouseDate, s.ILSActualAtWarehouseDate) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate w ON w.CurrencyId = s.SellCurrencyId AND w.ExchangeRateTypeId = 1 AND ISNULL(s.ActualAtWarehouseDate, s.ILSActualAtWarehouseDate) BETWEEN w.EffectiveDateFrom AND w.EffectiveDateTo
        LEFT JOIN ExchangeRate v ON v.CurrencyId = ss.BuyCurrencyId AND v.ExchangeRateTypeId = 1 AND ISNULL(s.ActualAtWarehouseDate, s.ILSActualAtWarehouseDate) BETWEEN v.EffectiveDateFrom AND v.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(s.ActualAtWarehouseDate, s.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND ISNULL(s.ActualAtWarehouseDate, s.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE (c.SetSplitCount > 0 AND bs.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)) r
        
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedPurchase" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog 
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                --AND s.ShipmentId = 1112423
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.ExtractedDate IS NULL AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        
        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, ss.SplitShipmentId AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo, 
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, bs.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        bs.BuyCurrencyId AS CurrencyId, bs.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN bs.TotalShippedAmt ELSE bs.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN bs.TotalShippedAmt ELSE bs.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        bs.TotalShippedQty AS Qty,
        bs.PiecesPerPack, bs.PackingUnitId, bs.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, bs.QACommissionPercent,
        bs.VendorPaymentDiscountPercent, bs.LabTestIncome, c.UKSupplierCode, 
        bs.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(bs.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN bs.TotalShippedAmt ELSE bs.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN bs.TotalShippedAmt ELSE bs.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, bs.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN CutOffSplitSales ss ON s.ShipmentId = ss.ShipmentId
        --AND NOT EXISTS(SELECT SunInterfaceLogId FROM SunInterfaceLog WHERE SunInterfaceTypeId = @SunInterfaceTypeId AND CategoryId <> 2 AND ShipmentId = a.ShipmentId AND SplitShipmentId = ss.SplitShipmentId)
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN SplitShipment bs ON ss.SplitShipmentId = bs.SplitShipmentId AND ss.ShipmentId = bs.ShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.ExtractedDate IS NULL AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = bs.SplitShipmentId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        WHERE (c.SetSplitCount > 0 AND bs.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)
        AND NOT EXISTS(SELECT * FROM SunHoiZeroMarginShipment WHERE ShipmentId = a.ShipmentId)
        ) r
        
        
        SELECT * FROM #SunInterfaceLog ORDER BY SupplierInvoiceNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualTemporaryPayment" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog 
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS BaseAmt,
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ISNULL(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS FullBaseAmt, 
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
                                 AND c.TradingAgencyId @TradingAgencyIdList AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND x.BudgetYear = @FiscalYear AND x.Period = @Period
        INNER JOIN TemporaryPayment e ON e.FiscalYear = @FiscalYear AND e.Period = @Period AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        
        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, s.SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo + s.SplitSuffix AS ContractNo, c.NSLPONo + s.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, s.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        s.BuyCurrencyId AS CurrencyId, s.PaymentTermId, s.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS BaseAmt,
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        s.TotalShippedQty AS Qty,
        s.PiecesPerPack, s.PackingUnitId, s.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, s.QACommissionPercent,
        s.VendorPaymentDiscountPercent, s.LabTestIncome, c.UKSupplierCode, s.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(s.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ISNULL(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS FullBaseAmt, 
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, s.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList  
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
                                 AND c.TradingAgencyId @TradingAgencyIdList AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SplitShipment s ON b.ShipmentId = s.ShipmentId AND s.Status = 1 
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND x.BudgetYear = @FiscalYear AND x.Period = @Period
        INNER JOIN TemporaryPayment e ON e.FiscalYear = @FiscalYear AND e.Period = @Period AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = s.SplitShipmentId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo        
        WHERE (c.SetSplitCount > 0 AND s.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)) r
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyPurchase" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog 
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS BaseAmt,
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ISNULL(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS FullBaseAmt, 
        CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
                                 AND c.TradingAgencyId @TradingAgencyIdList
                                 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId AND d.ItemNo NOT IN (SELECT ItemNo FROM NSLedMissingRangePlanItemNo)
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND GETDATE() BETWEEN x.StartDate AND x.EndDate 
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12  
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        LEFT JOIN CutOffSales co ON a.ShipmentId = co.ShipmentId 
        --WHERE b.ShipmentId = 1188553

        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        --AND a.ShipmentId in ()
        AND NOT (sp.ParameterValue = 'Y' AND (b.IsMockShopSample = 1 OR b.IsStudioSample = 1) AND co.ShipmentId IS NULL)
        
        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, s.SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo + s.SplitSuffix AS ContractNo, c.NSLPONo + s.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, s.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        s.BuyCurrencyId AS CurrencyId, s.PaymentTermId, s.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS BaseAmt,
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        s.TotalShippedQty AS Qty,
        s.PiecesPerPack, s.PackingUnitId, s.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, s.QACommissionPercent,
        s.VendorPaymentDiscountPercent, s.LabTestIncome, c.UKSupplierCode, s.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(s.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ISNULL(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 0), 2) AS FullBaseAmt, 
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, s.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList  
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
                                 AND c.TradingAgencyId @TradingAgencyIdList
                                 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SplitShipment s ON b.ShipmentId = s.ShipmentId AND s.Status = 1 
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND GETDATE() BETWEEN x.StartDate AND x.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = s.SplitShipmentId
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12 
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND x.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        LEFT JOIN CutOffSplitSales co ON a.ShipmentId = co.ShipmentId AND s.SplitShipmentId = co.SplitShipmentId 

        WHERE (c.SetSplitCount > 0 AND s.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)
        --AND a.ShipmentId = 776276
        AND NOT (sp.ParameterValue = 'Y' AND (b.IsMockShopSample = 1 OR b.IsStudioSample = 1) AND co.ShipmentId IS NULL)) r
        
        
        SELECT * FROM #SunInterfaceLog ORDER BY SupplierInvoiceNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReversePurchaseByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        CONVERT(decimal(18,2), ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2)) AS BaseAmt,
        CONVERT(decimal(18,2), CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2)) AS TotalShippedAmt,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2)) AS TotalShippedNetFOBAmt,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2)) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        CONVERT(decimal(18,2), ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2)) AS UTImportDutyInBaseCurrency, 
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedNetFOBAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedSupplierGmtAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2)) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        CONVERT(decimal(18,2), ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2)) AS FullBaseAmt, 
        CONVERT(decimal(18,2), CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        --WHERE a.ShipmentId = 1139905
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseNSLedStockProvisionByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        CONVERT(decimal(18,2), ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2)) AS BaseAmt,
        CONVERT(decimal(18,2), CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2)) AS TotalShippedAmt,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2)) AS TotalShippedNetFOBAmt,
        CONVERT(decimal(18,2), ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2)) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        CONVERT(decimal(18,2), ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2)) AS UTImportDutyInBaseCurrency, 
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedNetFOBAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2)) AS UTTotalShippedSupplierGmtAmt,
        CONVERT(decimal(18,2), ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2)) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        CONVERT(decimal(18,2), ROUND(CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2)) AS FullBaseAmt, 
        CONVERT(decimal(18,2), CASE WHEN c.CustomerId = 8 THEN a.ChoiceOrderTotalShippedSupplierGmtAmt WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN b.TotalShippedAmt ELSE b.TotalShippedSupplierGmtAmtAfterDiscount END) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        --WHERE a.ShipmentId = 1139905
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>
    
    <dataCommand name="GetReversePurchaseBySplitShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, s.SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo + s.SplitSuffix AS ContractNo, c.NSLPONo + s.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, s.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        s.BuyCurrencyId AS CurrencyId, s.PaymentTermId, s.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS OtherAmt,
        s.TotalShippedQty AS Qty,
        s.PiecesPerPack, s.PackingUnitId, s.SupplierInvoiceNo, CONVERT(varchar,b.IsPressSample) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, s.QACommissionPercent,
        s.VendorPaymentDiscountPercent, s.LabTestIncome, c.UKSupplierCode, 
        s.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(s.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(s.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, 
        CASE WHEN c.TradingAgencyId = 2 AND b.TermOfPurchaseId <> 1 THEN s.TotalShippedAmt ELSE s.TotalShippedSupplierGmtAmtAfterDiscount END AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, s.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND NOT (c.CustomerId IN (20, 24) AND b.IsMockShopSample = 0 AND b.IsStudioSample = 0)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SplitShipment s ON b.ShipmentId = s.ShipmentId AND s.SplitShipmentId = @SplitShipmentId AND s.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.BuyCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualFreightCost" type="Text">
      <commandText>
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedFreightCost * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS BaseAmt, b.TotalShippedFreightCost AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedFreightCost * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedFreightCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND b.TotalShippedFreightCost > 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        */

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 10
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog

      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualFreightCost" type="Text">
      <commandText>
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedFreightCost * z.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt, b.TotalShippedFreightCost AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedFreightCost * z.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedFreightCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND b.TotalShippedFreightCost > 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = a.SellCurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        */

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 10
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = f.CurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder,
        a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedFreightCost" type="Text">
      <commandText>
        <![CDATA[
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedFreightCost * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedFreightCost AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedFreightCost * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedFreightCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TotalShippedFreightCost > 0 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId) 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        */
        
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON f.OtherCostTypeId = 10 AND e.ShipmentDetailId = f.ShipmentDetailId AND f.Status = 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, s.FiscalYear, s.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseFreightCostByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedFreightCost * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedFreightCost AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(b.TotalShippedFreightCost * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedFreightCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        */
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 10 AND f.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo        
        GROUP BY a.ShipmentId, x.BudgetYear, x.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualDutyCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedDutyCost * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS BaseAmt, b.TotalShippedDutyCost AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedDutyCost * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedDutyCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND b.TotalShippedDutyCost > 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        --INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualDutyCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedDutyCost * z.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt, b.TotalShippedDutyCost AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedDutyCost * z.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedDutyCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND b.TotalShippedDutyCost > 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = a.SellCurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedDutyCost" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedDutyCost * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedDutyCost AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedDutyCost * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedDutyCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TotalShippedDutyCost > 0 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)   
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseDutyCostByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedDutyCost * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedDutyCost AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(b.TotalShippedDutyCost * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedDutyCost AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.IsDualSourcingOrder = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualGTCommission" type="Text">
      <commandText>
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        AND a.CustomerId = 13
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 16
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder
        */

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0 * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS BaseAmt, ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0, 2) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0 * i.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0, 2) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        AND a.CustomerId = 13
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualGTCommission" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        a.SellCurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0 * z.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt, (a.TotalShippedAmt * b.GTCommissionPercent / 100.0) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(a.TotalShippedAmt * b.GTCommissionPercent / 100.0 * z.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, (a.TotalShippedAmt * b.GTCommissionPercent / 100.0) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1 AND a.CustomerId = -1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = a.SellCurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedGTCommission" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedAmt * b.GTCommissionPercent / 100.0 * zc.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        (b.TotalShippedAmt * b.GTCommissionPercent / 100.0) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedAmt * b.GTCommissionPercent / 100.0 * zc.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, (b.TotalShippedAmt * b.GTCommissionPercent / 100.0) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList
                                AND s.CustomerId = -1
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 
        INNER JOIN Product d ON c.ProductId = d.ProductId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseGTCommissionByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        /*
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.CustomerId = 13
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 16 AND f.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, x.BudgetYear, x.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        */
        
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(b.TotalShippedAmt * b.GTCommissionPercent / 100.0 * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS BaseAmt,
        b.TotalShippedAmt * b.GTCommissionPercent / 100.0 AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(b.TotalShippedAmt * b.GTCommissionPercent / 100.0 * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedAmt * b.GTCommissionPercent / 100.0 AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.CustomerId = 13
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualKitDevelopmentCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 21
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualKitDevelopmentCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 21
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = f.CurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder,
        a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedKitDevelopmentCost" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND a.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON f.OtherCostTypeId = 21 AND e.ShipmentDetailId = f.ShipmentDetailId AND f.Status = 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, s.FiscalYear, s.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseKitDevelopmentCostByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample,
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 21 AND f.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, x.BudgetYear, x.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualSalesCommissionSettlement" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.NSLCommissionSettlementDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(a.NSLCommissionAmt * a.NSLCommissionSettlementExchangeRate / x.ExchangeRate, 2) AS BaseAmt, a.NSLCommissionAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, a.NSLCommissionRefNo AS RefNo,
        NULL AS DCNoteNo, ROUND(ISNULL((a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) * a.NSLCommissionSettlementExchangeRate / x.ExchangeRate, 0), 2) AS BaseTax,
        (a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) AS OtherTax,
        c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(a.NSLCommissionAmt * a.NSLCommissionSettlementExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, a.NSLCommissionAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN Customer cu ON cu.CustomerId = c.CustomerId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND a.NSLCommissionSettlementDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo -- 20131203 changed from 2 to 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE a.NSLCommissionSettlementDate BETWEEN w.StartDate AND w.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND (c.CustomerId IN (15, 18, 20, 24, 21, 23, 17, 41, 40, 30, 32, 39, 31)
        OR cu.IsSelfBilling = 1
        OR (c.CustomerId IN (27, 28) AND EXISTS(SELECT * FROM   NSLedSelfBilledSupplierCode WHERE UKSupplierCode = c.UKSupplierCode AND Status = 1)))
        AND b.IsMockShopSample = 0
        AND b.IsStudioSample = 0
        AND EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId And SunInterfaceTypeId = 2 AND CategoryId IN (1,3))
        --AND b.ShipmentId = 1222083

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, CustomerId
        DROP TABLE #SunInterfaceLog

      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualAR" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.ARDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(b.TotalShippedAmt * a.ARExchangeRate / x.ExchangeRate, 2) AS BaseAmt, b.TotalShippedAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, a.ARRefNo AS RefNo,
        NULL AS DCNoteNo, ROUND(ISNULL((b.TotalShippedAmt - a.ARAmt) * a.ARExchangeRate / x.ExchangeRate, 0), 2) AS BaseTax, (b.TotalShippedAmt - a.ARAmt) AS OtherTax,
        c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(b.TotalShippedAmt * a.ARExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, b.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.OriginalTermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN Customer cu ON cu.CustomerId = c.CustomerId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND a.ARDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo -- 20131203 changed from 2 to 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE a.ARDate BETWEEN w.StartDate AND w.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND (c.CustomerId IN (20, 24)
        OR cu.IsSelfBilling = 1 
        OR (c.CustomerId IN (27, 28) AND EXISTS(SELECT * FROM NSLedSelfBilledSupplierCode WHERE UKSupplierCode = c.UKSupplierCode AND Status = 1)))
        AND b.IsMockShopSample = 0
        AND b.IsStudioSample = 0
        AND EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId And SunInterfaceTypeId = 1 AND CategoryId IN (1,3))
        --AND b.ShipmentId = 1222083

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, CustomerId, TradingAgencyId, TermOfPurchaseId, RefNo
        DROP TABLE #SunInterfaceLog

      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualAP" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.APDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(a.APAmt * a.APExchangeRate / x.ExchangeRate, 2) AS BaseAmt, a.APAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, a.APRefNo AS RefNo,
        NULL AS DCNoteNo, ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS BaseTax, b.TotalShippedSupplierGmtAmtAfterDiscount AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(a.APAmt * a.APExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, a.APAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND a.APDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE a.APDate BETWEEN w.StartDate AND w.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND c.CustomerId IN (1, 2, 5, 6, 8)
        AND (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))

        UNION ALL

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, bs.SplitShipmentId AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        bs.APDate AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo,
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, bs.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        bs.BuyCurrencyId AS CurrencyId, bs.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(bs.APAmt * bs.APExchangeRate / x.ExchangeRate, 2) AS BaseAmt, bs.APAmt AS OtherAmt,
        bs.TotalShippedQty AS Qty,
        bs.PiecesPerPack, bs.PackingUnitId, bs.SupplierInvoiceNo, bs.APRefNo AS RefNo,
        NULL AS DCNoteNo, ROUND(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS BaseTax, bs.TotalShippedSupplierGmtAmtAfterDiscount AS OtherTax, c.SetSplitCount, bs.QACommissionPercent,
        bs.VendorPaymentDiscountPercent, bs.LabTestIncome, c.UKSupplierCode, bs.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(bs.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(bs.APAmt * bs.APExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, bs.APAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, bs.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN SplitShipment bs ON b.ShipmentId = bs.ShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND IsActive = 1 AND e.ShipmentId = bs.ShipmentId AND e.SplitShipmentId = bs.SplitShipmentId
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND bs.APDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE bs.APDate BETWEEN w.StartDate AND w.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND c.CustomerId IN (1, 2, 5, 6, 8)
        AND (c.SetSplitCount > 0 AND bs.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)) r

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog

      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyILSSalesDiscrepancy" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.ARDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL((b.TotalShippedAmt - a.ARAmt) * a.ARExchangeRate / ex.ExchangeRate, 0), 2) AS BaseAmt,
        (b.TotalShippedAmt - a.ARAmt) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(ISNULL((b.TotalShippedAmt - a.ARAmt) * a.ARExchangeRate / ex.ExchangeRate, 0), 2) AS FullBaseAmt,
        (b.TotalShippedAmt - a.ARAmt) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
        AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (1, 2, 5, 6, 7, 8, 9)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.ARDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12
        LEFT JOIN ExchangeRate ex ON ex.CurrencyId = 3 AND ex.ExchangeRateTypeId = 2 AND a.ARDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
          
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualILSSalesDiscrepancy" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.ARDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL((b.TotalShippedAmt - a.ARAmt) * a.ARExchangeRate / ex.ExchangeRate, 0), 2) AS BaseAmt,
        (b.TotalShippedAmt - a.ARAmt) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(ISNULL((b.TotalShippedAmt - a.ARAmt) * a.ARExchangeRate / ex.ExchangeRate, 0), 2) AS FullBaseAmt,
        (b.TotalShippedAmt - a.ARAmt) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
        AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (1, 2, 5, 6, 7) 
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND x.BudgetYear = @FiscalYear AND x.Period = @Period --a.ARDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12
        LEFT JOIN ExchangeRate ex ON ex.CurrencyId = 3 AND ex.ExchangeRateTypeId = 1 AND a.ARDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo -- 20131203 changed from 2 to 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE a.ARDate BETWEEN x.StartDate AND x.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND b.IsMockShopSample = 0
        AND b.IsStudioSample = 0
          
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyILSSalesCommissionDiscrepancy" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.NSLCommissionSettlementDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL((a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) * a.NSLCommissionSettlementExchangeRate / ex.ExchangeRate, 0), 2) AS BaseAmt,
        (a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(ISNULL((a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) * a.NSLCommissionSettlementExchangeRate / ex.ExchangeRate, 0), 2) AS FullBaseAmt,
        (a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
        AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (1, 2, 5, 6, 7, 9) 
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.NSLCommissionSettlementDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12
        LEFT JOIN ExchangeRate ex ON ex.CurrencyId = 3 AND ex.ExchangeRateTypeId = 2 AND a.NSLCommissionSettlementDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
          
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualILSSalesCommissionDiscrepancy" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.NSLCommissionSettlementDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ISNULL((a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) * a.NSLCommissionSettlementExchangeRate / ex.ExchangeRate, 0), 2) AS BaseAmt,
        (a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 0), 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample,
        b.IsStudioSample, 
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(ISNULL((a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) * a.NSLCommissionSettlementExchangeRate / ex.ExchangeRate, 0), 2) AS FullBaseAmt,
        (a.NSLCommissionAmt - a.NSLCommissionSettlementAmt) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1
        AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (1, 2, 5, 6, 7, 15) 
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND x.BudgetYear = @FiscalYear AND x.Period = @Period --AND a.NSLCommissionSettlementDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN SystemParameter sp ON sp.ParameterId = 12
        LEFT JOIN ExchangeRate ex ON ex.CurrencyId = 3 AND ex.ExchangeRateTypeId = 1 AND a.NSLCommissionSettlementDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo -- 20131203 changed from 2 to 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE a.NSLCommissionSettlementDate BETWEEN x.StartDate AND x.EndDate
        /*
        CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END
        AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CASE WHEN @Period = 12 THEN CONVERT(varchar, @FiscalYear + 1) + '-01-01' ELSE CONVERT(varchar, @FiscalYear) + '-' + CONVERT(varchar, @Period + 1) + '-01' END))
        */
        AND b.IsMockShopSample = 0
        AND b.IsStudioSample = 0
          
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyAP" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog 
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        a.APDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.BuyCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(a.APAmt * a.APExchangeRate / x.ExchangeRate, 2) AS BaseAmt, a.APAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, a.APRefNo AS RefNo,
        ISNULL(a.LCBillRefNo, '') AS DCNoteNo, ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS BaseTax, b.TotalShippedSupplierGmtAmtAfterDiscount AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(a.APAmt * a.APExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, a.APAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND GETDATE() BETWEEN w.StartDate AND w.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = 0
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND a.APDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo        
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE (c.SetSplitCount = 0 OR (c.SetSplitCount > 0 AND c.IsVirtualSetSplit = 1))
        AND NOT (c.OfficeId = 2 AND c.CustomerId = 16)
        AND a.APRefNo <> 'WRITTEN-OFF'
        AND EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = b.ShipmentId AND SunInterfaceTypeId = 3)
        --AND a.ShipmentId <> 940235
        
        
        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, s.SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        s.APDate AS TransactionDate, c.ContractNo + s.SplitSuffix AS ContractNo, c.NSLPONo + s.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, s.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        s.BuyCurrencyId AS CurrencyId, s.PaymentTermId, s.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(s.APAmt * s.APExchangeRate / x.ExchangeRate, 2) AS BaseAmt,
        s.APAmt AS OtherAmt,
        s.TotalShippedQty AS Qty,
        s.PiecesPerPack, s.PackingUnitId, s.SupplierInvoiceNo, s.APRefNo AS RefNo,
        ISNULL(a.LCBillRefNo, '') AS DCNoteNo, ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS BaseTax, s.TotalShippedSupplierGmtAmtAfterDiscount AS OtherTax, c.SetSplitCount, s.QACommissionPercent,
        s.VendorPaymentDiscountPercent, s.LabTestIncome, c.UKSupplierCode, 
        s.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(s.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(s.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(s.TotalShippedNetFOBAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(s.TotalShippedSupplierGmtAmtAfterDiscount * s.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(s.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(s.APAmt * s.APExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, s.APAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, s.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList 
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SplitShipment s ON b.ShipmentId = s.ShipmentId AND s.Status = 1 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND GETDATE() BETWEEN w.StartDate AND w.EndDate
        INNER JOIN DailySunInterface e ON e.SunInterfaceTypeId = @SunInterfaceTypeId AND e.IsActive = 1 AND e.ShipmentId = a.ShipmentId AND e.SplitShipmentId = s.SplitShipmentId
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND s.APDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo        
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE (c.SetSplitCount > 0 AND s.IsVirtualSetSplit = 0 AND c.IsVirtualSetSplit = 0)
        AND NOT (c.OfficeId = 2 AND c.CustomerId = 16) AND s.APRefNo <> 'WRITTEN-OFF'
        AND EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = b.ShipmentId AND SplitShipmentId = s.SplitShipmentId AND SunInterfaceTypeId = 3)) r
        
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo, VendorId, DCNoteNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualAPAdjustment" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.IssueDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, ad.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ad.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        --b.TotalShippedQty AS Qty,
        (SELECT SUM(RevisedShippedQty) FROM AdjustmentDetailLine WHERE AdjustmentDetailId = ad.AdjustmentDetailId) AS Qty, 
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(VARCHAR, ad.AdjustmentDetailId) AS RefNo,
        an.AdjustmentNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM AdjustmentDetail ad
        INNER JOIN AdjustmentNote an ON ad.AdjustmentNoteId = an.AdjustmentNoteId AND ad.AdjustmentTypeId = 2 AND ad.IsInterfaced = 0 AND an.RevisedCurrencyId IS NULL AND ad.SplitShipmentId = 0
        --AND an.AdjustmentNoteId = 799
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.IssueDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON ad.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.IssueDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.IssueDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        UNION ALL

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, bs.SplitShipmentId AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.IssueDate AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo,
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, ad.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ad.CurrencyId AS CurrencyId, bs.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        --bs.TotalShippedQty AS Qty,
        (SELECT SUM(RevisedShippedQty) FROM AdjustmentDetailLine WHERE AdjustmentDetailId = ad.AdjustmentDetailId) AS Qty, 
        bs.PiecesPerPack, bs.PackingUnitId, bs.SupplierInvoiceNo, CONVERT(VARCHAR, ad.AdjustmentDetailId) AS RefNo,
        an.AdjustmentNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, bs.QACommissionPercent,
        bs.VendorPaymentDiscountPercent, bs.LabTestIncome, c.UKSupplierCode, bs.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(bs.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, bs.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM AdjustmentDetail ad
        INNER JOIN AdjustmentNote an ON ad.AdjustmentNoteId = an.AdjustmentNoteId AND ad.AdjustmentTypeId = 2 AND ad.IsInterfaced = 0  AND an.RevisedCurrencyId IS NULL AND ad.SplitShipmentId > 0
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN SplitShipment bs ON b.ShipmentId = bs.ShipmentId AND ad.SplitShipmentId = bs.SplitShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.IssueDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON u.CurrencyId = ad.CurrencyId AND u.ExchangeRateTypeId = 2 AND an.IssueDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND an.IssueDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo) r

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualAPAdjustment_ChangeCurrency" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.IssueDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, ad.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ad.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(VARCHAR, ad.AdjustmentDetailId) AS RefNo,
        an.AdjustmentNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM AdjustmentDetail ad
        INNER JOIN AdjustmentNote an ON ad.AdjustmentNoteId = an.AdjustmentNoteId AND ad.AdjustmentTypeId = 2 AND ad.IsInterfaced = 0 AND an.RevisedCurrencyId IS NOT NULL AND ad.SplitShipmentId = 0
        --AND an.AdjustmentNoteId = 799
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND GETDATE() BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON ad.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.IssueDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.IssueDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        UNION ALL

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, bs.SplitShipmentId AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.IssueDate AS TransactionDate, c.ContractNo + bs.SplitSuffix AS ContractNo,
        c.NSLPONo + bs.SplitSuffix AS NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, bs.ProductId, c.SeasonId, ad.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ad.CurrencyId AS CurrencyId, bs.PaymentTermId, bs.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        bs.TotalShippedQty AS Qty,
        bs.PiecesPerPack, bs.PackingUnitId, bs.SupplierInvoiceNo, CONVERT(VARCHAR, ad.AdjustmentDetailId) AS RefNo,
        an.AdjustmentNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, bs.QACommissionPercent,
        bs.VendorPaymentDiscountPercent, bs.LabTestIncome, c.UKSupplierCode, bs.TotalShippedAmt * b.NSLCommissionPercent AS SalesCommission,
        ROUND(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(bs.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(bs.TotalShippedNetFOBAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(bs.TotalShippedSupplierGmtAmtAfterDiscount * bs.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(bs.TotalShippedAmt * b.NSLCommissionPercent * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, bs.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        FROM AdjustmentDetail ad
        INNER JOIN AdjustmentNote an ON ad.AdjustmentNoteId = an.AdjustmentNoteId AND ad.AdjustmentTypeId = 2 AND ad.IsInterfaced = 0  AND an.RevisedCurrencyId IS NOT NULL AND ad.SplitShipmentId > 0
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN SplitShipment bs ON b.ShipmentId = bs.ShipmentId AND ad.SplitShipmentId = bs.SplitShipmentId AND bs.Status = 1
        INNER JOIN Product d ON bs.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND GETDATE() BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON u.CurrencyId = ad.CurrencyId AND u.ExchangeRateTypeId = 2 AND an.IssueDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND an.IssueDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo) r

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualQACommission" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.DNDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, ad.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        ad.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, 
        a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate, 
        ROUND(ad.QACommissionAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, ad.QACommissionAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(VARCHAR, an.DNId) AS RefNo,
        an.DNNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome AS LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(ad.QACommissionAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, ad.QACommissionAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM QACommissionDNShipment ad
        INNER JOIN QACommissionDN an ON ad.DNId = an.DNId AND an.IsInterfaced = 0 AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND an.FiscalYear = @FiscalYear AND an.Period = @Period
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status =1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.DNDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON ad.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.DNDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.DNDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        --LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        --LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND an.DNDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND an.DNDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyARAdjustmentForNext" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        CONVERT(datetime, CONVERT(varchar, ad.CreatedOn, 112)) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(ad.AdjustmentAmt * u.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM AdjustmentDetail ad
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId AND ad.AdjustmentTypeId = 1 AND ad.IsInterfaced = 0 
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status = 1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (1,2,5,6,7)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, ad.CreatedOn, 112)) BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON ad.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualARAdjustmentForEziBuy" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        an.IssueDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.OriginalTermOfPurchaseId AS TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        b.SellCurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(ad.AdjustmentAmt * u.ExchangeRate / y.ExchangeRate, 2) AS BaseAmt, ad.AdjustmentAmt AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, CONVERT(varchar, ad.AdjustmentDetailId) AS RefNo,
        an.AdjustmentNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(ad.AdjustmentAmt * u.ExchangeRate / y.ExchangeRate, 2) AS FullBaseAmt, ad.AdjustmentAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM AdjustmentDetail ad
        INNER JOIN AdjustmentNote an ON ad.AdjustmentNoteId = an.AdjustmentNoteId
        INNER JOIN Invoice a ON ad.ShipmentId = a.ShipmentId AND ad.AdjustmentTypeId = 1 AND ad.IsInterfaced = 0 
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.Status = 1 AND b.Status = 1 AND b.TermOfPurchaseId @TermOfPurchaseIdList
        AND b.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND c.Status = 1 AND c.TradingAgencyId @TradingAgencyIdList
        AND c.CustomerId IN (13)
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, ad.CreatedOn, 112)) BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN ExchangeRate u ON ad.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNonTradeExpenseInvoice" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.InvoiceDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, an.DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.NTVendorId AS VendorId,
        0 AS CustomerId, 0 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        0 AS SequenceNo, NULL AS InvoiceUploadDate, ROUND((an.Amount + an.TotalVAT) * u.ExchangeRate / z.ExchangeRate, 2) AS BaseAmt, (an.Amount + an.TotalVAT) AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, an.InvoiceId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, NULL AS UKSupplierCode, 0 AS SalesCommission,
        0 AS TotalShippedAmt,
        0 AS TotalShippedNetFOBAmt,
        0 AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        0 AS UTImportDutyInBaseCurrency,
        0 AS UTTotalShippedAmt,
        0 AS UTTotalShippedNetFOBAmt,
        0 AS UTTotalShippedSupplierGmtAmt,
        0 AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND((an.Amount + an.TotalVAT) * u.ExchangeRate / z.ExchangeRate, 2) AS FullBaseAmt, (an.Amount + an.TotalVAT) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM NTInvoice an 
        INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 9 AND b.BudgetYear = @FiscalYear AND b.Period = @Period AND b.Status = 1 AND an.IsSunInterfaced = 0 AND an.WorkflowStatusId IN (4, 6, 8)
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND an.Status = 1 
        INNER JOIN NSLDB..CompanyOfficeMapping com ON com.OfficeId = an.OfficeId AND com.CompanyId = an.CompanyId AND com.Status = 1
        INNER JOIN NSLDB..AccountDatabase ad ON ad.AccountDBId = com.ReportingDatabaseId AND ad.Status = 1
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = ad.ReportingCurrencyId AND z.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE  an.AccountFirstApproverId = @UserId 
        --AND an.InvoiceId in (34823)
        
        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="UserId" name="@UserId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNonTradeAccrual" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.InvoiceDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, an.DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.NTVendorId AS VendorId,
        0 AS CustomerId, 0 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        0 AS SequenceNo, NULL AS InvoiceUploadDate, ROUND((an.Amount + an.TotalVAT) * u.ExchangeRate / z.ExchangeRate, 2) AS BaseAmt, (an.Amount + an.TotalVAT) AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, an.InvoiceId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, NULL AS UKSupplierCode, 0 AS SalesCommission,
        0 AS TotalShippedAmt,
        0 AS TotalShippedNetFOBAmt,
        0 AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        0 AS UTImportDutyInBaseCurrency,
        0 AS UTTotalShippedAmt,
        0 AS UTTotalShippedNetFOBAmt,
        0 AS UTTotalShippedSupplierGmtAmt,
        0 AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND((an.Amount + an.TotalVAT) * u.ExchangeRate / z.ExchangeRate, 2) AS FullBaseAmt, (an.Amount + an.TotalVAT) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM NTInvoice an 
        INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 9 AND b.BudgetYear = @FiscalYear AND b.Period = @Period AND b.Status = 1 AND an.WorkflowStatusId IN (1,2,5)
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND an.Status = 1 
        INNER JOIN NSLDB..CompanyOfficeMapping com ON com.OfficeId = an.OfficeId AND com.CompanyId = an.CompanyId AND com.Status = 1
        INNER JOIN NSLDB..AccountDatabase ad ON ad.AccountDBId = com.ReportingDatabaseId AND ad.Status = 1
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = ad.ReportingCurrencyId AND z.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE EXISTS(SELECT * FROM NTInvoiceDetail y INNER JOIN NTExpenseType z ON y.ExpenseTypeId = z.ExpenseTypeId AND z.IsAllowAccrual = 1 AND y.InvoiceId = an.InvoiceId AND y.IsPayByHK = 0 AND y.IsRecharge = 0 AND y.Status = 1) 
        --AND an.AccountFirstApproverId = @UserId
        --AND an.InvoiceId IN ( 36715)

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="UserId" name="@UserId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNonTradeRechargeDebitNote" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, an.FiscalYear AS FiscalYear, an.FiscalPeriod AS Period,
        an.RechargeDCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId, 0 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        an.RechargeCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        0 AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(an.RechargeAmount * u.ExchangeRate / z.ExchangeRate, 2) AS BaseAmt, an.RechargeAmount AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, an.RechargeDCNoteId) AS RefNo,
        an.RechargeDCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, NULL AS UKSupplierCode, 0 AS SalesCommission,
        0 AS TotalShippedAmt,
        0 AS TotalShippedNetFOBAmt,
        0 AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        0 AS UTImportDutyInBaseCurrency,
        0 AS UTTotalShippedAmt,
        0 AS UTTotalShippedNetFOBAmt,
        0 AS UTTotalShippedSupplierGmtAmt,
        0 AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.RechargeAmount * u.ExchangeRate / z.ExchangeRate, 2) AS FullBaseAmt, an.RechargeAmount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM NTRechargeDCNote an 
        INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 9 AND b.BudgetYear = an.FiscalYear AND b.Period = an.FiscalPeriod AND b.Status = 1 AND an.IsSunInterfaced = 0 AND an.Status = 1 
        AND EXISTS(SELECT * FROM NTInvoiceDetail WHERE Status = 1 AND RechargeDCNoteId = an.RechargeDCNoteId AND IsPayByHK = 0)
        INNER JOIN NSLDB..CompanyOfficeMapping com ON com.OfficeId = an.OfficeId AND com.CompanyId = an.CompanyId AND com.Status = 1 
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 
        INNER JOIN NSLDB..AccountDatabase ad ON ad.AccountDBId = com.ReportingDatabaseId AND ad.Status = 1
        LEFT JOIN ExchangeRate u ON an.RechargeCurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = ad.ReportingCurrencyId AND z.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE an.CreatedBy = @UserId

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="UserId" name="@UserId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNonTradePaymentOnBehalfDebitNote" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, an.FiscalYear AS FiscalYear, an.FiscalPeriod AS Period,
        an.RechargeDCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId, 0 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        an.RechargeCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        0 AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(an.RechargeAmount * u.ExchangeRate / z.ExchangeRate, 2) AS BaseAmt, an.RechargeAmount AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, an.RechargeDCNoteId) AS RefNo,
        an.RechargeDCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, NULL AS UKSupplierCode, 0 AS SalesCommission,
        0 AS TotalShippedAmt,
        0 AS TotalShippedNetFOBAmt,
        0 AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        0 AS UTImportDutyInBaseCurrency,
        0 AS UTTotalShippedAmt,
        0 AS UTTotalShippedNetFOBAmt,
        0 AS UTTotalShippedSupplierGmtAmt,
        0 AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.RechargeAmount * u.ExchangeRate / z.ExchangeRate, 2) AS FullBaseAmt, an.RechargeAmount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM NTRechargeDCNote an 
        INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 9 AND b.BudgetYear = an.FiscalYear AND b.Period = an.FiscalPeriod AND b.Status = 1 AND an.IsSunInterfaced = 0 AND an.Status = 1 
        AND EXISTS(SELECT * FROM NTInvoiceDetail WHERE Status = 1 AND RechargeDCNoteId = an.RechargeDCNoteId AND IsPayByHK = 1)
        INNER JOIN NSLDB..CompanyOfficeMapping com ON com.OfficeId = an.OfficeId AND com.CompanyId = an.CompanyId AND com.Status = 1 
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 
        INNER JOIN NSLDB..AccountDatabase ad ON ad.AccountDBId = com.ReportingDatabaseId AND ad.Status = 1
        LEFT JOIN ExchangeRate u ON an.RechargeCurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = ad.ReportingCurrencyId AND z.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE an.CreatedBy = @UserId

        SELECT * FROM #SunInterfaceLog
        ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="UserId" name="@UserId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNonTradeBankPayment" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.SettlementDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, an.DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.NTVendorId AS VendorId,
        0 AS CustomerId, 0 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        nb.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        0 AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(an.SettlementAmount * u.ExchangeRate / z.ExchangeRate, 2) AS BaseAmt, an.SettlementAmount AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, an.InvoiceId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, NULL AS UKSupplierCode, 0 AS SalesCommission,
        0 AS TotalShippedAmt,
        0 AS TotalShippedNetFOBAmt,
        0 AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        0 AS UTImportDutyInBaseCurrency,
        0 AS UTTotalShippedAmt,
        0 AS UTTotalShippedNetFOBAmt,
        0 AS UTTotalShippedSupplierGmtAmt,
        0 AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.SettlementAmount * u.ExchangeRate / z.ExchangeRate, 2) AS FullBaseAmt, an.SettlementAmount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog        
        FROM NTInvoice an 
        INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 9 AND b.BudgetYear = @FiscalYear AND b.Period = @Period AND b.Status = 1 AND (an.IsSUNInterfacedForSettlement = 0 AND an.SettlementDate IS NOT NULL)
        AND ((an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND an.IsPayByHK = 0) OR (an.IsPayByHK = 1 AND @OfficeGroupId = 1)) AND an.Status = 1 
        INNER JOIN NSLDB..CompanyOfficeMapping com ON com.OfficeId = an.OfficeId AND com.CompanyId = an.CompanyId AND com.Status = 1
        INNER JOIN NSLDB..AccountDatabase ad ON ad.AccountDBId = com.ReportingDatabaseId AND ad.Status = 1
        INNER JOIN NSLBankAccount nb ON nb.NSLBankAccountId = an.SettlementBankAccountId
        LEFT JOIN ExchangeRate u ON nb.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = CASE WHEN an.IsPayByHK = 1 THEN 3 ELSE ad.ReportingCurrencyId END AND z.ExchangeRateTypeId = 1 AND b.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        WHERE an.UpdateSettlementUserId = @UserId
        ORDER BY an.SettlementBankAccountId, an.PaymentMethodId, an.CurrencyId, an.OfficeId, an.IsPayByHK, an.ChequeNo, an.NTVendorId, an.CompanyId

        SELECT * FROM #SunInterfaceLog
        --ORDER BY OfficeId, CurrencyId, RefNo
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="UserId" name="@UserId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUKClaim" type="Text">
      <commandText>
        <![CDATA[

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (
        /*
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.UKDebitNoteReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, ISNULL((SELECT TOP 1 dd.TermOfPurchaseId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.ClaimId) AS RefNo,
        an.DebitNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, an.Qty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKClaim an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.UKDebitNoteReceivedDate BETWEEN w.StartDate AND w.EndDate
        AND an.HasUKDN = 1 AND an.IsInterfaced = 0  AND an.Status = 1
        LEFT JOIN NSLDB..OfficeStructure o ON an.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 
        */

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.UKDebitNoteReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, an.CreatedOn AS InvoiceUploadDate, ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.ClaimId) AS RefNo,
        an.DebitNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, an.Qty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKClaim an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.UKDebitNoteReceivedDate BETWEEN w.StartDate AND w.EndDate
        AND an.HasUKDN = 1 AND an.IsInterfaced = 0  AND an.Status = 1
        LEFT JOIN NSLDB..OfficeStructure o ON an.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 

        UNION ALL
        /*
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        b.ReceivedDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, o.ParentID AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, (SELECT TOP 1 dd.TermOfPurchaseId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo) AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        (SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, b.CreatedOn AS InvoiceUploadDate, ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, b.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, b.ClaimRefundId * -1) AS RefNo,
        b.CreditNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, b.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKClaim an INNER JOIN UKClaimRefund b ON an.HasUKDN = 1 AND an.ClaimId = b.ClaimId AND b.Status = 1 AND b.IsInterfaced = 0 AND an.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND b.ReceivedDate BETWEEN w.StartDate AND w.EndDate
        INNER JOIN NSLDB..OfficeStructure o ON o.OfficeStructureId = an.ProductTeamId
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) ) r
        */
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        b.ReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, b.CreatedOn AS InvoiceUploadDate, ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, b.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, b.ClaimRefundId * -1) AS RefNo,
        b.CreditNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, b.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKClaim an INNER JOIN UKClaimRefund b ON an.HasUKDN = 1 AND an.ClaimId = b.ClaimId AND b.Status = 1 AND b.IsInterfaced = 0 AND an.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND b.ReceivedDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN NSLDB..OfficeStructure o ON o.OfficeStructureId = an.ProductTeamId
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) ) r
        --ORDER BY r.NSLPONo
        
        SELECT * FROM #SunInterfaceLog ORDER BY InvoiceUploadDate
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUKClaimRechargeToSupplier" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        y.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        y.OfficeId, ISNULL(o.ParentId, 0) AS DeptId, z.ProductTeamId AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, y.VendorId AS VendorId,
        0 AS CustomerId, z.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        z.TradingAgencyId AS TradingAgencyId,
        y.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(y.SettledAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, y.SettledAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, y.DCNoteId) AS RefNo,
        y.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(y.SettledAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, y.SettledAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM UKClaimDCNote y 
        INNER JOIN vw_DCNoteParam z ON y.DCNoteId = z.DCNoteId 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND y.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND y.Status = 1 AND y.IsInterfaced = 0 AND y.RevisedCurrencyId IS NULL
        LEFT JOIN NSLDB..OfficeStructure o ON z.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON y.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND y.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND y.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND y.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 
        ORDER BY y.DCNoteNo
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUKClaimRechargeToSupplier_ChangeCurrency" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        y.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        y.OfficeId, ISNULL(o.ParentId, 0) AS DeptId, z.ProductTeamId AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, y.VendorId AS VendorId,
        0 AS CustomerId, z.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        z.TradingAgencyId AS TradingAgencyId,
        y.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(y.SettledAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, y.SettledAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, y.DCNoteId) AS RefNo,
        y.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(y.SettledAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, y.SettledAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM UKClaimDCNote y 
        INNER JOIN vw_DCNoteParam z ON y.DCNoteId = z.DCNoteId 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND GETDATE() BETWEEN w.StartDate AND w.EndDate AND y.Status = 1 AND y.IsInterfaced = 0 AND y.RevisedCurrencyId IS NOT NULL
        LEFT JOIN NSLDB..OfficeStructure o ON z.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON y.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND y.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND y.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND y.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 
        ORDER BY y.DCNoteNo
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualMockShop" type="Text">
      <commandText>
        <![CDATA[

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        m.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        m.SellCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.TotalShippedAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.TotalShippedAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, NULL AS RefNo,
        m.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, m.TotalNSLCommissionAmt AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.TotalShippedAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM MockShopDCNote m 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND m.IsInterfaced = 0 AND m.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        LEFT JOIN ExchangeRate u ON m.SellCurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        ORDER BY m.DCNoteNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualStudioSample" type="Text">
      <commandText>
        <![CDATA[

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        m.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        m.SellCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.TotalShippedAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.TotalShippedAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, NULL AS RefNo,
        m.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, m.TotalNSLCommissionAmt AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.TotalShippedAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.TotalShippedAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM StudioDCNote m 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND m.IsInterfaced = 0 AND m.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        LEFT JOIN ExchangeRate u ON m.SellCurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        ORDER BY m.DCNoteNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUTContractDN" type="Text">
      <commandText>
        <![CDATA[

        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        m.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        m.SellCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.TotalSupplierCommission * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.TotalSupplierCommission AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar(5), m.DCNoteId) AS RefNo,
        m.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.TotalSupplierCommission * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.TotalSupplierCommission AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM UTContractDCNote m 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND m.IsInterfaced = 0 AND m.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        LEFT JOIN ExchangeRate u ON m.SellCurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        ORDER BY m.DCNoteNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyAdvancePayment" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.PaymentDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        m.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        m.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.TotalAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.TotalAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar(10), m.PaymentId) AS RefNo,
        m.PaymentNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.TotalAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.TotalAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM AdvancePayment m 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.PaymentDate BETWEEN w.StartDate AND w.EndDate AND w.Status = 1
        AND m.PaymentDate IS NOT NULL AND m.IsInterfaced = 0 AND ISNULL(m.IsC19, 0) = 0
        AND m.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND m.Status = 1
        LEFT JOIN ExchangeRate u ON m.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 2 AND m.PaymentDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.PaymentDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList

        ORDER BY m.PaymentNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyAdvancePaymentInterest" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        n.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, n.VendorId AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        n.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.InterestAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.InterestAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, m.PaymentId) + '|' + CONVERT(varchar, m.PaymentDate, 103) AS RefNo,
        m.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.InterestAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.InterestAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM AdvancePaymentInstalmentDetail m 
        INNER JOIN AdvancePayment n ON m.PaymentId = n.PaymentId AND n.Status = 1 AND m.Status = 1
        AND m.DCNoteDate IS NOT NULL AND m.IsDCNoteInterfaced = 0  AND ISNULL(n.IsC19, 0) = 0
        AND n.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND m.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND w.Status = 1
        LEFT JOIN ExchangeRate u ON u.CurrencyId = n.CurrencyId AND u.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        ORDER BY m.DCNoteNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetDailyOtherChargeDCNote" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, w.BudgetYear AS FiscalYear, w.Period AS Period,
        m.DCNoteDate AS TransactionDate, 'N/A' AS ContractNo, 'N/A' AS NSLPONo, 0 AS DeliveryNo,
        m.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, ISNULL(m.VendorId, -1) AS VendorId,
        0 AS CustomerId,  1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 0 AS TradingAgencyId,
        m.BillingCurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, NULL AS InvoiceSeq, NULL AS InvoiceYear,
        NULL AS SequenceNo, NULL AS InvoiceUploadDate, ROUND(m.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, m.Amount AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, m.DCNoteId) AS RefNo,
        m.DCNoteNo AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(m.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, m.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM GenericDCNote m 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND m.DCNoteDate BETWEEN w.StartDate AND w.EndDate AND w.Status = 1
        AND m.DCNoteDate IS NOT NULL AND m.IsInterfaced = 0 
        AND m.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND m.Status = 1
        LEFT JOIN ExchangeRate u ON u.CurrencyId = m.BillingCurrencyId AND u.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 2 AND m.DCNoteDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        ORDER BY m.DCNoteNo

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUKDiscount" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode,
        a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        --AND b.IsMockShopSample = 0
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 7
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder


        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualUKDiscount" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 7
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = f.CurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder,
        a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedUKDiscount" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, 
        a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList 
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON f.OtherCostTypeId = 7  AND e.ShipmentDetailId = f.ShipmentDetailId AND f.Status = 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, s.FiscalYear, s.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseUKDiscountByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = 7 AND f.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, x.BudgetYear, x.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualGenericOtherCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * i.InvoiceSellExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        --AND a.Shipmentid IN (1283316,1283524,1281047)

        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 0
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SunInterfaceType st ON st.SunInterfaceTypeId = @SunInterfaceTypeId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = st.OtherCostTypeId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND a.InvoiceDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetAccrualGenericOtherCost" type="Text">
      <commandText>
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId AS CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        a.TotalShippedQty AS Qty,
        a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, a.SetSplitCount, a.QACommissionPercent,
        a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission,
        a.TotalShippedAmtInBaseCurrency AS TotalShippedAmt,
        a.TotalShippedNetFOBAmtInBaseCurrency AS TotalShippedNetFOBAmt,
        a.TotalShippedSupplierGmtAmtInBaseCurrency AS TotalShippedSupplierGmtAmt,
        a.UTInputVATAmt,
        a.UTOutputVATAmt,
        a.UTImportDuty,
        a.UTImportDutyInBaseCurrency,
        a.UTTotalShippedAmt,
        a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt,
        a.UTSalesCommission,
        a.IsNextMfgOrder,
        a.IsPOIssueToNextMfg,
        a.IsMockShopSample,
        a.IsStudioSample,
        a.IsSelfBilledOrder,
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * z.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, a.TotalShippedQty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM CutOffSales a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
        AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.IsAccrual = 1
        AND a.TermOfPurchaseId @TermOfPurchaseIdList
        AND a.TradingAgencyId @TradingAgencyIdList
        AND a.CustomerDestinationId @CustomerDestinationIdList
        INNER JOIN Invoice i ON b.ShipmentId = i.ShipmentId
        INNER JOIN Contract c ON b.ContractId = c.ContractId
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SunInterfaceType st ON st.SunInterfaceTypeId = @SunInterfaceTypeId
        INNER JOIN CutOffSalesDetail e ON a.ShipmentId = e.ShipmentId
        INNER JOIN CutOffOtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND f.OtherCostTypeId = st.OtherCostTypeId
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = f.CurrencyId AND z.ExchangeRateTypeId = 1 AND ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        GROUP BY a.ShipmentId, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        a.OfficeId, c.DeptId, a.ProductTeamId, a.ProductId, a.SeasonId, a.VendorId,
        a.CustomerId, a.TermOfPurchaseId, a.CustomerDestinationId, a.TradingAgencyId,
        f.CurrencyId, a.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear, a.SequenceNo, a.InvoiceUploadDate,
        a.TotalShippedQty, a.PiecesPerPack, a.PackingUnitId, a.SupplierInvoiceNo,
        a.SetSplitCount, a.QACommissionPercent, a.VendorPaymentDiscountPercent, a.LabTestIncome, a.UKSupplierCode, a.SalesCommission, a.TotalShippedAmtInBaseCurrency,
        a.TotalShippedNetFOBAmtInBaseCurrency, a.TotalShippedSupplierGmtAmtInBaseCurrency, a.UTInputVATAmt,
        a.UTOutputVATAmt, a.UTImportDuty, a.UTImportDutyInBaseCurrency, a.UTTotalShippedAmt, a.UTTotalShippedNetFOBAmt,
        a.UTTotalShippedSupplierGmtAmt, a.UTSalesCommission, a.IsNextMfgOrder, a.IsPOIssueToNextMfg, a.IsMockShopSample, a.IsStudioSample, a.IsSelfBilledOrder,
        a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate

        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetRealizedGenericOtherCost" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        @CategoryId AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 0 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND a.InvoiceDate BETWEEN x.StartDate AND x.EndDate
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND w.BudgetYear = @FiscalYear AND w.Period = @Period 
        INNER JOIN CutOffSales s ON a.ShipmentId = s.ShipmentId AND s.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
                                AND s.FiscalYear <= CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                AND s.Period <= CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END
                                AND s.IsAccrual = 1
                                --AND s.ShipmentId = 1112423
                                AND a.InvoiceDate IS NOT NULL
                                AND s.TermOfPurchaseId @TermOfPurchaseIdList
                                AND s.TradingAgencyId @TradingAgencyIdList
                                AND s.CustomerDestinationId @CustomerDestinationIdList  
                                AND ((s.FiscalYear = CASE WHEN @Period = 1 THEN @FiscalYear - 1 ELSE @FiscalYear END 
                                      AND s.Period = CASE WHEN s.FiscalYear = @FiscalYear THEN @Period - 1 ELSE s.Period END)
                                     OR (a.InvoiceUploadDate >= w.StartDate AND a.InvoiceUploadDate < DATEADD(d, 1, w.EndDate)))
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND NOT EXISTS(SELECT * FROM SunInterfaceLog WHERE ShipmentId = a.ShipmentId AND SplitShipmentId = 0 AND CategoryId = 3 AND SunInterfaceTypeId = @SunInterfaceTypeId)
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SunInterfaceType st ON st.SunInterfaceTypeId = @SunInterfaceTypeId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON  f.OtherCostTypeId = st.OtherCostTypeId AND e.ShipmentDetailId = f.ShipmentDetailId AND f.Status = 1
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND w.StartDate BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo
        GROUP BY a.ShipmentId, s.FiscalYear, s.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetReverseGenericOtherCostByShipmentId" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        a.ShipmentId, 0 AS SplitShipmentId, x.BudgetYear AS FiscalYear, x.Period AS Period,
        a.InvoiceDate AS TransactionDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId AS CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS BaseAmt,
        SUM(f.OtherCostAmt * e.ShippedQty) AS OtherAmt,
        b.TotalShippedQty AS Qty,
        c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, NULL AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, c.SetSplitCount, b.QACommissionPercent,
        b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt AS SalesCommission,
        ROUND(b.TotalShippedAmt * a.InvoiceSellExchangeRate / y.ExchangeRate, 2) AS TotalShippedAmt,
        ROUND(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedNetFOBAmt,
        ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / y.ExchangeRate, 2) AS TotalShippedSupplierGmtAmt,
        a.InputVATActualAmt AS UTInputVATAmt,
        a.OutputVATActualAmt AS UTOutputVATAmt,
        a.ImportDutyActualAmt AS UTImportDuty,
        ROUND(ISNULL(a.ImportDutyActualAmt * z.ExchangeRate / y.ExchangeRate, 0), 2) AS UTImportDutyInBaseCurrency, 
        ROUND(ISNULL(b.TotalShippedAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(b.TotalShippedNetFOBAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(b.TotalShippedSupplierGmtAmtAfterDiscount * a.InvoiceBuyExchangeRate / z.ExchangeRate, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(a.NSLCommissionAmt * a.InvoiceSellExchangeRate / z.ExchangeRate, 0), 2) AS UTSalesCommission,
        c.IsNextMfgOrder,
        c.IsPOIssueToNextMfg,
        b.IsMockShopSample, 
        b.IsStudioSample, 
        a.IsSelfBilledOrder, 
        1 AS CategoryId,
        ROUND(SUM(f.OtherCostAmt * e.ShippedQty * zc.ExchangeRate / y.ExchangeRate), 2) AS FullBaseAmt, SUM(f.OtherCostAmt * e.ShippedQty) AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, b.TotalShippedQty AS FullQty, 1 AS IsReversalEntry, -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM Invoice a
        INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.ShipmentId = @ShipmentId AND b.Status = 1
        INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.Status = 1
        INNER JOIN Product d ON c.ProductId = d.ProductId
        INNER JOIN SunInterfaceType st ON st.SunInterfaceTypeId = @SunInterfaceTypeId
        INNER JOIN ShipmentDetail e ON a.ShipmentId = e.ShipmentId AND e.Status = 1
        INNER JOIN OtherCost f ON e.ShipmentDetailId = f.ShipmentDetailId AND  f.OtherCostTypeId = st.OtherCostTypeId AND f.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender x ON x.AppId = 9 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN x.StartDate AND x.EndDate
        LEFT JOIN ExchangeRate y ON y.CurrencyId = 3 AND y.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN y.EffectiveDateFrom AND y.EffectiveDateTo
        LEFT JOIN ExchangeRate z ON z.CurrencyId = 4 AND z.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN z.EffectiveDateFrom AND z.EffectiveDateTo
        LEFT JOIN ExchangeRate zc ON zc.CurrencyId = b.SellCurrencyId AND zc.ExchangeRateTypeId = 1 AND CONVERT(datetime, CONVERT(varchar, GETDATE(), 103), 103) BETWEEN zc.EffectiveDateFrom AND zc.EffectiveDateTo        
        GROUP BY a.ShipmentId, x.BudgetYear, x.Period, a.InvoiceDate, c.ContractNo, c.NSLPONo, b.DeliveryNo,
        c.OfficeId, c.DeptId, c.ProductTeamId, c.ProductId, c.SeasonId, b.VendorId,
        c.CustomerId, b.TermOfPurchaseId, b.CustomerDestinationId, c.TradingAgencyId,
        f.CurrencyId, b.PaymentTermId, b.CountryOfOriginId, d.DesignSourceId, b.WithOPRFabric, a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear,
        a.SequenceNo, a.InvoiceUploadDate, b.TotalShippedQty, c.PiecesPerPack, c.PackingUnitId, a.SupplierInvoiceNo, 
        c.SetSplitCount, b.QACommissionPercent, b.VendorPaymentDiscountPercent, b.LabTestIncome, c.UKSupplierCode, a.NSLCommissionAmt,
        b.TotalShippedAmt, a.InvoiceSellExchangeRate, y.ExchangeRate, b.TotalShippedNetFOBAmtAfterDiscount, a.InvoiceBuyExchangeRate,
        b.TotalShippedSupplierGmtAmtAfterDiscount, a.InputVATActualAmt, a.OutputVATActualAmt,
        a.ImportDutyActualAmt, z.ExchangeRate, c.IsNextMfgOrder, c.IsPOIssueToNextMfg, b.IsMockShopSample, b.IsStudioSample, a.IsSelfBilledOrder
        
        SELECT * FROM #SunInterfaceLog
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNSLedSales_Duty" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.InvoiceDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.InvoiceNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId, 1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 1 AS TradingAgencyId,
        ccy.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, an.CreatedOn AS InvoiceUploadDate, ROUND(an.TotalNSCommAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.TotalNSCommAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.FileId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.TotalNSCommAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.TotalNSCommAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM NSLedImportFile an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.InvoiceDate BETWEEN w.StartDate AND w.EndDate
        --AND an.FileId = 1371
        AND an.IsInterfaced = 0 AND an.FiscalYear = @FiscalYear AND an.Period = @Period AND an.IsDutiable = 1
        --INNER JOIN NSLedSales sa ON an.FileId = sa.FileId AND sa.Status = 1 
        INNER JOIN NSLDB..Currency ccy ON ccy.CurrencyId = an.CurrencyId
        LEFT JOIN ExchangeRate u ON ccy.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.InvoiceDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.InvoiceDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 

        SELECT * FROM #SunInterfaceLog ORDER BY InvoiceUploadDate
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualNSLedSales_NonDuty" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.InvoiceDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.InvoiceNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, 0 AS DeptId, 0 AS ProductTeamId, 0 AS ProductId, 0 AS SeasonId, 0 AS VendorId,
        0 AS CustomerId, 1 AS TermOfPurchaseId, 0 AS CustomerDestinationId, 1 AS TradingAgencyId,
        ccy.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, an.CreatedOn AS InvoiceUploadDate, ROUND(an.TotalNSCommAmt * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.TotalNSCommAmt AS OtherAmt,
        0 AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.FileId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.TotalNSCommAmt * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.TotalNSCommAmt AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        INTO #SunInterfaceLog
        FROM NSLedImportFile an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.InvoiceDate BETWEEN w.StartDate AND w.EndDate
        --AND an.FileId = 1371
        AND an.IsInterfaced = 0 AND an.FiscalYear = @FiscalYear AND an.Period = @Period AND an.IsDutiable = 0
        --INNER JOIN NSLedSales sa ON an.FileId = sa.FileId AND sa.Status = 1 
        INNER JOIN NSLDB..Currency ccy ON ccy.CurrencyId = an.CurrencyId
        LEFT JOIN ExchangeRate u ON ccy.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.InvoiceDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.InvoiceDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 

        SELECT * FROM #SunInterfaceLog ORDER BY InvoiceUploadDate
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>
    
    <dataCommand name="GetActualUKDiscountClaim" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.UKDebitNoteReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, an.CreatedOn AS InvoiceUploadDate, ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.ClaimId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, an.Qty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKDiscountClaim an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.UKDebitNoteReceivedDate BETWEEN w.StartDate AND w.EndDate
        AND an.HasUKDN = 1 AND an.IsInterfaced = 0  AND an.Status = 1
        LEFT JOIN NSLDB..OfficeStructure o ON an.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 

        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        b.ReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, b.CreatedOn AS InvoiceUploadDate, ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, b.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, b.ClaimRefundId * -1) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, b.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKDiscountClaim an INNER JOIN UKDiscountClaimRefund b ON an.HasUKDN = 1 AND an.ClaimId = b.ClaimId AND b.Status = 1 AND b.IsInterfaced = 0 AND an.Status = 1
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND b.ReceivedDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN NSLDB..OfficeStructure o ON o.OfficeStructureId = an.ProductTeamId
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) ) r
        
        SELECT * FROM #SunInterfaceLog ORDER BY InvoiceUploadDate
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetActualUKDiscountClaimClearing" type="Text">
      <commandText>
        <![CDATA[
        SELECT IDENTITY(int, -1, -1) AS SunInterfaceLogId, r.*
        INTO #SunInterfaceLog
        FROM (

        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        an.UKDebitNoteReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, an.CreatedOn AS InvoiceUploadDate, ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, an.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar,an.ClaimId) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(an.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, an.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, an.Qty AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKDiscountClaim an 
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND an.UKDebitNoteReceivedDate BETWEEN w.StartDate AND w.EndDate
        AND an.HasUKDN = 1 AND an.IsInterfaced = 1  AND an.Status = 1 AND an.WorkflowStatusId = 1
        LEFT JOIN NSLDB..OfficeStructure o ON an.ProductTeamId = o.OfficeStructureId 
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND an.UKDebitNoteReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE 1 @TermOfPurchaseIdList AND 1 @TradingAgencyIdList AND 1 @CustomerDestinationIdList
        AND an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) 

        UNION ALL
        
        SELECT @SunInterfaceTypeId AS SunInterfaceTypeId,
        0 AS ShipmentId, 0 AS SplitShipmentId, @FiscalYear AS FiscalYear, @Period AS Period,
        b.ReceivedDate AS TransactionDate, 'N/A' AS ContractNo, ISNULL(an.UKDebitNoteNo, '') AS NSLPONo, 0 AS DeliveryNo,
        an.OfficeId, ISNULL(o.ParentId,0) AS DeptId, an.ProductTeamId, 0 AS ProductId, 0 AS SeasonId, an.VendorId,
        0 AS CustomerId, an.TermOfPurchaseId AS TermOfPurchaseId, 0 AS CustomerDestinationId, 
        ISNULL((SELECT TOP 1 TradingAgencyId FROM Contract cc INNER JOIN Shipment dd ON cc.ContractId = dd.ContractId AND cc.Status = 1 AND cc.OfficeId = an.OfficeId AND cc.ProductTeamId = an.ProductTeamId AND dd.VendorId = an.VendorId
         INNER JOIN Product ee ON cc.ProductId = ee.ProductId AND ee.ItemNo = an.ItemNo), 1) AS TradingAgencyId,
        an.CurrencyId AS CurrencyId, 0 AS PaymentTermId, 0 AS CountryOfOriginId, 0 AS DesignSourceId, 0 AS WithOPRFabric, NULL AS InvoicePrefix, 0 AS InvoiceSeq, 0 AS InvoiceYear,
        NULL AS SequenceNo, b.CreatedOn AS InvoiceUploadDate, ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS BaseAmt, b.Amount AS OtherAmt,
        an.Qty AS Qty,
        0 AS PiecesPerPack, 0 AS PackingUnitId, NULL AS SupplierInvoiceNo, CONVERT(varchar, b.ClaimRefundId * -1) AS RefNo,
        NULL AS DCNoteNo, 0 AS BaseTax, 0 AS OtherTax, 0 AS SetSplitCount, 0 AS QACommissionPercent,
        0 AS VendorPaymentDiscountPercent, 0 AS LabTestIncome, 'N/A' AS UKSupplierCode, 0 AS SalesCommission,
        ROUND(0, 2) AS TotalShippedAmt,
        ROUND(0, 2) AS TotalShippedNetFOBAmt,
        ROUND(0, 2) AS TotalShippedSupplierGmtAmt,
        0 AS UTInputVATAmt,
        0 AS UTOutputVATAmt,
        0 AS UTImportDuty,
        ROUND(ISNULL(0, 0), 2) AS UTImportDutyInBaseCurrency,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedNetFOBAmt,
        ROUND(ISNULL(0, 0), 2) AS UTTotalShippedSupplierGmtAmt,
        ROUND(ISNULL(0, 0), 2) AS UTSalesCommission,
        0 AS IsNextMfgOrder, 0 AS IsPOIssueToNextMfg, 0 AS IsMockShopSample, 0 AS IsStudioSample, 0 AS IsSelfBilledOrder, @CategoryId AS CategoryId,
        ROUND(b.Amount * u.ExchangeRate / x.ExchangeRate, 2) AS FullBaseAmt, b.Amount AS FullOtherAmt,
        0 AS FullBaseTax, 0 AS FullOtherTax, 0 AS FullQty, 0 AS IsReversalEntry,
        -1 AS QueueId, GETDATE() AS CreatedOn
        FROM UKDiscountClaim an INNER JOIN UKDiscountClaimRefund b ON an.HasUKDN = 1 AND an.ClaimId = b.ClaimId AND b.Status = 1 AND b.IsInterfaced = 1 AND an.Status = 1 AND b.WorkflowStatusId = 1
        INNER JOIN NSLDB..AccountFinancialCalender w ON w.AppId = 9 AND b.ReceivedDate BETWEEN w.StartDate AND w.EndDate
        LEFT JOIN NSLDB..OfficeStructure o ON o.OfficeStructureId = an.ProductTeamId
        LEFT JOIN ExchangeRate u ON an.CurrencyId = u.CurrencyId AND u.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN u.EffectiveDateFrom AND u.EffectiveDateTo
        LEFT JOIN ExchangeRate x ON x.CurrencyId = 3 AND x.ExchangeRateTypeId = 1 AND b.ReceivedDate BETWEEN x.EffectiveDateFrom AND x.EffectiveDateTo
        WHERE an.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) ) r
        
        SELECT * FROM #SunInterfaceLog ORDER BY InvoiceUploadDate
        DROP TABLE #SunInterfaceLog
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
        <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="Period" name="@Period" type="Int" direction="Input" />
        <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
        <param key="TermOfPurchaseIdList" name="@TermOfPurchaseIdList" type="ArrayInt" direction="Input" />
        <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input" />
        <param key="CustomerDestinationIdList" name="@CustomerDestinationIdList" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SunInterfaceLog" />
    </tableMappings>
  </dataSetAdapter>


</dataOperations>