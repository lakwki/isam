<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">

  <dataSetAdapter name="AdvancePaymentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentByKey" type="Text">
        <commandText>
          SELECT * FROM AdvancePayment WHERE PaymentId = @PaymentId
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentByCriteria" type="Text">
        <commandText>
          <![CDATA[
          SELECT DISTINCT a.* FROM AdvancePayment a
          INNER JOIN AdvancePaymentOrderDetail b
          INNER JOIN Shipment c
          INNER JOIN Invoice d ON (c.ShipmentId = d.ShipmentId )
          INNER JOIN Contract e ON (c.ContractId = e.ContractId)
          ON (b.ShipmentId = c.ShipmentId)
          ON(a.PaymentId = b.PaymentId)
          WHERE  a.Status = 1 AND a.PaymentTypeId = 1
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          AND (@PaymentNo = '' OR a.PaymentNo = @PaymentNo)
          AND (@FromDate IS NULL OR a.PaymentDate BETWEEN @FromDate AND @ToDate)
          AND (@OfficeId = -1 OR a.OfficeId = @OfficeId)
          AND (@LCBillRefNo = '' OR d.LCBillRefNo = @LCBillRefNo) AND (@ContractNo = '' OR e.ContractNo = @ContractNo)
          AND ((@PaymentStatusId = 1)  OR
                 (@PaymentStatusId = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = a.PaymentId))
          OR (@PaymentStatusId = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = a.PaymentId)))
          
          /*
          AND ((@PaymentStatusId = 1)  OR
                 (@PaymentStatusId = 2 AND NOT EXISTS(SELECT x.* FROM AdvancePaymentOrderDetail x 
                                            INNER JOIN Invoice y ON PaymentId = a.PaymentId AND x.ShipmentId = y.ShipmentId AND x.Status = 1 
                                            WHERE ((x.ExpectedDeductAmt - x.ActualDeductAmt) <> 0) OR x.SettlementDATE IS NULL))
          OR (@PaymentStatusId = 3 AND EXISTS(SELECT x.* FROM AdvancePaymentOrderDetail x 
                                            INNER JOIN Invoice y ON PaymentId = a.PaymentId AND x.ShipmentId = y.ShipmentId AND x.Status = 1 
                                            WHERE ((x.ExpectedDeductAmt - x.ActualDeductAmt) <> 0) OR x.SettlementDATE IS NULL)))
          */
          UNION

          SELECT DISTINCT a.* FROM AdvancePayment a
          LEFT JOIN AdvancePaymentInstalmentDetail b ON (a.PaymentId = b.PaymentId AND b.Status = 1)
          WHERE  a.Status = 1 AND a.PaymentTypeId = 2
          AND @ContractNo = '' AND @LCBillRefNo = ''
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          AND (@OfficeId = -1 OR a.OfficeId = @OfficeId)
          AND (@PaymentNo = '' OR a.PaymentNo = @PaymentNo)
          AND (@FromDate IS NULL OR a.PaymentDate BETWEEN @FromDate AND @ToDate)
          AND ((@PaymentStatusId = 1)  OR
                 (@PaymentStatusId = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = a.PaymentId))
          OR (@PaymentStatusId = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = a.PaymentId)))
          
          /*
          AND ((@PaymentStatusId = 1)  OR
                 (@PaymentStatusId = 2 AND NOT EXISTS(SELECT * FROM AdvancePaymentInstalmentDetail WHERE Status = 1 
                                            AND PaymentAmt <> CASE WHEN SettlementDate IS NULL THEN 0 ELSE PaymentAmt END))
          OR (@PaymentStatusId = 3 AND EXISTS(SELECT * FROM AdvancePaymentInstalmentDetail WHERE Status = 1 
                                            AND PaymentAmt <> CASE WHEN SettlementDate IS NULL THEN 0 ELSE PaymentAmt END)))
          */
          ]]>
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="PaymentNo" name="@PaymentNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="LCBillRefNo" name="@LCBillRefNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
          <param key="PaymentStatusId" name="@PaymentStatusId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxAdvancePaymentId" type="Text">
        <commandText>
          SELECT MAX(PaymentId) FROM AdvancePayment WHERE PaymentTypeId = @PaymentTypeId
        </commandText>
        <parameters>
          <param key="PaymentTypeId" name="@PaymentTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxAdvancePaymentNo" type="Text">
        <commandText>
          SELECT MAX(PaymentNo) FROM AdvancePayment WHERE PaymentNo LIKE @PaymentNoPrefix + '%'
        </commandText>
        <parameters>
          <param key="PaymentNoPrefix" name="@PaymentNoPrefix" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentSummary" type="Text">
        <commandText>
          SELECT PaymentTypeId,
          TotalAmt - ISNULL((SELECT SUM(ActualDeductAmt) FROM AdvancePaymentOrderDetail WHERE PaymentId = @PaymentId AND Status = 1 AND SettlementDate IS NOT NULL), 0)
          - ISNULL((SELECT SUM(PaymentAmt) FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND Status = 1 AND SettlementDate IS NOT NULL), 0) AS Balance,
          TotalAmt - ISNULL((SELECT SUM(ExpectedDeductAmt) FROM AdvancePaymentOrderDetail WHERE PaymentId = @PaymentId AND Status = 1) ,0)
          - ISNULL((SELECT SUM(ExpectedAmt) FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND Status = 1), 0) AS Variance,
          ISNULL((SELECT SUM(ActualDeductAmt) FROM AdvancepaymentOrderDetail a INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId AND a.PaymentId = @PaymentId AND a.Status = 1
          AND b.WorkflowStatusId NOT IN (3,5,9) AND a.SettlementDate IS NULL AND a.ActualDeductAmt > 0), 0) AS RecoveryPlanAmt
          FROM AdvancePayment
          WHERE Paymentid = @PaymentId AND PaymenttypeId = 1
          UNION ALL
          SELECT PaymentTypeId,
          TotalAmt - ISNULL((SELECT SUM(PaymentAmt) FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND Status = 1 AND SettlementDate IS NOT NULL), 0) AS Balance,
          TotalAmt - ISNULL((SELECT SUM(PaymentAmt) FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId and Status = 1), 0) AS Variance,
          ISNULL((SELECT SUM(PaymentAmt) FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND Status = 1 AND SettlementDate IS NULL), 0) AS RecoveryPlanAmt
          FROM AdvancePayment
          WHERE PaymentId = @PaymentId AND PaymentTypeId = 2
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePayment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentActionHistoryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentActionHistoryList" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentActionHistory WHERE PaymentId = @PaymentId AND Status = 1 ORDER BY ActionOn DESC
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentActionHistoryByKey" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentActionHistory WHERE ActionHistoryId = @ActionHistoryId
        </commandText>
        <parameters>
          <param key="ActionHistoryId" name="@ActionHistoryId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxActionHistoryId" type="Text">
        <commandText>
          SELECT MAX(ActionHistoryId) FROM AdvancePaymentActionHistory
        </commandText>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentActionHistory" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentOrderDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentOrderDetailByKey" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentOrderDetail WHERE PaymentId = @PaymentId AND ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentOrderDetailList" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentOrderDetail
          WHERE Status = 1
          AND (@PaymentId = -1 OR PaymentId = @PaymentId)
          AND (@ShipmentId = -1 OR ShipmentId = @ShipmentId)
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="Int" direction="Input" />
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentOrderDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentInstalmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentInstalmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND PaymentDate = @PaymentDate
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
          <param key="PaymentDate" name="@PaymentDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentInstalmentDetailList" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND Status = 1
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentInstalmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentBalanceSettlementApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentBalanceSettlementByKey" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND PaymentDate = @PaymentDate
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
          <param key="PaymentDate" name="@PaymentDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentBalanceSettlementList" type="Text">
        <commandText>
          SELECT * FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND Status = 1
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentBalanceSettlement" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentReport" type="Text">
        <commandText>
          SELECT * FROM
          (SELECT a.PaymentId, a.PaymentTypeId, l.DisplayName, a.PayableTo, c.OfficeId, c.OfficeCode, a.PaymentNo, a.PaymentDate, a.VendorId, d.Name AS VendorName, a.CurrencyId, e.CurrencyCode,a.TotalAmt AS Advance_Amt,
          f.shipmentid, g.contractno, f.deliveryno, dbo.fn_formatinvoiceno(h.invoiceprefix, h.invoiceseq, h.invoiceyear) as invoiceno,
          i.currencycode as contract_currency, b.ExpectedDeductAmt as deduction_amt, case when f.workflowstatusid = 9 then null else f.customeratwarehousedate end as customeratwarehousedate, f.SupplierAtWarehouseDate,
          j.description as workflowstatus, h.lcbillrefno, k.paymenttermdesc, h.invoicedate, b.SettlementDate as apdate, i.currencycode as deduct_currency,
          b.ActualDeductAmt as actual_deduct_amt,
          b.ActualDeductAmt as OriActualDeductAmt,
          b.ExpectedDeductAmt - b.ActualDeductAmt as balance,
          b.ExpectedDeductAmt - CASE WHEN b.SettlementDate IS NULL THEN 0 ELSE b.ActualDeductAmt END as apremaining,
          --DATEDIFF(day, a.paymentdate,  h.apdate) As RepaymentTerm,
          --DATEDIFF(day, a.paymentdate, f.customeratwarehousedate) As ExpectedRepaymentTerm,
          --(a.InterestChargedAmt/(a.totalamt - a.InterestChargedAmt))*100 As InterestPercentage, a.InterestChargedAmt As InterestAmt, f.customeratwarehousedate as LinePaymentDate, a.Remark
          a.InterestRate As InterestPercentage, a.InterestChargedAmt As InterestAmt, f.customeratwarehousedate as LinePaymentDate, a.Remark
          FROM AdvancePayment a inner join advancepaymentorderdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid
          inner join shipment f on b.shipmentid = f.shipmentid
          inner join contract g on f.contractid = g.contractid
          inner join invoice h on h.shipmentid = f.shipmentid
          inner join nsldb..currency i on i.currencyid = f.buycurrencyid
          inner join workflowstatus j on j.workflowstatusid = f.workflowstatusid and RecordTypeId = 1
          inner join paymentterm k on k.paymenttermid = f.paymenttermid
          left join nsldb..userinfo l on a.InitiatedBy = l.userId and l.Status = 'A'

          union

          select a.PaymentId, a.paymenttypeid, l.DisplayName, a.PayableTo, c.officeId, c.officecode, a.paymentno, a.paymentdate, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,a.totalamt as advance_amt,
          -1 as shipmentid, CONVERT(VARCHAR(10), b.paymentdate, 103) as contractno, -1 as deliveryno, '' as invoiceno,
          e.currencycode as contract_currency, b.expectedamt as deduction_amt, b.paymentdate as customeratwarehousedate, null as SupplierAtWarehouseDate,
          'N/A' as workflowstatus, '' as lcbillrefno, 'OA' as paymenttermdesc,  null as invoicedate, b.settlementdate as apdate, e.currencycode as deduct_currency,
          --case when b.settlementdate is null then 0 else b.paymentAmt end as actual_deduct_amt, b.expectedamt - case when b.settlementdate is null then 0 else b.paymentAmt end as balance, --DATEDIFF(day, a.paymentdate,  h.apdate) As RepaymentTerm,
          b.paymentAmt as actual_deduct_amt, b.paymentAmt AS OriActualDeductAmt, b.expectedamt - b.paymentAmt as balance,
          b.expectedamt - case when b.settlementdate is null then 0 else b.paymentAmt end as apremaining,
          --DATEDIFF(day, a.paymentdate,  h.apdate) As RepaymentTerm,
          --DATEDIFF(day, a.paymentdate, f.customeratwarehousedate) As ExpectedRepaymentTerm,
          a.InterestRate As InterestPercentage, InterestChargedAmt As InterestAmt, b.PaymentDate AS LinePaymentDate, a.Remark
          FROM AdvancePayment a inner join advancepaymentbalancesettlement b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid
          left join nsldb..userinfo l on a.InitiatedBy = l.userId and l.Status = 'A'

          union

          select a.PaymentId, a.paymenttypeid, l.DisplayName, a.PayableTo, c.officeId, c.officecode, a.paymentno, a.paymentdate, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,a.totalamt as advance_amt,
          -1 as shipmentid, CONVERT(VARCHAR(10), b.paymentdate, 103) as contractno, -1 as deliveryno, '' as invoiceno,
          e.currencycode as contract_currency, b.expectedamt as deduction_amt, b.paymentDate as customeratwarehousedate, null as SupplierAtWarehouseDate,
          'N/A' as workflowstatus, '' as lcbillrefno, 'OA' as paymenttermdesc, null as invoicedate, b.settlementdate as apdate, e.currencycode as deduct_currency,
          --case when b.settlementdate is null then 0 else b.paymentAmt end as actual_deduct_amt, b.paymentamt - b.paymentAmt as balance,
          b.paymentAmt as actual_deduct_amt, b.paymentAmt AS OriActualDeductAmt, b.expectedamt - b.paymentAmt as balance,
          b.paymentamt - case when b.settlementdate is null then 0 else b.paymentAmt end as apremaining,
          --DATEDIFF(day, a.paymentdate, b.paymentdate) As RepaymentTerm, DATEDIFF(day, a.paymentdate, b.paymentdate) As ExpectedRepaymentTerm,
          a.InterestRate As InterestPercentage, a.InterestChargedAmt As InterestAmt, b.PaymentDate AS LinePaymentDate, a.Remark
          from advancepayment a inner join advancepaymentinstalmentdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 2 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid
          left join nsldb..userinfo l on a.InitiatedBy = l.userId and l.Status = 'A'

          ) As Temp_AdvancePayment_Report

          WHERE (@PaymentDateFrom IS NULL OR paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= paymentdate)
          AND (@DeductionDateFrom IS NULL OR apdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= apdate)
          AND (@VendorId = -1 OR VendorId = @VendorId)
          AND (@OfficeId = -1 or OfficeId = @OfficeId)
          AND((@PaymentStatus = 1)
          OR (@PaymentStatus = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId))
          OR (@PaymentStatus = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId)))

          ORDER BY PaymentNo, LinePaymentDate, contractno
        </commandText>
        <parameters>
          <param key="PaymentDateFrom" name="@PaymentDateFrom" type="DateTime" direction="Input" />
          <param key="PaymentDateTo" name="@PaymentDateTo" type="DateTime" direction="Input" />
          <param key="DeductionDateFrom" name="@DeductionDateFrom" type="DateTime" direction="Input" />
          <param key="DeductionDateTo" name="@DeductionDateTo" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentReportMG" type="Text">
        <commandText>
          SELECT
          Temp_AdvancePayment_Report.PaymentId
          , a.PaymentTypeId
          , l.DisplayName
          , a.PayableTo
          , c.officeId
          , c.OfficeCode
          , a.PaymentNo
          , a.PaymentDate
          , d.VendorId
          , d.name as vendorname
          , Temp_AdvancePayment_Report.CurrencyId
          , e1.CurrencyCode AS CurrencyCode
          , Temp_AdvancePayment_Report.advance_amt
          , -1 AS shipmentid, NULL AS contractno, -1 as deliveryno, '' as invoiceno
          , e1.CurrencyCode as contract_currency
          , NULL AS deduction_amt
          , Temp_AdvancePayment_Report.customeratwarehousedate
          , NULL AS SupplierAtWarehouseDate
          , -1 AS workflowstatus
          , NULL AS lcbillrefno
          , '' AS paymenttermdesc
          , NULL AS invoicedate
          , Temp_AdvancePayment_Report.apdate
          , e2.currencycode AS deduct_currency
          , actual_deduct_amt
          , OriActualDeductAmt
          , NULL AS balance
          , Temp_AdvancePayment_Report.apremaining
          , Temp_AdvancePayment_Report.InterestPercentage
          , Temp_AdvancePayment_Report.InterestAmt
          , Temp_AdvancePayment_Report.LinePaymentDate
          , a.Remark
          , ISNULL(a.IsC19, 0) AS IsC19
          , ISNULL(a.FLRefNo, '') AS FLRefNo
          FROM
          (

          select paymentno, PaymentId, paymenttypeid
          , SUM(advance_amt)/COUNT(advance_amt) AS [advance_amt], SUM(InterestAmt)/COUNT(InterestAmt) AS [InterestAmt], SUM(InterestPercentage)/COUNT(InterestPercentage) AS [InterestPercentage]
          , apdate AS apdate
          , SUM(actual_deduct_amt) AS actual_deduct_amt --, MAX(CustomerAtWarehouseDate)
          , SUM(OriActualDeductAmt) AS OriActualDeductAmt
          , SUM(apremaining) AS apremaining
          , MAX(customeratwarehousedate) AS customeratwarehousedate
          , MAX(LinePaymentDate) AS LinePaymentDate
          , currencyId, deduct_currencyid

          FROM (
          select a.PaymentId, a.paymenttypeid, a.paymentno, a.paymentdate, a.totalamt as advance_amt,
          a.currencyid, i.CurrencyId as deduct_currencyid,
          f.shipmentid,
          b.ExpectedDeductAmt as deduction_amt,
          case when f.workflowstatusid = 9 then null else dateadd(d, case when f.paymenttermid = 1 then 14 else 14 end, f.customeratwarehousedate) end as customeratwarehousedate, f.SupplierAtWarehouseDate,
          b.SettlementDate as apdate, i.currencycode as deduct_currency,
          (CASE WHEN b.SettlementDate IS NOT NULL THEN b.ActualDeductAmt ELSE 0 END) as actual_deduct_amt,
          (b.ActualDeductAmt) as OriActualDeductAmt,
          (b.ExpectedDeductAmt - b.ActualDeductAmt) as balance,
          (b.ExpectedDeductAmt - CASE WHEN b.SettlementDate IS NULL THEN 0 ELSE b.ActualDeductAmt END) as apremaining,
          a.InterestRate As InterestPercentage, a.InterestChargedAmt As InterestAmt, f.customeratwarehousedate as LinePaymentDate
          FROM AdvancePayment a inner join advancepaymentorderdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          inner join shipment f on b.shipmentid = f.shipmentid
          inner join nsldb..currency i on i.currencyid = f.buycurrencyid
          inner join invoice h on h.shipmentid = f.shipmentid

          UNION

          select a.PaymentId, a.paymenttypeid, a.paymentno, a.paymentdate, a.totalamt as advance_amt,
          a.currencyid, a.currencyid as deduct_currencyid,
          -1 as shipmentid,
          b.expectedamt as deduction_amt,
          b.PaymentDate as customeratwarehousedate, null as SupplierAtWarehouseDate,
          b.settlementdate as apdate, NULL as deduct_currency,
          (CASE WHEN b.settlementdate IS NOT NULL THEN b.paymentAmt ELSE 0 END) as actual_deduct_amt,
          (b.paymentAmt) as OriActualDeductAmt,
          (b.expectedamt - b.paymentAmt) as balance,
          (b.expectedamt - CASE WHEN b.settlementdate is null THEN 0 ELSE b.paymentAmt END) as apremaining,
          a.InterestRate As InterestPercentage, InterestChargedAmt As InterestAmt, b.PaymentDate AS LinePaymentDate
          FROM AdvancePayment a inner join advancepaymentbalancesettlement b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL

          UNION

          select a.PaymentId, a.paymenttypeid, a.paymentno, a.paymentdate, a.totalamt as advance_amt,
          a.currencyid, a.currencyid as deduct_currencyid,
          -1 as shipmentid,
          b.expectedamt as deduction_amt,
          b.paymentdate as customeratwarehousedate, null as SupplierAtWarehouseDate,
          b.settlementdate as apdate, NULL as deduct_currency,
          (CASE WHEN b.settlementdate IS NOT NULL THEN b.paymentAmt ELSE 0 END) as actual_deduct_amt,
          (b.paymentAmt) as OriActualDeductAmt,
          b.expectedamt - b.paymentAmt as balance,
          b.paymentamt - case when b.settlementdate is null then 0 else b.paymentAmt end as apremaining,
          a.InterestRate As InterestPercentage, a.InterestChargedAmt As InterestAmt, b.PaymentDate AS LinePaymentDate
          from advancepayment a inner join advancepaymentinstalmentdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 2 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL


          ) As Temp_APR_Aggregation
          GROUP BY Temp_APR_Aggregation.PaymentId, Temp_APR_Aggregation.paymentno, Temp_APR_Aggregation.paymenttypeid, Temp_APR_Aggregation.apdate
          , Temp_APR_Aggregation.currencyid, Temp_APR_Aggregation.deduct_currencyid

          ) AS Temp_AdvancePayment_Report

          inner JOIN advancepayment a on (a.PaymentId = Temp_AdvancePayment_Report.PaymentId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e1 on Temp_AdvancePayment_Report.currencyid = e1.currencyid
          inner join nsldb..currency e2 on Temp_AdvancePayment_Report.deduct_currencyid = e2.currencyid
          left join nsldb..userinfo l on a.InitiatedBy = l.userId and l.Status = 'A'

          WHERE (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR Temp_AdvancePayment_Report.apdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= Temp_AdvancePayment_Report.apdate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          AND (@OfficeId = -1 or a.OfficeId = @OfficeId)
          AND((@PaymentStatus = 1)
          OR (@PaymentStatus = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId))
          OR (@PaymentStatus = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId))
          OR (@PaymentStatus = 4 AND EXISTS(SELECT * FROM vw_AdvancePaymentWithNoRecoveryBalance WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId)))

          ORDER BY c.OfficeCode, PaymentNo, Temp_AdvancePayment_Report.apdate, LinePaymentDate--, contractno
        </commandText>
        <parameters>
          <param key="PaymentDateFrom" name="@PaymentDateFrom" type="DateTime" direction="Input" />
          <param key="PaymentDateTo" name="@PaymentDateTo" type="DateTime" direction="Input" />
          <param key="DeductionDateFrom" name="@DeductionDateFrom" type="DateTime" direction="Input" />
          <param key="DeductionDateTo" name="@DeductionDateTo" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdvancePaymentSummaryReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdvancePaymentSummaryReport" type="Text">
        <commandText>
          Select * INTO #AdvancePaymentSummary from(
          select officecode,vendorId,vendorname,currencycode,sum(distinct advance_amt) as totaladvanceamt,sum(actual_deduct_amt) as totaldeduceamt,
          --sum(distinct advance_amt)-sum(actual_deduct_amt) as totaloutstandingamt
          sum(balance) as totaloutstandingamt
          from(
          select * from(
          select * from(
          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          round(case when b.settlementdate is not null then b.ActualDeductAmt else 0 end,2) as actual_deduct_amt,
          round(b.ExpectedDeductAmt - CASE WHEN b.SettlementDate IS NULL THEN 0 ELSE b.ActualDeductAmt END,2) as balance
          from advancepayment a inner join advancepaymentorderdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.SettlementDate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.SettlementDate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid
          INNER JOIN Invoice z on z.ShipmentId = b.ShipmentId

          union all

          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          --case when b.settlementdate is null then 0 else round(b.paymentAmt,2) end as actual_deduct_amt,
          round(case when b.settlementdate is not null then b.paymentAmt else 0 end,2) as actual_deduct_amt,
          case when b.settlementdate is null then round(b.expectedamt - 0,2) else round(b.expectedamt -b.paymentAmt,2) end as balance
          from advancepayment a inner join advancepaymentbalancesettlement b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.settlementdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.settlementdate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid


          union all

          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          case when b.settlementdate is null then 0 else round(b.paymentAmt,2) end as actual_deduct_amt,
          case when b.settlementdate is null then round(b.expectedamt - 0,2) else round(b.expectedamt -b.paymentAmt,2) end as balance
          from advancepayment a inner join advancepaymentinstalmentdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 2 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.settlementdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.settlementdate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid

          ) As Temp_AdvancePayment_Report
          WHERE
          (@OfficeId = -1 or OfficeId = @OfficeId)
          AND ((@PaymentStatus = 1)
          OR (@PaymentStatus = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId))
          OR (@PaymentStatus = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId)))) As Temp_AdvancePayment_Report2) As Temp_AdvancePayment_Report3
          Group by  officecode,vendorId,vendorname,currencycode) As Temp_AdvancePayment_Report4

          SELECT s.*, CONVERT(INT, ISNULL(COUNT(bb.ShipmentId),0)) AS futureordercnt, CONVERT(decimal, ISNULL(SUM(bb.TotalPOAmt * ISNULL(ex.ExchangeRate, ex2.ExchangeRate) / ISNULL(ex1.ExchangeRate, ex3.ExchangeRate)),0)) AS totalsales, convert(varchar, MAX(bb.CustomerAtWarehouseDate), 103) AS last_cus_awh_date
          FROM Invoice aa INNER JOIN Shipment bb ON aa.ShipmentId = bb.ShipmentId AND bb.Status = 1 AND aa.InvoiceDate IS NULL and bb.WorkflowStatusId NOT IN (3,5,9) AND bb.IsMockShopSample = 0 AND bb.IsStudioSample = 0
          LEFT JOIN ExchangeRate ex ON bb.CustomerAtWarehouseDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo AND ex.ExchangeRateTypeId = 1 AND ex.Status = 1 AND bb.SellCurrencyId = ex.CurrencyId
          LEFT JOIN ExchangeRate ex1 ON bb.CustomerAtWarehouseDate BETWEEN ex1.EffectiveDateFrom AND ex1.EffectiveDateTo AND ex1.ExchangeRateTypeId = 1 AND ex1.Status = 1 AND 3 = ex1.CurrencyId
          LEFT JOIN ExchangeRate ex2 ON ex2.EffectiveTypeId = 0 AND ex2.ExchangeRateTypeId = 1 AND ex2.Status = 1 AND bb.SellCurrencyId = ex2.CurrencyId
          LEFT JOIN ExchangeRate ex3 ON ex3.EffectiveTypeId = 0 AND ex3.ExchangeRateTypeId = 1 AND ex3.Status = 1 AND 3 = ex3.CurrencyId
          right join #AdvancePaymentSummary s on s.vendorId = bb.vendorId
          Group by  officecode,s.vendorId,vendorname,currencycode,totaladvanceamt,totaldeduceamt,totaloutstandingamt
          Order by  officecode, vendorname, currencycode asc

          DROP TABLE #AdvancePaymentSummary
        </commandText>
        <parameters>
          <param key="PaymentDateFrom" name="@PaymentDateFrom" type="DateTime" direction="Input" />
          <param key="PaymentDateTo" name="@PaymentDateTo" type="DateTime" direction="Input" />
          <param key="DeductionDateFrom" name="@DeductionDateFrom" type="DateTime" direction="Input" />
          <param key="DeductionDateTo" name="@DeductionDateTo" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentSummaryReportMG" type="Text">
        <commandText>
          Select * INTO #AdvancePaymentSummary from(
          select officecode,vendorId,vendorname,currencycode,
          sum(advance_amt) as totaladvanceamt,
          sum(InterestAmt) as totalinterestamt,
          sum(actual_deduct_amt) as totaldeduceamt,
          sum(balance) as totaloutstandingamt
          from(
          --select * from(
          select officecode,vendorId,vendorname,currencycode,
          sum(DISTINCT advance_amt) as advance_amt,
          sum(DISTINCT InterestAmt) as InterestAmt,
          sum(actual_deduct_amt) as actual_deduct_amt,
          sum(balance) as balance from (
          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          round(a.InterestChargedAmt, 2) As InterestAmt,
          round(case when b.settlementdate is not null then b.ActualDeductAmt else 0 end,2) as actual_deduct_amt,
          round(b.ExpectedDeductAmt - CASE WHEN b.SettlementDate IS NULL THEN 0 ELSE b.ActualDeductAmt END,2) as balance
          from advancepayment a inner join advancepaymentorderdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.SettlementDate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.SettlementDate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid
          INNER JOIN Invoice z on z.ShipmentId = b.ShipmentId


          union all

          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          round(a.InterestChargedAmt, 2) As InterestAmt,
          --case when b.settlementdate is null then 0 else round(b.paymentAmt,2) end as actual_deduct_amt,
          round(case when b.settlementdate is not null then b.paymentAmt else 0 end,2) as actual_deduct_amt,
          case when b.settlementdate is null then round(b.expectedamt - 0,2) else round(b.expectedamt -b.paymentAmt,2) end as balance
          from advancepayment a inner join advancepaymentbalancesettlement b on a.status = 1 and b.status = 1 and a.paymenttypeid = 1 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.settlementdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.settlementdate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid

          union all

          select a.PaymentId, c.officeId, c.officecode, a.vendorid, d.name as vendorname, a.currencyid, e.currencycode,round(a.totalamt,2) as advance_amt,
          round(a.InterestChargedAmt, 2) As InterestAmt,
          case when b.settlementdate is null then 0 else round(b.paymentAmt,2) end as actual_deduct_amt,
          case when b.settlementdate is null then round(b.expectedamt - 0,2) else round(b.expectedamt -b.paymentAmt,2) end as balance
          from advancepayment a inner join advancepaymentinstalmentdetail b on a.status = 1 and b.status = 1 and a.paymenttypeid = 2 and a.paymentId = b.paymentId AND a.PaymentDate IS NOT NULL
          AND (@PaymentDateFrom IS NULL OR a.paymentdate >= @PaymentDateFrom)
          AND (@PaymentDateTo IS NULL OR  @PaymentDateTo  >= a.paymentdate)
          AND (@DeductionDateFrom IS NULL OR b.settlementdate >= @DeductionDateFrom)
          AND (@DeductionDateTo IS NULL OR  @DeductionDateTo  >= b.settlementdate)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          inner join nsldb..office c on a.officeid = c.officeid
          inner join nslindustry..vendor d on a.vendorid = d.vendorid
          inner join nsldb..currency e on a.currencyid = e.currencyid

          ) As Temp_AdvancePayment_Report
          WHERE
          (@OfficeId = -1 or OfficeId = @OfficeId)
          AND ((@PaymentStatus = 1)
          OR (@PaymentStatus = 2 AND EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId))
          OR (@PaymentStatus = 3 AND NOT EXISTS(SELECT * FROM vw_FullySettledAdvancePayment WHERE PaymentId = Temp_AdvancePayment_Report.PaymentId)))
          GROUP BY PaymentId, officecode,vendorId,vendorname,currencycode
          --) As Temp_AdvancePayment_Report2

          ) As Temp_AdvancePayment_Report3
          Group by  officecode,vendorId,vendorname,currencycode

          ) As Temp_AdvancePayment_Report4

          --SELECT * from  #AdvancePaymentSummary Order by  officecode, vendorname, currencycode asc
          --DROP TABLE #AdvancePaymentSummary

          SELECT
          --s.*,
          s.officecode, s.vendorId, s.vendorname, s.currencycode,
          SUM(DISTINCT s.totaladvanceamt) as totaladvanceamt,
          SUM(DISTINCT s.totalinterestamt) as totalinterestamt,
          MAX(s.totaldeduceamt) as totaldeduceamt,
          MAX(s.totaloutstandingamt) as totaloutstandingamt,
          CONVERT(INT, ISNULL(COUNT(bb.ShipmentId),0)) AS futureordercnt, CONVERT(decimal, ISNULL(SUM(bb.TotalPOAmt * ISNULL(ex.ExchangeRate, ex2.ExchangeRate) / ISNULL(ex1.ExchangeRate, ex3.ExchangeRate)),0)) AS totalsales, convert(varchar, MAX(bb.CustomerAtWarehouseDate), 103) AS last_cus_awh_date
          FROM Invoice aa INNER JOIN Shipment bb ON aa.ShipmentId = bb.ShipmentId AND bb.Status = 1 AND aa.InvoiceDate IS NULL and bb.WorkflowStatusId NOT IN (3,5,9) AND bb.IsMockShopSample = 0 AND bb.IsStudioSample = 0
          LEFT JOIN ExchangeRate ex ON bb.CustomerAtWarehouseDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo AND ex.ExchangeRateTypeId = 1 AND ex.Status = 1 AND bb.SellCurrencyId = ex.CurrencyId
          LEFT JOIN ExchangeRate ex1 ON bb.CustomerAtWarehouseDate BETWEEN ex1.EffectiveDateFrom AND ex1.EffectiveDateTo AND ex1.ExchangeRateTypeId = 1 AND ex1.Status = 1 AND 3 = ex1.CurrencyId
          LEFT JOIN ExchangeRate ex2 ON ex2.EffectiveTypeId = 0 AND ex2.ExchangeRateTypeId = 1 AND ex2.Status = 1 AND bb.SellCurrencyId = ex2.CurrencyId
          LEFT JOIN ExchangeRate ex3 ON ex3.EffectiveTypeId = 0 AND ex3.ExchangeRateTypeId = 1 AND ex3.Status = 1 AND 3 = ex3.CurrencyId
          right join #AdvancePaymentSummary s on s.vendorId = bb.vendorId
          Group by  s.officecode,s.vendorId,s.vendorname,s.currencycode
          Order by  s.officecode, s.vendorname, s.currencycode asc

          DROP TABLE #AdvancePaymentSummary
        </commandText>
        <parameters>
          <param key="PaymentDateFrom" name="@PaymentDateFrom" type="DateTime" direction="Input" />
          <param key="PaymentDateTo" name="@PaymentDateTo" type="DateTime" direction="Input" />
          <param key="DeductionDateFrom" name="@DeductionDateFrom" type="DateTime" direction="Input" />
          <param key="DeductionDateTo" name="@DeductionDateTo" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentSummaryReportMGThisYear" type="Text">
        <commandText>
          SELECT c.BudgetYear, d.CurrencyCode, SUM(a.TotalAmt - a.InterestChargedAmt) AS PaymentAmt, SUM(a.InterestChargedAmt) AS InterestAmt, SUM(a.TotalAmt) AS TotalAmt,
          SUM(dbo.fn_getAdvancePaymentTotalActualDeduction(a.PaymentId)) as ActualDeductionAmt,
          SUM(a.TotalAmt) - SUM(dbo.fn_getAdvancePaymentTotalActualDeduction(a.PaymentId)) AS BalanceAmt
          FROM AdvancePayment a INNER JOIN NSLDB..AccountFinancialCalender b ON GETDATE() BETWEEN b.StartDate AND b.EndDate AND b.AppId = 13 AND b.Status = 1 AND a.Status = 1
          AND (@OfficeId = -1 or a.OfficeId = @OfficeId)
          AND a.PaymentDate IS NOT NULL
          INNER JOIN NSLDB..AccountFinancialCalender c ON a.PaymentDate BETWEEN c.StartDate AND c.EndDate AND c.AppId = 13 AND c.BudgetYear = b.BudgetYear
          INNER JOIN NSLDB..Currency d ON a.CurrencyId = d.CurrencyId
          GROUP BY d.CurrencyCode, c.BudgetYear
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentSummaryReportMGPreviousYear" type="Text">
        <commandText>
          SELECT c.BudgetYear, d.CurrencyCode, SUM(a.TotalAmt - a.InterestChargedAmt) AS PaymentAmt, SUM(a.InterestChargedAmt) AS InterestAmt, SUM(a.TotalAmt) AS TotalAmt,
          SUM(dbo.fn_getAdvancePaymentTotalActualDeduction(a.PaymentId)) AS ActualDeductionAmt,
          SUM(a.TotalAmt) - SUM(dbo.fn_getAdvancePaymentTotalActualDeduction(a.PaymentId)) AS BalanceAmt
          FROM AdvancePayment a INNER JOIN NSLDB..AccountFinancialCalender b ON GETDATE() BETWEEN b.StartDate AND b.EndDate AND b.AppId = 13 AND b.Status = 1 AND a.Status = 1
          AND (@OfficeId = -1 or a.OfficeId = @OfficeId)
          AND a.PaymentDate IS NOT NULL
          INNER JOIN NSLDB..AccountFinancialCalender c ON a.PaymentDate BETWEEN c.StartDate AND c.EndDate AND c.AppId = 13 AND c.BudgetYear = b.BudgetYear - 1
          INNER JOIN NSLDB..Currency d ON a.CurrencyId = d.CurrencyId
          GROUP BY d.CurrencyCode, c.BudgetYear
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentFirstContractDate" type="Text">
        <commandText>
          SELECT TOP 1 * FROM
          (
          SELECT c.ContractNo + '-' + REPLACE(STR(CONVERT(varchar, b.DeliveryNo) , 2), SPACE(1), '0') AS ContractNo,
          b.CustomerAtWarehouseDate AS DateValue,
          y.CurrencyCode, a.ActualDeductAmt
          FROM AdvancePaymentOrderDetail a INNER JOIN Shipment b ON a.PaymentId = @PaymentId
          AND a.ShipmentId = b.ShipmentId AND a.ActualDeductAmt > 0
          AND a.Status = 1 AND b.Status = 1 AND b.WorkflowStatusId NOT IN (9)
          INNER JOIN Contract c ON b.ContractId = c.ContractId
          INNER JOIN AdvancePayment z ON z.PaymentId = a.PaymentId
          INNER JOIN NSLDB..Currency y ON y.CurrencyId = z.CurrencyId
          /*
          UNION ALL
          SELECT 'INSTALMENT' AS ContractNo,
          PaymentDate AS DateValue
          FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND Status = 1
          UNION ALL
          SELECT 'INSTALMENT' AS ContractNo,
          PaymentDate AS DateValue
          FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND Status = 1
          */
          ) a
          ORDER BY DateValue ASC, ContractNo ASC
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdvancePaymentLastContractDate" type="Text">
        <commandText>
          SELECT TOP 1 * FROM
          (
          SELECT c.ContractNo + '-' + REPLACE(STR(CONVERT(varchar, b.DeliveryNo) , 2), SPACE(1), '0') AS ContractNo,
          b.CustomerAtWarehouseDate AS DateValue,
          y.CurrencyCode, a.ActualDeductAmt
          FROM AdvancePaymentOrderDetail a INNER JOIN Shipment b ON a.PaymentId = @PaymentId
          AND a.ShipmentId = b.ShipmentId AND a.ActualDeductAmt > 0
          AND a.Status = 1 AND b.Status = 1 AND b.WorkflowStatusId NOT IN (9)
          INNER JOIN Contract c ON b.ContractId = c.ContractId
          INNER JOIN AdvancePayment z ON z.PaymentId = a.PaymentId
          INNER JOIN NSLDB..Currency y ON y.CurrencyId = z.CurrencyId
          /*
          UNION ALL
          SELECT 'INSTALMENT' AS ContractNo,
          PaymentDate AS DateValue
          FROM AdvancePaymentInstalmentDetail WHERE PaymentId = @PaymentId AND Status = 1
          UNION ALL
          SELECT 'INSTALMENT' AS ContractNo,
          PaymentDate AS DateValue
          FROM AdvancePaymentBalanceSettlement WHERE PaymentId = @PaymentId AND Status = 1
          */
          ) a
          ORDER BY DateValue DESC, ContractNo DESC
        </commandText>
        <parameters>
          <param key="PaymentId" name="@PaymentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdvancePaymentSummaryTable" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="PaymentAdviceApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetPaymentAdviceByKey" type="Text">
        <commandText>
          SELECT * FROM PaymentAdvice WHERE PaymentAdviceId = @PaymentAdviceId
        </commandText>
        <parameters>
          <param key="PaymentAdviceId" name="@PaymentAdviceId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetPaymentAdviceList" type="Text">
        <commandText>
          SELECT * FROM PaymentAdvice
          WHERE Mailed = 0

          --WHERE PaymentAdviceId IN (57894, 57895, 57863)
        </commandText>
      </dataCommand>

      <dataCommand name="GetPaymentAdviceByCriteria" type="Text">
        <commandText>
          SELECT * FROM PaymentAdvice WITH (NOLOCK)
          WHERE
          UploadDate = @UploadDate
          --UploadDate >= '2018-10-20'
          AND (PaymentMethod = @PaymentMethod OR PaymentMethod = 'AP TT (Manual)')
        </commandText>
        <parameters>
          <param key="UploadDate" name="@UploadDate" type="DateTime" direction="Input" />
          <param key="PaymentMethod" name="@PaymentMethod" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxPaymentAdviceId" type="Text">
        <commandText>
          SELECT MAX(PaymentAdviceId) FROM PaymentAdvice
        </commandText>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="PaymentAdvice" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKPaymentSupplierApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKPaymentSupplierByKey" type="Text">
        <commandText>
          SELECT * FROM UKPaymentSupplier WHERE SupplierNo = @SupplierNo AND Status = 1
        </commandText>
        <parameters>
          <param key="SupplierNo" name="@SupplierNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKPaymentSupplierByOfficeIdCurrencyId" type="Text">
        <commandText>
          SELECT * FROM UKPaymentSupplier WHERE OfficeId = @OfficeId AND CurrencyId = @CurrencyId AND Status = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKPaymentSupplierNoByOfficeIdCurrencyId" type="Text">
        <commandText>
          SELECT * FROM UKPaymentSupplier WHERE OfficeId = @OfficeId AND CurrencyId = @CurrencyId AND Status = 1 AND IsNSOffice = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKPaymentSupplier" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="PaymentAdviceDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetPaymentAdviceDetailByKey" type="Text">
        <commandText>
          SELECT * FROM PaymentAdviceDetail WHERE PaymentAdviceId = @PaymentAdviceId
          ORDER BY Amount DESC, PONo
        </commandText>
        <parameters>
          <param key="PaymentAdviceId" name="@PaymentAdviceId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="PaymentAdviceDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="CutOffSalesApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetCutOffSalesStatus" type="Text">
        <commandText>
          SELECT IsAccrual, FiscalYear, Period, ISNULL(AccruedSince, '') AS AccruedSince FROM CutOffSales WHERE ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetLatestCutOffPeriod" type="Text">
        <commandText>
          SELECT MAX(CONVERT(varchar, FiscalYear) + RIGHT('0' + CONVERT(varchar,  + Period), 2)) FROM CutOffSales
          WHERE IsMockShopSample = 0
        </commandText>
      </dataCommand>
      <dataCommand name="GetDaysAmounts" type="Text">
        <commandText>
          <![CDATA[
          SELECT SUM(TotalShippedAmt) AS TotalShippedAmt, 
                 SUM(TotalShippedAmtInBaseCurrency) AS TotalShippedAmtInBaseCurrency
          FROM CutOffSales WHERE InvoicePrefix = @invoicePrefix
          AND InvoiceSeq = @invoiceSeq
          AND InvoiceYear = @invoiceYear
          ]]>
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeq" name="@invoiceSeq" type="int" direction="Input" />
          <param key="InvoiceYear" name="@invoiceYear" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetThirdPartyCommissionInvoiceToUK" type="Text">
        <commandText>
          SELECT cut.ShipmentId, cut.OfficeId, con.ContractNo, ship.DeliveryNo, cut.InvoicePrefix, cut.InvoiceSeq, cut.InvoiceYear, cut.SellCurrencyId, cut.TotalShippedAmt, cut.SalesCommission,
          cut.InvoiceDate
          FROM CutOffSales cut
          JOIN Shipment ship ON ship.ShipmentId = cut.ShipmentId
          JOIN Contract con ON con.ContractId = ship.ContractId
          JOIN Invoice inv ON inv.ShipmentId = cut.ShipmentId
          WHERE FiscalYear = @FiscalYear
          AND Period = @Period
          AND cut.CustomerId IN (SELECT CustomerId FROM Customer
          WHERE (EpicorCustId IN ('NAR008', 'NAR010', 'NAR014', 'NAR016', 'NAR018', 'NAR031', 'NAR032', 'NAR030', 'NAR027', 'NAR028', 'NAR023', 'NAR024', 'NAR017', 'NAR025', 'NAR026', 'NAR019')
          OR (EpicorCustId = 'NAR009' AND inv.InvoiceDate >= '2020-09-27'))
          )
          ORDER BY OfficeId, SellCurrencyId, ShipmentId
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
  </dataSetAdapter>

  <dataSetAdapter name="DailySunInterfaceApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetDailySunInterfaceByKey" type="Text">
        <commandText>
          SELECT * FROM DailySunInterface
          WHERE ShipmentId = @ShipmentId
          AND SplitShipmentId = @SplitShipmentId
          AND SunInterfaceTypeId = @SunInterfaceTypeId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
          <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="DailySunInterface" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SunInterfaceQueueApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSunInterfaceQueueList" type="Text">
        <commandText>
          SELECT TOP 50 a.* FROM SunInterfaceQueue a
          LEFT JOIN SystemParameter b ON b.ParameterId = 11
          WHERE a.Status = 0 AND NOT (a.SunInterfaceTypeId = 3 AND a.CategoryId = 4 AND b.ParameterValue = 'Y')
          --WHERE a.QueueId = 261911
          --AND a.QueueId = 130244
          --AND a.QueueId IN (137445, 137469, 137500)
        </commandText>
      </dataCommand>

      <dataCommand name="GetRecentSunInterfaceQueueList" type="Text">
        <commandText>
          SELECT TOP 500 * FROM SunInterfaceQueue ORDER BY QueueId DESC
        </commandText>
      </dataCommand>

      <dataCommand name="GetSunInterfaceQueueByKey" type="Text">
        <commandText>
          SELECT * FROM SunInterfaceQueue WHERE QueueId = @QueueId
        </commandText>
        <parameters>
          <param key="QueueId" name="@QueueId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetSunInterfaceQueueByCriteria" type="Text">
        <commandText>
          SELECT * FROM SunInterfaceQueue WHERE (SourceId = @SourceId OR @SourceId = -1)
          AND SunInterfaceTypeId = @SunInterfaceTypeId
          AND (CategoryId = @CategoryId OR @CategoryId = -1)
          AND FiscalYear = @FiscalYear
          AND Period = @Period
          AND UTurn = @UTurn
          AND OfficeId = @OfficeId
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="Period" name="@Period" type="Int" direction="Input" />
          <param key="CategoryId" name="@CategoryId" type="Int" direction="Input" />
          <param key="SunInterfaceTypeId" name="@SunInterfaceTypeId" type="Int" direction="Input" />
          <param key="UTurn" name="@UTurn" type="Int" direction="Input" />
          <param key="SourceId" name="@SourceId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxQueueId" type="Text">
        <commandText>
          SELECT MAX(QueueId) FROM SunInterfaceQueue
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SunInterfaceQueue" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SunInterfaceTypeApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSunInterfaceTypeByAmendmentTypes" type="Text">
        <commandText>
          SELECT DISTINCT b.* FROM AmendmentTypeMapping a
          INNER JOIN SunInterfaceType b ON a.SunInterfaceTypeId = b.SunInterfaceTypeId
          WHERE a.AmendmentTypeId @AmendmentTypeIdList
        </commandText>
        <parameters>
          <param key="AmendmentTypeIdList" name="@AmendmentTypeIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SunInterfaceType" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdjustmentNoteApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetMaxAdjustmentNoteId" type="Text">
        <commandText>
          SELECT MAX(AdjustmentNoteId) FROM AdjustmentNote
        </commandText>
      </dataCommand>

      <dataCommand name="GetOutstandingAdjustmentNoteList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS AdjustmentNoteId, 
                 CONVERT(varchar, CASE WHEN a.AdjustmentTypeId = 1 THEN -1 * c.CustomerId ELSE a.ShipmentId END) +  '|' + CONVERT(varchar, CASE WHEN a.AdjustmentTypeId = 1 THEN -1 * c.CustomerId ELSE a.SplitShipmentId END) AS AdjustmentNoteNo, c.OfficeId,
                 @AdjustmentTypeId AS AdjustmentTypeId,
                 CASE WHEN SUM(a.AdjustmentAmt) > 0 THEN 'D' ELSE 'C' END AS DebitCreditIndicator,
                 GETDATE() AS IssueDate, 
                 a.CurrencyId, a.VendorId,
                 NULL AS PartyName, NULL AS PartyAddress1, 
                 NULL AS PartyAddress2, NULL AS PartyAddress3, NULL AS PartyAddress4,
                 SUM(a.AdjustmentAmt) AS Amount,
                 MailStatus = NULL,
                 99999 AS CreatedBy, GETDATE() AS CreatedOn, -1 AS RevisedCurrencyId
          INTO #AdjustmentNote     
          FROM AdjustmentDetail a INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId
              INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId) AND ((a.AdjustmentTypeId = 1 AND ((c.CustomerId = 13 OR b.CustomerDestinationId = 5) OR c.CustomerId = 15)) OR a.AdjustmentTypeId = 2)
          WHERE a.AdjustmentNoteId IS NULL
          --AND a.ShipmentId = 1147339
              AND a.AdjustmentTypeId = @AdjustmentTypeId
          GROUP BY c.OfficeId, a.CurrencyId, a.VendorId, CONVERT(varchar, CASE WHEN a.AdjustmentTypeId = 1 THEN -1 * c.CustomerId ELSE a.ShipmentId END) +  '|' + CONVERT(varchar, CASE WHEN a.AdjustmentTypeId = 1 THEN -1 * c.CustomerId ELSE a.SplitShipmentId END)
          HAVING SUM(a.AdjustmentAmt) <> 0
          ORDER BY 1

          SELECT * FROM #AdjustmentNote
          DROP TABLE #AdjustmentNote
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdjustmentNoteList" type="Text">
        <commandText>
          <![CDATA[
          SELECT 
                AdjustmentNoteId, AdjustmentNoteNo, OfficeId, AdjustmentTypeId, 
                DebitCreditIndicator, IssueDate, CurrencyId, VendorId, 
                PartyName, PartyAddress1, PartyAddress2, PartyAddress3, PartyAddress4, 
                Amount, MailStatus,
                CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, RevisedCurrencyId
            FROM AdjustmentNote 
              WHERE OfficeId @OfficeList
              AND AdjustmentTypeId = @AdjustmentTypeId
              AND IssueDate >= @FromDate AND IssueDate < @ToDate
          UNION
            SELECT DCNoteId AS AdjustmentNoteId, DCNoteNo AS AdjustmentNoteNo, 
                OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, DCNoteIndicator AS DebitCreditIndicator, DCNoteDate AS IssueDate, 
                SellCurrencyId AS CurrencyId, NULL AS VendorId, 'NEXT PLC' AS PartyName, 'DESFORD ROAD ENDERBY' AS PartyAddress1, 
                'LEICESTER, LE19 4AT,' AS PartyAddress2, 'UK' AS PartyAddress3, NULL AS PartyAddress4, TotalShippedAmt + TotalCourierCharge + TotalNSLCommissionAmt AS Amount , 
                MailStatus = NULL,
                CreatedBy, CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId
              FROM MockShopDCNote WHERE OfficeId @OfficeList 
                AND DCNoteDate >= @FromDate AND DCNoteDate < @ToDate
                AND @AdjustmentTypeId = 0
          UNION
            SELECT a.DCNoteId AS AdjustmentNoteId, a.DCNoteNo AS AdjustmentNoteNo, 
                a.OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, a.DebitCreditIndicator, a.DCNoteDate AS IssueDate, 
                a.CurrencyId AS CurrencyId, a.VendorId, a.PartyName AS PartyName, a.PartyAddress1 AS PartyAddress1, 
                a.PartyAddress2 AS PartyAddress2, a.PartyAddress3 AS PartyAddress3, a.PartyAddress4 AS PartyAddress4, a.SettledAmt AS Amount, 
                a.MailStatus,
                a.CreatedBy, a.CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, a.RevisedCurrencyId 
              FROM UKClaimDCNote a WHERE a.OfficeId @OfficeList AND @AdjustmentTypeId = 3 AND a.Status = 1
                AND a.DCNoteDate >= @FromDate AND a.DCNoteDate < @ToDate AND a.DCNoteNo NOT LIKE 'NA/%'
                
          UNION
            SELECT DCNoteId AS AdjustmentNoteId, DCNoteNo AS AdjustmentNoteNo, 
                OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, DCNoteIndicator AS DebitCreditIndicator, DCNoteDate AS IssueDate, 
                SellCurrencyId AS CurrencyId, NULL AS VendorId, 'NEXT COMMERCIAL TRADING (SHANGHAI) CO., LTD.' AS PartyName, 'BUILDING 1- UNIT 103,' AS PartyAddress1, 
                'No.2802, GONGHEXIN ROAD,' AS PartyAddress2, 'JINGAN DISTRICT, SHANGHAI(200072) , PRC' AS PartyAddress3, NULL AS PartyAddress4, TotalSupplierCommission AS Amount , 
                MailStatus = NULL,
                CreatedBy, CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId 
              FROM UTContractDCNote WHERE OfficeId @OfficeList AND @AdjustmentTypeId = 4
                AND DCNoteDate >= @FromDate AND DCNoteDate < @ToDate
                
           UNION
            SELECT a.DNId AS AdjustmentNoteId, a.DNNo AS AdjustmentNoteNo, 
                a.OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, 'D' AS DebitCreditIndicator, a.DNDate AS IssueDate, 
                a.CurrencyId AS CurrencyId, a.VendorId AS VendorId, b.Name AS PartyName, b.addr1 AS PartyAddress1, 
                b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4, a.TotalQACommission AS Amount , 
                MailStatus = NULL,
                a.CreatedBy, a.CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId 
              FROM QACommissionDN a 
              INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId
              WHERE a.OfficeId @OfficeList AND @AdjustmentTypeId = 5
              AND a.DNDate >= @FromDate AND a.DNDate < @ToDate
          UNION
            SELECT DCNoteId AS AdjustmentNoteId, DCNoteNo AS AdjustmentNoteNo, 
                OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, DCNoteIndicator AS DebitCreditIndicator, DCNoteDate AS IssueDate, 
                SellCurrencyId AS CurrencyId, NULL AS VendorId, 'NEXT PLC' AS PartyName, 'DESFORD ROAD ENDERBY' AS PartyAddress1, 
                'LEICESTER, LE19 4AT,' AS PartyAddress2, 'UK' AS PartyAddress3, NULL AS PartyAddress4, TotalShippedAmt + TotalCourierCharge + TotalNSLCommissionAmt AS Amount , 
                MailStatus = NULL,
                CreatedBy, CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId 
              FROM StudioDCNote WHERE OfficeId @OfficeList 
                AND DCNoteDate >= @FromDate AND DCNoteDate < @ToDate
                AND @AdjustmentTypeId = 6
          UNION
            SELECT a.PaymentId + DatePart(dd, a.PaymentDate) + DatePart(mm, a.PaymentDate) + (DatePart(dd, a.PaymentDate) * DatePart(mm, a.PaymentDate)) AS AdjustmentNoteId, a.DCNoteNo AS AdjustmentNoteNo, 
                b.OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, CASE WHEN a.InterestAmt >= 0 THEN 'D' ELSE 'C' END  AS DebitCreditIndicator, a.DCNoteDate AS IssueDate, 
                b.CurrencyId, b.VendorId, c.Name AS PartyName, c.addr1 AS PartyAddress1, 
                c.addr2 AS PartyAddress2, c.addr3 AS PartyAddress3, c.addr4 AS PartyAddress4, ABS(a.InterestAmt) AS Amount , 
                a.MailStatus,
                a.CreatedBy AS CreatedBy, a.PaymentDate AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId 
              FROM AdvancePaymentInstalmentDetail a INNER JOIN AdvancePayment b ON a.PaymentId = b.PaymentId AND a.Status = 1 AND b.Status = 1 
              AND a.DCNoteDate IS NOT NULL
              INNER JOIN NSLIndustry..Vendor c ON b.VendorId = c.VendorId
              WHERE b.OfficeId @OfficeList 
                AND a.DCNoteDate >= @FromDate AND DCNoteDate < @ToDate
                AND @AdjustmentTypeId = 8
          UNION
            SELECT a.DCNoteId AS AdjustmentNoteId, a.DCNoteNo AS AdjustmentNoteNo, 
                a.OfficeId, @AdjustmentTypeId AS AdjustmentTypeId, a.DebitCreditIndicator, a.DCNoteDate AS IssueDate, 
                a.BillingCurrencyId, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(a.VendorId, a.NTVendorId) WHEN a.IssueTypeId = 2 THEN d.CustomerId ELSE -1 END AS VendorId, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(c.Name, x.VendorName) WHEN a.IssueTypeId = 2 THEN d.Name ELSE a.PartyName END AS PartyName, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(c.addr1, x.Address) WHEN a.IssueTypeId = 2 THEN d.Addr1 ELSE a.PartyAddress1 END AS PartyAddress1, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(c.addr2, '') WHEN a.IssueTypeId = 2 THEN d.Addr2 ELSE a.PartyAddress2 END AS PartyAddress2, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(c.addr3, '') WHEN a.IssueTypeId = 2 THEN d.Addr3 ELSE a.PartyAddress3 END AS PartyAddress3, 
                CASE WHEN a.IssueTypeId = 1 THEN ISNULL(c.addr4, '') WHEN a.IssueTypeId = 2 THEN d.Addr4 ELSE a.PartyAddress4 END AS PartyAddress4, 
                a.Amount , 
                a.MailStatus,
                a.CreatedBy AS CreatedBy, a.CreatedOn AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, -1 AS RevisedCurrencyId 
              FROM GenericDCNote a 
              LEFT JOIN NSLIndustry..Vendor c ON c.VendorId = a.VendorId 
              LEFT JOIN NTVendor x ON x.NTVendorId = a.NTVendorId 
              LEFT JOIN ARCustomer d ON d.EpicorCode = a.CustomerCode
              WHERE a.OfficeId @OfficeList 
              AND a.Status = 1
              AND a.DCNoteDate >= @FromDate AND DCNoteDate < @ToDate
              AND @AdjustmentTypeId = 9
          /*
          UNION
          SELECT c.ClaimRefundId AS AdjustmentNoteId, c.CreditNoteNo AS AdjustmentNoteNo, 
          a.OfficeId, 4 AS AdjustmentTypeId, 'C' AS DebitCreditIndicator, c.CreditNoteDate AS IssueDate, 
          a.CurrencyId AS CurrencyId, a.VendorId, b.Name AS PartyName, b.Addr1 AS PartyAddress1, 
          b.Addr2 AS PartyAddress2, b.Addr3 AS PartyAddress3, b.Addr4 AS PartyAddress4, c.Amount AS Amount , 
          a.CreatedBy, a.CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn 
          FROM UKClaim a INNER JOIN NSLINDUSTRY..Vendor b ON a.VendorId = b.VendorId AND a.OfficeId @OfficeList AND @AdjustmentTypeId = 4 AND a.Status = 1
          INNER JOIN UKClaimRefund c ON a.ClaimId = c.ClaimId AND c.Status = 1
          AND c.CreditNoteDate >= @FromDate AND c.CreditNoteDate < @ToDate
          */
          ]]>
        </commandText>
        <parameters>
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
          <param key="OfficeList" name="@OfficeList" type="ArrayInt" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdjustmentNoteByKey" type="Text">
        <commandText>
          SELECT * FROM AdjustmentNote WHERE AdjustmentNoteId = @AdjustmentNoteId
        </commandText>
        <parameters>
          <param key="AdjustmentNoteId" name="@AdjustmentNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdjustmentNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ARAdjustmentNoteApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetARAdjustmentNote" type="Text">
        <commandText>
          <![CDATA[
            /*
            NEXT
            -----
            SELECT a.AdjustmentNoteId, b.AdjustmentDetailId, b.ShipmentId, b.SplitShipmentId, AdjustmentNoteNo, IssueDate, a.DebitCreditIndicator AS MasterDebitCreditIndicator, 
                   b.DebitCreditIndicator, c.ContractNo + '-' + c.DeliveryNo AS OrderRef, c.ContractNo, 
                   f.DeliveryNo, d.ItemNo, d.InvoiceNo, d.InvoiceDate, d.Currency,
                   b.LatestAmt AS NSLAmt, b.SettledAmt AS NUKAmt,
                   a.PartyName, a.PartyAddress1, a.PartyAddress2, a.PartyAddress3, a.PartyAddress4
            FROM AdjustmentNote a INNER JOIN AdjustmentDetail b ON a.AdjustmentNoteId = b.AdjustmentNoteId AND a.AdjustmentTypeId = 1
            INNER JOIN ILSOrderRef c ON b.ShipmentId = c.ShipmentId
            INNER JOIN ILSInvoice d ON c.OrderRefId = d.OrderRefId
            INNER JOIN Invoice e ON c.ShipmentId = e.ShipmentId
            INNER JOIN Shipment f ON c.ShipmentId = f.ShipmentId
            WHERE a.AdjustmentNoteId = @AdjustmentNoteId
            */

            SELECT a.AdjustmentNoteId, b.AdjustmentDetailId, b.ShipmentId, b.SplitShipmentId, AdjustmentNoteNo, IssueDate, a.DebitCreditIndicator AS MasterDebitCreditIndicator, 
                   b.DebitCreditIndicator, g.ContractNo + '-' + CONVERT(varchar, f.DeliveryNo) AS OrderRef, g.ContractNo, 
                   CONVERT(varchar, f.DeliveryNo) AS DeliveryNo, h.ItemNo, dbo.fn_formatInvoiceNo(e.InvoicePrefix, e.InvoiceSeq, e.InvoiceYear) AS InvoiceNo, e.InvoiceDate, 
                   i.CurrencyCode AS Currency,
                   b.LatestAmt AS NSLAmt, b.SettledAmt AS NUKAmt,
                   a.PartyName, a.PartyAddress1, a.PartyAddress2, a.PartyAddress3, a.PartyAddress4
            FROM AdjustmentNote a INNER JOIN AdjustmentDetail b ON a.AdjustmentNoteId = b.AdjustmentNoteId AND a.AdjustmentTypeId = 1
            INNER JOIN Invoice e ON b.ShipmentId = e.ShipmentId
            INNER JOIN Shipment f ON b.ShipmentId = f.ShipmentId
            INNER JOIN Contract g ON f.ContractId = g.ContractId 
            INNER JOIN Product h ON g.ProductId = h.ProductId 
            INNER JOIN Currency i ON f.SellCurrencyId = i.CurrencyId 
            WHERE a.AdjustmentNoteId = @AdjustmentNoteId
          ]]>
        </commandText>
        <parameters>
          <param key="AdjustmentNoteId" name="@AdjustmentNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ARAdjustmentNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="APAdjustmentNoteApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetAPAdjustmentNote" type="Text">
        <commandText>
          <![CDATA[
            SELECT a.AdjustmentNoteId, b.AdjustmentDetailId, b.ShipmentId, b.SplitShipmentId, AdjustmentNoteNo, IssueDate, a.DebitCreditIndicator AS MasterDebitCreditIndicator, 
                   b.DebitCreditIndicator, d.ContractNo, c.DeliveryNo, p.ItemNo, dbo.fn_formatInvoiceNo(y.InvoicePrefix, y.InvoiceSeq, y.InvoiceYear) AS InvoiceNo, 
                   y.InvoiceDate, b.CurrencyId AS CurrencyId, 'NIL' AS CurrencyCode, d.OfficeId, d.TradingAgencyId, b.LatestAmt AS RevisedAmt, b.SettledAmt AS Amt,
                   a.PartyName, a.PartyAddress1, a.PartyAddress2, a.PartyAddress3, a.PartyAddress4, x.PackingUnitDesc AS PackingUnit, 
                   f.SizeDesc AS Size, e.SellingPrice, e.NetFOBPrice, e.SupplierGmtPrice, e.ShippedQty, 
                   e.RevisedSellingPrice, e.RevisedNetFOBPrice, e.RevisedSupplierGmtPrice, e.RevisedShippedQty,
                   b.QACommissionPercent, b.QACommissionAmt, b.VendorPaymentDiscountPercent, b.VendorPaymentDiscountAmt, b.LabTestIncome
            FROM AdjustmentNote a INNER JOIN AdjustmentDetail b ON a.AdjustmentNoteId = b.AdjustmentNoteId AND a.AdjustmentTypeId = 2 AND b.SplitShipmentId = 0
            AND a.AdjustmentNoteId = @AdjustmentNoteId
            INNER JOIN Shipment c ON b.ShipmentId = c.ShipmentId
            INNER JOIN Invoice y ON b.ShipmentId = y.ShipmentId
            INNER JOIN Contract d ON c.ContractId = d.ContractId
            INNER JOIN Product p ON p.ProductId = d.ProductId
            INNER JOIN PackingUnit x ON d.PackingUnitId = x.PackingUnitId 
            INNER JOIN AdjustmentDetailLine e ON b.AdjustmentDetailId = e.AdjustmentDetailId 
            INNER JOIN SizeOption f ON e.SizeOptionId = f.SizeOptionId 
            UNION
            SELECT a.AdjustmentNoteId, b.AdjustmentDetailId, b.ShipmentId, b.SplitShipmentId, AdjustmentNoteNo, IssueDate, a.DebitCreditIndicator AS MasterDebitCreditIndicator, 
                   b.DebitCreditIndicator, d.ContractNo + s.SplitSuffix AS ContractNo, c.DeliveryNo, p.ItemNo, dbo.fn_formatInvoiceNo(y.InvoicePrefix, y.InvoiceSeq, y.InvoiceYear) AS InvoiceNo, 
                   y.InvoiceDate, b.CurrencyId AS CurrencyId, 'NIL' AS CurrencyCode, d.OfficeId, d.TradingAgencyId, b.LatestAmt AS RevisedAmt, b.SettledAmt AS Amt,
                   a.PartyName, a.PartyAddress1, a.PartyAddress2, a.PartyAddress3, a.PartyAddress4, x.PackingUnitDesc AS PackingUnit, 
                   f.SizeDesc AS Size, e.SellingPrice, e.NetFOBPrice, e.SupplierGmtPrice, e.ShippedQty, 
                   e.RevisedSellingPrice, e.RevisedNetFOBPrice, e.RevisedSupplierGmtPrice, e.RevisedShippedQty, 
                   b.QACommissionPercent, b.QACommissionAmt, b.VendorPaymentDiscountPercent, b.VendorPaymentDiscountAmt, b.LabTestIncome
            FROM AdjustmentNote a INNER JOIN AdjustmentDetail b ON a.AdjustmentNoteId = b.AdjustmentNoteId AND a.AdjustmentTypeId = 2 AND b.SplitShipmentId <> 0
            AND a.AdjustmentNoteId = @AdjustmentNoteId
            INNER JOIN Shipment c ON b.ShipmentId = c.ShipmentId
            INNER JOIN Invoice y ON b.ShipmentId = y.ShipmentId
            INNER JOIN SplitShipment s ON s.SplitShipmentId = b.SplitShipmentId
            INNER JOIN Contract d ON c.ContractId = d.ContractId
            INNER JOIN Product p ON s.ProductId = p.ProductId
            INNER JOIN PackingUnit x ON s.PackingUnitId = x.PackingUnitId 
            INNER JOIN AdjustmentDetailLine e ON b.AdjustmentDetailId = e.AdjustmentDetailId 
            INNER JOIN SizeOption f ON e.SizeOptionId = f.SizeOptionId 
            ORDER BY a.AdjustmentNoteId, f.SizeDesc
          ]]>
        </commandText>
        <parameters>
          <param key="AdjustmentNoteId" name="@AdjustmentNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="APAdjustmentNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdjustmentNoteNoParamApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAdjustmentNoteNoParamByKey" type="Text">
        <commandText>
          SELECT * FROM AdjustmentNoteNoParam
          WHERE AdjustmentNoteYear = @AdjustmentNoteYear
          AND Period = @Period
          AND OfficeId = @OfficeId
          AND DebitCreditIndicator = @DebitCreditIndicator
        </commandText>
        <parameters>
          <param key="AdjustmentNoteYear" name="@AdjustmentNoteYear" type="Int" direction="Input" />
          <param key="Period" name="@Period" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="DebitCreditIndicator" name="@DebitCreditIndicator" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdjustmentNoteNoParam" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdjustmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingAdjustmentDetailList" type="Text">
        <commandText>
          <![CDATA[
          SELECT a.* FROM AdjustmentDetail a
          INNER JOIN Shipment b ON a.ShipmentId = b.ShipmentId
          INNER JOIN Contract c ON b.ContractId = c.ContractId AND c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND ((a.AdjustmentTypeId = 1 AND ((c.CustomerId = 13 OR b.CustomerDestinationId = 5) OR c.CustomerId = 15)) OR a.AdjustmentTypeId = 2)
          WHERE a.AdjustmentNoteId IS NULL
          AND a.AdjustmentTypeId = @AdjustmentTypeId
          AND (a.VendorId = @VendorId OR @VendorId = -1)
          AND a.CurrencyId = @CurrencyId
          AND (a.ShipmentId = @ShipmentId OR @ShipmentId = -1)
          AND (a.SplitShipmentId = @SplitShipmentId OR @SplitShipmentId = -1)
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="Int" direction="Input" />
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingAdjustmentDetail" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetail
          WHERE AdjustmentNoteId IS NULL
          AND ShipmentId = @ShipmentId
          AND SplitShipmentId = @SplitShipmentId
          AND AdjustmentTypeId = @AdjustmentTypeId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetClosedAdjustmentDetailList" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetail
          WHERE AdjustmentNoteId IS NOT NULL
          AND ShipmentId = @ShipmentId
          AND SplitShipmentId = @SplitShipmentId
          AND AdjustmentTypeId = @AdjustmentTypeId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdjustmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetail WHERE AdjustmentDetailId = @AdjustmentDetailId
        </commandText>
        <parameters>
          <param key="AdjustmentDetailId" name="@AdjustmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdjustmentDetail" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetail WHERE AdjustmentTypeId = @AdjustmentTypeId
          AND ShipmentId = @ShipmentId
          AND SplitShipmentId = @SplitShipmentId
        </commandText>
        <parameters>
          <param key="AdjustmentTypeId" name="@AdjustmentTypeId" type="Int" direction="Input" />
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxAdjustmentDetailId" type="Text">
        <commandText>
          SELECT MAX(AdjustmentDetailId) FROM AdjustmentDetail
        </commandText>
      </dataCommand>
    </selectCommand>

    <dataCommand name="GetAdjustmentDetailByAdjustmentNoteId" type="Text">
      <commandText>
        SELECT * FROM AdjustmentDetail WHERE AdjustmentNoteId = @AdjustmentNoteId
      </commandText>
      <parameters>
        <param key="AdjustmentNoteId" name="@AdjustmentNoteId" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdjustmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AdjustmentDetailLineApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetMaxAdjustmentDetailLineId" type="Text">
        <commandText>
          SELECT MAX(AdjustmentDetailLineId) FROM AdjustmentDetailLine
        </commandText>
      </dataCommand>

      <dataCommand name="GetAdjustmentDetailLineList" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetailLine
          WHERE AdjustmentDetailId = @AdjustmentDetailId
        </commandText>
        <parameters>
          <param key="AdjustmentDetailId" name="@AdjustmentDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetAdjustmentDetailLineByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM AdjustmentDetailLine
          WHERE AdjustmentDetailId = @AdjustmentDetailId
          AND SizeOptionId = @SizeOptionId
        </commandText>
        <parameters>
          <param key="AdjustmentDetailId" name="@AdjustmentDetailId" type="Int" direction="Input" />
          <param key="SizeOptionId" name="@SizeOptionId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AdjustmentDetailLine" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ColumnMappingApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetColumneMappingByBankandTypeCmd" type="Text">
        <commandText>
          <![CDATA[
						SELECT
							Id, 
							BankName,
							RecordType,
							Seq,
							FieldLength,
							FieldName,
							PaymentFileIndex,
							DefaultValue,
							DataCheck,
							ErrorMessage
						FROM eBankingColumnMapping
						WHERE	Bankname = @BankName
						AND Recordtype = @Type
						ORDER BY Seq
					]]>
        </commandText>
        <parameters>
          <param key="BankName" name="@BankName" type="varchar" direction="Input" />
          <param key="RecordType" name="@Type" type="varchar" direction="Input" />
          <!--
				-->
        </parameters>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetColumneMappingByBankCmd" type="Text">
        <commandText>
          <![CDATA[
						SELECT *
						FROM eBankingColumnMapping
						WHERE	BankName = @BankName
						ORDER BY Seq
					]]>
        </commandText>
        <parameters>
          <param key="BankName" name="@BankName" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="eBankingColumnMapping" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="MockShopDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetMockShopDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMockShopDCNoteByShipmentId" type="Text">
        <commandText>
          SELECT m.*
          FROM MockShopDCNote m
          INNER JOIN MockShopDCNoteShipment s ON m.DCNoteId = s.DCNoteId
          WHERE s.ShipmentId = @ShipmentId AND m.Status = 1 AND s.Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMockShopDCNoteByPeriod" type="Text">
        <commandText>
          SELECT *
          FROM MockShopDCNote WHERE FiscalYear = @FiscalYear AND Period = @Period AND SellCurrencyId = @CurrencyId
          AND OfficeId = @OfficeId AND Status = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMockShopDCNoteByDCNoteNo" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNote WHERE DCNoteNo = @DCNoteNo AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetCourierChargeListByDCNoteNo" type="Text">
        <commandText>
          /*
          SELECT b.DeptId, SUM(b.TotalCourierCharge) FROM MockShopDCNote a
          INNER JOIN MockShopDCNoteShipment b ON a.DCNoteId = b.DCNoteId
          WHERE a.DCNoteNo = @DCNoteNo
          GROUP BY b.DeptId
          */
          SELECT e.T1, ISNULL(c.SalesForecastSpecialGroupId, d.OfficeId) AS HandlingOfficeId, SUM(b.TotalCourierCharge), MAX(c.ShipmentId) AS ShipmentId FROM MockShopDCNote a
          INNER JOIN MockShopDCNoteShipment b ON a.DCNoteId = b.DCNoteId AND b.Status = 1
          INNER JOIN Shipment c ON b.ShipmentId = c.ShipmentId
          INNER JOIN Contract d ON c.ContractId = d.ContractId
          INNER JOIN NSLDB..OfficeStructureAccountCode e ON d.ProductTeamId = e.OfficeStructureId
          WHERE a.DCNoteNo = @DCNoteNo AND a.Status = 1
          GROUP BY e.T1, ISNULL(c.SalesForecastSpecialGroupId, d.OfficeId)
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteNo" type="Text">
        <commandText>
          SELECT SUBSTRING(Max(DCNoteNo),7,3) FROM MockShopDCNote WHERE DCNoteNo LIKE '%' + @DCNoteNo + '%'
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteId" type="Text">
        <commandText>
          SELECT Max(DCNoteId) FROM MockShopDCNote
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="MockShopDCNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="StudioDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetStudioDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM StudioDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetStudioDCNoteByShipmentId" type="Text">
        <commandText>
          SELECT m.*
          FROM StudioDCNote m
          INNER JOIN StudioDCNoteShipment s ON m.DCNoteId = s.DCNoteId
          WHERE s.ShipmentId = @ShipmentId AND m.Status = 1 AND s.Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetStudioDCNoteByPeriod" type="Text">
        <commandText>
          SELECT *
          FROM StudioDCNote WHERE FiscalYear = @FiscalYear AND Period = @Period AND SellCurrencyId = @CurrencyId
          AND OfficeId = @OfficeId AND Status = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetStudioDCNoteByDCNoteNo" type="Text">
        <commandText>
          SELECT * FROM StudioDCNote WHERE DCNoteNo = @DCNoteNo AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetCourierChargeListByDCNoteNo" type="Text">
        <commandText>
          /*
          SELECT b.DeptId, SUM(b.TotalCourierCharge) FROM StudioDCNote a
          INNER JOIN StudioDCNoteShipment b ON a.DCNoteId = b.DCNoteId
          WHERE a.DCNoteNo = @DCNoteNo
          GROUP BY b.DeptId
          */
          SELECT e.T1, ISNULL(c.SalesForecastSpecialGroupId, d.OfficeId) AS HandlingOfficeId, SUM(b.TotalCourierCharge), MAX(c.ShipmentId) AS ShipmentId FROM StudioDCNote a
          INNER JOIN StudioDCNoteShipment b ON a.DCNoteId = b.DCNoteId AND b.Status = 1
          INNER JOIN Shipment c ON b.ShipmentId = c.ShipmentId
          INNER JOIN Contract d ON c.ContractId = d.ContractId
          INNER JOIN NSLDB..OfficeStructureAccountCode e ON d.ProductTeamId = e.OfficeStructureId
          WHERE a.DCNoteNo = @DCNoteNo AND a.Status = 1
          GROUP BY e.T1, ISNULL(c.SalesForecastSpecialGroupId, d.OfficeId)
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteNo" type="Text">
        <commandText>
          SELECT SUBSTRING(Max(DCNoteNo),7,3) FROM StudioDCNote WHERE DCNoteNo LIKE '%' + @DCNoteNo + '%'
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteId" type="Text">
        <commandText>
          SELECT Max(DCNoteId) FROM StudioDCNote
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="StudioDCNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="MockShopDCNoteShipmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetMockShopDCNoteShipmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNoteShipmentDetail WHERE DCNoteShipmentDetailId = @DCNoteShipmentDetailId
        </commandText>
        <parameters>
          <param key="DCNoteShipmentDetailId" name="@DCNoteShipmentDetailId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMockShopDCNoteShipmentDetailByDCNoteId" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNoteShipmentDetail sd
          INNER JOIN MockShopDCNoteShipment s ON s.DCNoteShipmentId = sd.DCNoteShipmentId AND s.Status = 1
          INNER JOIN MockShopDCNote m ON m.DCNoteId = s.DCNoteId AND m.Status = 1
          WHERE m.DCNoteId = @DCNoteId AND sd.Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDCNoteShipmentDetailId" type="Text">
        <commandText>
          SELECT MAX(DCNoteShipmentDetailId) FROM MockShopDCNoteShipmentDetail
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="MockShopDCNoteShipmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="StudioDCNoteShipmentDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetStudioDCNoteShipmentDetailByKey" type="Text">
        <commandText>
          SELECT * FROM StudioDCNoteShipmentDetail WHERE DCNoteShipmentDetailId = @DCNoteShipmentDetailId
        </commandText>
        <parameters>
          <param key="DCNoteShipmentDetailId" name="@DCNoteShipmentDetailId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetStudioDCNoteShipmentDetailByDCNoteId" type="Text">
        <commandText>
          SELECT * FROM StudioDCNoteShipmentDetail sd
          INNER JOIN StudioDCNoteShipment s ON s.DCNoteShipmentId = sd.DCNoteShipmentId AND s.Status = 1
          INNER JOIN StudioDCNote m ON m.DCNoteId = s.DCNoteId AND m.Status = 1
          WHERE m.DCNoteId = @DCNoteId AND sd.Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDCNoteShipmentDetailId" type="Text">
        <commandText>
          SELECT MAX(DCNoteShipmentDetailId) FROM StudioDCNoteShipmentDetail
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="StudioDCNoteShipmentDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="MockShopDCNoteShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingMockShopShipmentList" type="Text">
        <commandText>
          SELECT-1 AS DCNoteId, s.ShipmentId AS DCNoteShipmentId, c.OfficeId, s.ShipmentId, c.TradingAgencyId, os.ParentId AS DeptId, c.ProductTeamId, s.ContractId,
          c.ProductId, c.SeasonId, s.VendorId, s.CountryOfOriginId, c.PackingUnitId, s.SellCurrencyId, cos.TermOfPurchaseId,
          i.CourierChargeToNUK AS TotalCourierCharge, s.TotalShippedAmt, s.TotalShippedQty, s.NSLCommissionPercent, i.NSLCommissionAmt,1 AS Status
          FROM CutOffSales cos
          INNER JOIN Shipment s ON s.ShipmentId = cos.ShipmentId
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN NSLDB..OfficeStructure os ON os.OfficeStructureId = c.ProductTeamId
          WHERE
          s.IsMockShopSample = 1
          --AND cos.FiscalYear = @fiscalYear AND cos.Period = @period
          AND ((cos.FiscalYear = @fiscalYear AND cos.Period = @period and cos.isAccrual = 0) OR
          (cos.IsAccrual = 1
          AND EXISTS(SELECT * FROM NSLDB..AccountFinancialCalender WHERE Appid= 9 AND i.InvoiceUploadDate BETWEEN StartDate AND EndDate AND
          BudgetYear = @fiscalYear AND Period = @period)))
          AND cos.OfficeId = @officeId
          AND NOT EXISTS(SELECT * FROM MockShopDCNoteShipment ms WHERE ShipmentId = cos.ShipmentId AND ms.Status = 1)
        </commandText>
        <parameters>
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="period" name="@period" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMockShopShipmentList" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNoteShipment WHERE DCNoteId = @DCNoteId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMockShopDCNoteShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM MockShopDCNoteShipment WHERE DCNoteShipmentId = @DCNoteShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteShipmentId" name="@DCNoteShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDebitNoteShipmentId" type="Text">
        <commandText>
          SELECT Max(DCNoteShipmentId) FROM MockShopDCNoteShipment
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="MockShopDCNoteShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="StudioDCNoteShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingStudioShipmentList" type="Text">
        <commandText>
          SELECT-1 AS DCNoteId, s.ShipmentId AS DCNoteShipmentId, c.OfficeId, s.ShipmentId, c.TradingAgencyId, os.ParentId AS DeptId, c.ProductTeamId, s.ContractId,
          c.ProductId, c.SeasonId, s.VendorId, s.CountryOfOriginId, c.PackingUnitId, s.SellCurrencyId, cos.TermOfPurchaseId,
          i.CourierChargeToNUK AS TotalCourierCharge, s.TotalShippedAmt, s.TotalShippedQty, s.NSLCommissionPercent, i.NSLCommissionAmt,1 AS Status
          FROM CutOffSales cos
          INNER JOIN Shipment s ON s.ShipmentId = cos.ShipmentId
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN NSLDB..OfficeStructure os ON os.OfficeStructureId = c.ProductTeamId
          WHERE
          s.IsStudioSample = 1
          --AND cos.FiscalYear = @fiscalYear AND cos.Period = @period
          AND ((cos.FiscalYear = @fiscalYear AND cos.Period = @period and cos.isAccrual = 0) OR
          (cos.IsAccrual = 1
          AND EXISTS(SELECT * FROM NSLDB..AccountFinancialCalender WHERE Appid= 9 AND i.InvoiceUploadDate BETWEEN StartDate AND EndDate AND
          BudgetYear = @fiscalYear AND Period = @period)))
          AND cos.OfficeId = @officeId
          AND NOT EXISTS(SELECT * FROM StudioDCNoteShipment ms WHERE ShipmentId = cos.ShipmentId AND ms.Status = 1)
        </commandText>
        <parameters>
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="period" name="@period" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetStudioShipmentList" type="Text">
        <commandText>
          SELECT * FROM StudioDCNoteShipment WHERE DCNoteId = @DCNoteId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetStudioDCNoteShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM StudioDCNoteShipment WHERE DCNoteShipmentId = @DCNoteShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteShipmentId" name="@DCNoteShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDebitNoteShipmentId" type="Text">
        <commandText>
          SELECT Max(DCNoteShipmentId) FROM StudioDCNoteShipment
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="StudioDCNoteShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UTContractDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUTContractDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTContractDCNoteByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNote WHERE FiscalYear = @FiscalYear AND Period = @Period AND OfficeId = @OfficeId AND Status = 1
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTContractDCNoteByShipmentId" type="Text">
        <commandText>
          SELECT m.*
          FROM UTContractDCNote m
          INNER JOIN UTContractDCNoteShipment s ON m.DCNoteId = s.DCNoteId
          WHERE s.DCNoteShipmentId = @ShipmentId AND m.Status = 1 AND s.Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTContractDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTContractDCNoteByPeriod" type="Text">
        <commandText>
          SELECT *
          FROM UTContractDCNote WHERE FiscalYear = @FiscalYear AND Period = @Period AND SellCurrencyId = @CurrencyId
          AND OfficeId = @OfficeId AND Status = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTContractDCNoteByDCNoteNo" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNote WHERE DCNoteNo = @DCNoteNo AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteNo" type="Text">
        <commandText>
          SELECT SUBSTRING(Max(DCNoteNo),7,3) FROM UTContractDCNote WHERE DCNoteNo LIKE '%' + @DCNoteNo + '%'
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteId" type="Text">
        <commandText>
          SELECT Max(DCNoteId) FROM UTContractDCNote
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UTContractDCNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UTContractDCNoteShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUTContractShipmentList" type="Text">
        <commandText>
          <![CDATA[
          SELECT -1 AS DCNoteId, s.ShipmentId AS DCNoteShipmentId, c.OfficeId, s.ShipmentId, os.ParentId AS DeptId, c.ProductTeamId, s.ContractId,
          c.ProductId, c.SeasonId, s.VendorId, s.CountryOfOriginId, c.PackingUnitId, s.SellCurrencyId, s.TermOfPurchaseId,
          i.NSLCommissionAmt AS Commission, 
          s.TotalShippedAmt - s.TotalShippedSupplierGmtAmtAfterDiscount AS Margin, 
          ROUND(0.1 * s.TotalShippedAmt, 2) AS ServiceFee,
          ROUND(ROUND(SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.ShippedQty) / ROUND(1.0 / s.QuarterlyExchangeRate,4), 2) * 0.10417, 2) AS SupplierCommission,
          ROUND(SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.ShippedQty) / ROUND(1.0 / s.QuarterlyExchangeRate,4),2) As SupplierGmtAmt,
          ROUND(1.0 / s.QuarterlyExchangeRate,4) AS CNYExchangeRate, 
          SUM(ROUND(sd.ReducedSupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.ShippedQty) AS SupplierGmtAmtInCNY

          --ROUND(s.TotalOrderAmt * s.NSLCommissionPercent / 100,2) AS Commission, s.TotalOrderAmt - s.TotalSupplierGmtAmt AS Margin, ROUND(0.1 * s.TotalOrderAmt, 2) AS ServiceFee,
          --ROUND(ROUND(SUM(ROUND(sd.SupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.OrderQty) / ROUND(1.0 / s.QuarterlyExchangeRate,4), 2) * 0.10417, 2) AS SupplierCommission,
          --ROUND(SUM(ROUND(sd.SupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.OrderQty) / ROUND(1.0 / s.QuarterlyExchangeRate,4), 2) As SupplierGmtAmt,
          --ROUND(1.0 / s.QuarterlyExchangeRate,4) AS CNYExchangeRate, SUM(ROUND(sd.SupplierGmtPrice * 1.0 / s.QuarterlyExchangeRate,2) * sd.OrderQty) AS SupplierGmtAmtInCNY
          , 1 AS Status

          FROM Shipment s
          INNER JOIN Contract c ON c.ContractId = s.ContractId AND s.Status = 1 AND c.Status = 1
          INNER JOIN ShipmentDetail sd ON s.ShipmentId = sd.ShipmentId AND sd.Status = 1
          AND s.WorkflowStatusId = 8
          AND s.CustomerAtWarehouseDate > '2017-01-01'
          INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId
          INNER JOIN NSLDB..OfficeStructure os ON os.OfficeStructureId = c.ProductTeamId
          INNER JOIN NSLDB..AccountFinancialCalender x ON x.Appid= 9 AND x.BudgetYear = @FiscalYear AND x.Period = @Period AND x.Status = 1
          WHERE s.TermOfPurchaseId = 5 AND c.OfficeId = @OfficeId
          AND i.InvoiceDate <= x.EndDate
          --AND s.CustomerAtWarehouseDate <= x.EndDate
          AND NOT EXISTS(SELECT * FROM UTContractDCNoteShipment ms WHERE ShipmentId = s.ShipmentId AND ms.Status = 1)
          --AND s.TotalOrderAmt > 0
          GROUP BY s.ShipmentId, c.OfficeId, os.ParentId, c.ProductTeamId, s.ContractId, c.ProductId, c.SeasonId, s.VendorId, s.CountryOfOriginId, c.PackingUnitId, s.SellCurrencyId, s.TermOfPurchaseId, s.NSLCommissionPercent,
          s.TotalOrderAmt, s.TotalSupplierGmtAmt,
          s.TotalShippedAmt, s.TotalShippedSupplierGmtAmtAfterDiscount, s.QuarterlyExchangeRate,i.NSLCommissionAmt          
          
          ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUTContractShipmentList" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNoteShipment WHERE DCNoteId = @DCNoteId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUTContractDCNoteShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM UTContractDCNoteShipment WHERE DCNoteShipmentId = @DCNoteShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteShipmentId" name="@DCNoteShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDebitNoteShipmentId" type="Text">
        <commandText>
          SELECT Max(DCNoteShipmentId) FROM UTContractDCNoteShipment
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UTContractDCNoteShipment" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="QACommissionDNApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetQACommissionDNByKey" type="Text">
        <commandText>
          SELECT * FROM QACommissionDN WHERE DNId = @DNId
        </commandText>
        <parameters>
          <param key="DNId" name="@DNId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetQACommissionDNByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM QACommissionDN WHERE FiscalYear = @FiscalYear AND Period = @Period AND OfficeId = @OfficeId AND VendorId = @VendorId AND Status = 1
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetQACommissionDNByShipmentId" type="Text">
        <commandText>
          SELECT m.*
          FROM QACommissionDN m
          INNER JOIN QACommissionDNShipment s ON m.DNId = s.DNId
          WHERE s.ShipmentId = @ShipmentId AND m.Status = 1 AND s.Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetQACommissionDNByPeriod" type="Text">
        <commandText>
          SELECT *
          FROM QACommissionDN WHERE FiscalYear = @FiscalYear AND Period = @Period AND CurrencyId = @CurrencyId
          AND OfficeId = @OfficeId AND Status = 1
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetQACommissionDNByDNNo" type="Text">
        <commandText>
          SELECT * FROM QACommissionDN WHERE DNNo = @DNNo AND Status = 1
        </commandText>
        <parameters>
          <param key="DNNo" name="@DNNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteNo" type="Text">
        <commandText>
          SELECT SUBSTRING(Max(DNNo),7,3) FROM QACommissionDN WHERE DNNo LIKE '%' + @DNNo + '%'
        </commandText>
        <parameters>
          <param key="DNNo" name="@DNNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteId" type="Text">
        <commandText>
          SELECT Max(DNId) FROM QACommissionDN
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="QACommissionDN" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="QACommissionDNShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingQACommissionDNShipmentList" type="Text">
        <commandText>
          --SELECT -1 AS DNId, s.ShipmentId AS ShipmentId, s.VendorId, s.TotalShippedQty AS ShippedQty, s.TotalShippedSupplierGmtAmtAfterDiscount AS SupplierAmt, s.QACommissionPercent,
          --ROUND(s.QACommissionPercent * s.TotalShippedSupplierGmtAmtAfterDiscount / 100, 2) AS QACommissionAmt, s.BuyCurrencyId AS CurrencyId, 1 AS Status,
          SELECT -1 AS DNId, s.ShipmentId AS ShipmentId, s.VendorId, s.TotalOrderQty AS ShippedQty, s.TotalShippedSupplierGmtAmtAfterDiscount AS SupplierAmt, s.QACommissionPercent,
          ROUND(s.QACommissionPercent * s.TotalShippedSupplierGmtAmtAfterDiscount / 100, 2) AS QACommissionAmt, s.BuyCurrencyId AS CurrencyId, 1 AS Status,

          0 AS CreatedBy, CONVERT(datetime,'01-01-68 09:00:00 AM',5) AS CreatedOn
          FROM UTContractDCNote a INNER JOIN UTContractDCNoteShipment b ON a.DCNoteId = b.DCNoteId AND a.FiscalYear = @fiscalYear AND a.Period = @period AND a.OfficeId = @officeId AND a.Status = 1
          INNER JOIN Shipment s ON b.ShipmentId = s.ShipmentId AND s.Status = 1
          ORDER BY s.VendorId

        </commandText>
        <parameters>
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="period" name="@period" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetQACommissionDNShipmentList" type="Text">
        <commandText>
          SELECT * FROM QACommissionDNShipment WHERE DNId = @DNId AND Status = 1
        </commandText>
        <parameters>
          <param key="DNId" name="@DNId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetQACommissionDNShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM QACommissionDNShipment WHERE ShipmentId = @ShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="QACommissionDNShipment" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="ClaimApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetClaimByKey" type="Text">
        <commandText>
          SELECT * FROM Claim WHERE ClaimId = @ClaimId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxClaimId" type="Text">
        <commandText>
          SELECT MAX(ClaimId) FROM Claim
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="Claim" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ClaimDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetClaimDetailByKey" type="Text">
        <commandText>
          SELECT * FROM ClaimDetail WHERE ClaimDetailId = @ClaimDetailId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimDetailId" name="@ClaimDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetClaimDetailByClaimId" type="Text">
        <commandText>
          SELECT * FROM ClaimDetail WHERE ClaimId = @ClaimId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxClaimDetailId" type="Text">
        <commandText>
          SELECT MAX(ClaimDetailId) FROM ClaimDetail
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ClaimDetail" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="BankReconciliationRequestApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetBankReconciliationRequestList" type="Text">
        <commandText>
          SELECT * FROM BankReconciliationRequest WHERE Status = 1
        </commandText>
      </dataCommand>

      <dataCommand name="GetBankReconciliationRequestByKey" type="Text">
        <commandText>
          SELECT * FROM BankReconciliationRequest WHERE RequestId = @RequestId
        </commandText>
        <parameters>
          <param key="RequestId" name="@RequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetBankReconciliationRequestByFileName" type="Text">
        <commandText>
          SELECT * FROM BankReconciliationRequest WHERE FileName = @FileName
        </commandText>
        <parameters>
          <param key="FileName" name="@FileName" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxBankReconciliationRequestId" type="Text">
        <commandText>
          SELECT MAX(RequestId) FROM BankReconciliationRequest
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="BankReconciliationRequest" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ConvertPaymentFileRequestApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetConvertPaymentFileRequestByKey" type="Text">
        <commandText>
          SELECT * FROM ConvertPaymentFileRequest WHERE RequestId = @RequestId
        </commandText>
        <parameters>
          <param key="RequestId" name="@RequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetConvertPaymentFileRequestByFileName" type="Text">
        <commandText>
          SELECT * FROM ConvertPaymentFileRequest WHERE FileName = @FileName
        </commandText>
        <parameters>
          <param key="FileName" name="@FileName" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxConvertPaymentFileRequestId" type="Text">
        <commandText>
          SELECT MAX(RequestId) FROM ConvertPaymentFileRequest
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ConvertPaymentFileRequest" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="GenerateFileRequestApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetGenerateFileRequestByKey" type="Text">
        <commandText>
          SELECT * FROM GenerateFileRequest WHERE RequestId = @RequestId
        </commandText>
        <parameters>
          <param key="RequestId" name="@RequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetGenerateFileRequestByFileName" type="Text">
        <commandText>
          SELECT * FROM GenerateFileRequest WHERE FileName = @FileName
        </commandText>
        <parameters>
          <param key="FileName" name="@FileName" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetGenerateFileRequestList" type="Text">
        <commandText>
          SELECT * FROM GenerateFileRequest WHERE Status = 1
        </commandText>
      </dataCommand>
      <dataCommand name="GetMaxGenerateFileRequestId" type="Text">
        <commandText>
          SELECT MAX(RequestId) FROM GenerateFileRequest
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="GenerateFileRequest" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="EInvoiceBatchApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetEInvoiceBatchByKey" type="Text">
        <commandText>
          SELECT * FROM eInvoiceBatch WHERE eInvoiceBatchId = @eInvoiceBatchId
        </commandText>
        <parameters>
          <param key="eInvoiceBatchId" name="@eInvoiceBatchId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxEInvoiceBatchId" type="Text">
        <commandText>
          SELECT MAX(eInvoiceBatchId) FROM eInvoiceBatch
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="eInvoiceBatch" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="BankAccountApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getFullBankInfoCmd" type="Text">
        <commandText>
          SELECT 	*
          FROM BankAccount
          WHERE Status = 1
        </commandText>
      </dataCommand>
      <dataCommand name="getPaymentReferenceCodeList" type="Text">
        <commandText>
          SELECT DISTINCT PaymentReferenceCode FROM BankAccount WHERE Status = 1 ORDER BY PaymentReferenceCode
        </commandText>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="BankAccount" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SettlementBankDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSettlementBankDetail" type="Text">
        <commandText>
          SELECT * FROM SettlementBankDetail
          WHERE
          ',' + OfficeId + ',' LIKE '%,' + @OfficeId + ',%'
          AND (CurrencyId = @CurrencyId OR CurrencyId = 0)
          AND (',' + TradingAgencyId + ',' LIKE '%,'+ @TradingAgencyId + ',%' OR TradingAgencyId = '0')
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="varchar" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="int" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SettlementBankDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="OutstandingTradeReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getAPListByCriteria" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @ExchangeRateDate DateTime
			SELECT @ExchangeRateDate=StartDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE BudgetYear = @ExchangeRateYear AND Period = @ExchangeRatePeriod AND AppId = 9
			
			SELECT
				InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
				InvoiceDate,
				Vendor = v.Name,
				AccountCode = (CASE @ReportVersion WHEN 0 THEN v.SUNAccountCode WHEN 1 THEN v.EpicorSupplierId ELSE '' END), 
				x.SupplierInvoiceNo, i.SequenceNo,
				OfficeCode = (SELECT OfficeCode FROM NSLDB..office WITH (NOLOCK) WHERE OfficeId = c.OfficeId),
				TradingAgency = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = c.TradingAgencyId),
				TermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId),
				ContractNo = c.ContractNo + x.SplitSuffix, s.DeliveryNo, 
				CustomerCode = (SELECT CustomerCode FROM Customer WITH (NOLOCK) WHERE CustomerId = c.CustomerId), 
				PaymentTermDesc = (SELECT PaymentTermDesc FROM PaymentTerm WHERE PaymentTermId = s.PaymentTermId),
				FiscalYear = Convert(varchar,fp.Year), FiscalPeriod = fp.Period, FiscalWeek = fp.YearWeek,
				ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK) WHERE ProductId = x.ProductId), x.TotalShippedQty,
				PackingUnit = (SELECT PackingUnitDesc FROM PackingUnit WITH (NOLOCK) WHERE PackingUnitId = x.PackingUnitId),
				CurrencyCode = (SELECT CurrencyCode FROM Currency WITH (NOLOCK) WHERE CurrencyId = x.BuyCurrencyId),
				OtherAmount = x.PayAmount,
				BaseAmount = ROUND(x.PayAmount * r.ExchangeRate / br.ExchangeRate, 2),
				CO = (SELECT Name FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = x.CountryOfOriginId),

				DataType = 1,
				x.LabTestIncome, x.ShippingDocReceiptDate, x.AccountDocReceiptDate, x.ShippingDocCheckedOn,
				QACommissionAmount = ROUND(x.PayAmount * (x.QACommissionPercent/100), 2),
				VendorPaymentDiscountAmount = ROUND(x.PayAmount * (x.VendorPaymentDiscountPercent/100), 2),
				NetPaymentAmount = x.PayAmount - ROUND(x.LabTestIncome * x.TotalShippedQty, 2)
													- ROUND(x.PayAmount * (x.QACommissionPercent/100), 2) 
													- ROUND(x.PayAmount * (x.VendorPaymentDiscountPercent/100), 2),
				LabTestIncomeBaseAmount = ROUND(ROUND(x.LabTestIncome * x.TotalShippedQty, 2) * r.ExchangeRate / br.ExchangeRate,2),
				QACommissionBaseAmount = ROUND(ROUND(x.PayAmount * (x.QACommissionPercent/100), 2) * r.ExchangeRate / br.ExchangeRate, 2),
				VendorPaymentDiscountBaseAmount = ROUND(ROUND(x.PayAmount * (x.VendorPaymentDiscountPercent/100), 2) * r.ExchangeRate / br.ExchangeRate, 2),
				LGDueDate = (CASE WHEN (SELECT COUNT(distinct [LGId]) as [count] FROM LGDetail WITH (NOLOCK) WHERE ShipmentId=i.ShipmentId) > 0 THEN DATEADD(DAY,60,i.InvoiceDate) ELSE NULL END),
				LCBillRefNo, x.LCPaymentCheckedDate,
				ShipmentMethodDesc = (SELECT ShipmentMethodDesc FROM ShipmentMethod WITH (NOLOCK) WHERE ShipmentMethodId=s.ShipmentMethodId)
			FROM 
				(
				SELECT cs.FiscalYear, cs.Period, s.ShipmentId, i.APRefNo, SplitSuffix='',
						i.SupplierInvoiceNo, i.ShippingDocReceiptDate, i.AccountDocReceiptDate, i.ShippingDocCheckedOn, i.LCPaymentCheckedDate, 
						s.VendorId, c.ProductId, c.PackingUnitId, s.PaymentTermId, s.CountryOfOriginId, 
						s.TotalShippedQty, s.BuyCurrencyId, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.LabTestIncome, 
						PayAmount = s.TotalShippedSupplierGmtAmtAfterDiscount
					FROM Shipment AS s
						INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND (s.SplitCount = 0 OR (s.SplitCount > 0 AND s.IsVirtualSetSplit = 1))
						INNER JOIN Contract AS c WITH (NOLOCK) ON s.ContractId = c.ContractId
						LEFT JOIN CutoffSales AS cs WITH (NOLOCK) ON cs.ShipmentId = i.ShipmentId
					WHERE s.Status=1 AND s.WorkflowStatusId=8 
						AND (i.APDate IS NULL OR i.APDate > @CutoffDate)
				UNION
				SELECT cs.FiscalYear, cs.Period, ss.ShipmentId, ss.APRefNo, ss.SplitSuffix,
						ss.SupplierInvoiceNo, ss.ShippingDocReceiptDate, ss.AccountDocReceiptDate, ss.ShippingDocCheckedOn, ss.LCPaymentCheckedDate, 
						ss.VendorId, ss.ProductId, ss.PackingUnitId, ss.PaymentTermId, ss.CountryOfOriginId, 
						ss.TotalShippedQty, ss.BuyCurrencyId, ss.QACommissionPercent, ss.VendorPaymentDiscountPercent, ss.LabTestIncome, 
						PayAmount = ss.TotalShippedSupplierGmtAmtAfterDiscount
					FROM Shipment AS s WITH (NOLOCK)
						INNER JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId = s.ShipmentId AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1
						LEFT JOIN CutoffSales AS cs WITH (NOLOCK) ON cs.ShipmentId = s.ShipmentId
					WHERE s.Status=1 AND s.WorkflowStatusId=8 
						AND (ss.APDate IS NULL OR ss.APDate > @CutoffDate)
				) AS x
				INNER JOIN Shipment AS s ON s.ShipmentId = x.ShipmentId
				INNER JOIN Contract AS c ON c.ContractId = s.ContractId
				INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId
				INNER JOIN (SELECT DISTINCT OfficeStructureId FROM nsldb..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND OfficeStructureTypeId=50 AND Status=1) AS pt ON pt.OfficeStructureId=c.ProductTeamId 
				CROSS APPLY (SELECT * from nsldb..f_getPeriodWeekInfoByDate(i.invoiceDate)) as fp
				INNER JOIN NSLINDUSTRY..Vendor AS v WITH (NOLOCK) ON x.VendorId = v.VendorId
				LEFT JOIN ExchangeRate r WITH (NOLOCK) ON r.CurrencyId = x.BuyCurrencyId  AND r.ExchangeRateTypeId = 2 AND r.Status = 1 AND @ExchangeRateDate BETWEEN r.EffectiveDateFrom AND r.EffectiveDateTo
				LEFT JOIN ExchangeRate br WITH (NOLOCK) ON br.CurrencyId = @BaseCurrencyId  AND br.ExchangeRateTypeId = 2 AND br.Status = 1 AND @ExchangeRateDate BETWEEN br.EffectiveDateFrom AND br.EffectiveDateTo
			WHERE s.Status = 1
				AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
				AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
				AND (@accReceiptDateFrom IS NULL OR x.AccountDocReceiptDate BETWEEN @accReceiptDateFrom AND DATEADD(d,1,@accReceiptDateTo))
				AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
				AND (@paymentTermId = -1 OR x.PaymentTermId = @paymentTermId)
				AND (@orderType IS NULL OR (@orderType = 'F' AND s.TermOfPurchaseId = 1) OR (@orderType = 'V' AND s.TermOfPurchaseId IN (2,3,4)))
				AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
				AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
				AND c.ProductTeamId @productTeamList
				AND (@currencyId = -1 OR x.BuyCurrencyId = @currencyId)
				AND (@payRefCode = '' OR x.APRefNo = @payRefCode)
			  --AND (@budgetYear = -1 OR EXISTS(SELECT * FROM CutOffSales WITH (NOLOCK) WHERE ShipmentId = s.ShipmentId AND InvoiceDate IS NOT NULL AND FiscalYear = @budgetYear AND Period BETWEEN @periodFrom AND @periodTo))
			  --AND (@budgetYear = -1 OR (i.InvoiceDate IS NOT NULL AND EXISTS(SELECT * FROM CutOffSales WITH (NOLOCK) WHERE ShipmentId = s.ShipmentId AND FiscalYear = @budgetYear AND Period BETWEEN @periodFrom AND @periodTo)))
				AND (@budgetYear = -1 OR (i.InvoiceDate IS NOT NULL AND x.FiscalYear=@BudgetYear AND x.Period BETWEEN @PeriodFrom AND @PeriodTo))
				AND (c.CustomerId @customerIdList)
				AND (c.TradingAgencyId @tradingAgencyList)
				AND (@vendorId = -1 OR x.VendorId = @vendorId)

				AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
				--AND (@isUTOrder = -1 OR (@isUTOrder = 1 AND s.CustomerDestinationId IN (4,5, 28))  OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5, 28)))
				AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
				AND (@isOPROrder = -1 OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)) OR (@isOPROrder = 1 AND s.WithOPRFabric > 0))

				AND ((@sampleOrderGroup = -1)
					OR (@sampleOrderGroup = 0 AND (s.IsMockShopSample!=1 AND s.IsPressSample!=1))
					OR (@sampleOrderGroup = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1))
					OR (@sampleOrderGroup = 2 AND (s.IsMockShopSample=1))
					OR (@sampleOrderGroup = 3 AND (s.IsPressSample=1))
					OR (@sampleOrderGroup = 4 AND (s.IsMockShopSample!=1)))




          ORDER BY InvoiceNo, SequenceNo
          ]]>
        </commandText>
        <parameters>
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="accReceiptDateFrom" name="@accReceiptDateFrom" type="DateTime" direction="Input" />
          <param key="accReceiptDateTo" name="@accReceiptDateTo" type="DateTime" direction="Input" />
          <param key="currencyId" name="@currencyId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="exchangeRateYear" name="@exchangeRateYear" type="int" direction="Input" />
          <param key="exchangeRatePeriod" name="@exchangeRatePeriod" type="int" direction="Input" />
          <param key="payRefCode" name="@payRefCode" type="varchar" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="paymentTermId" name="@paymentTermId" type="int" direction="Input" />
          <param key="orderType" name="@orderType" type="varchar" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="cutoffDate" name="@cutoffDate" type="DateTime" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="sampleOrderGroup" name="@sampleOrderGroup" type="int" direction="Input" />
          <param key="ReportVersion" name="@ReportVersion" type="int" direction="Input" />
          <param key="userId" name="@userId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getARListByCriteria" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @ExchangeRateDate DateTime
			SELECT @ExchangeRateDate=StartDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE BudgetYear = @ExchangeRateYear AND Period = @ExchangeRatePeriod AND AppId = 9

			SELECT
			  InvoiceNo = dbo.fn_formatInvoiceNo(x.InvoicePrefix, x.InvoiceSeq, x.InvoiceYear) + InvoiceNoSuffix,
			  x.InvoiceDate, Vendor=v.Name, 
			  AccountCode = (CASE @ReportVersion WHEN 0 THEN v.SUNAccountCode WHEN 1 THEN v.EpicorSupplierId ELSE '' END), 
			  x.SupplierInvoiceNo, x.SequenceNo,
			  OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WITH (NOLOCK) WHERE OfficeId = x.OfficeId),
			  TradingAgency = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = x.TradingAgencyid),
			  TermOfPurchase = (SELECT TermOfPurchaseDesc From TermOfPurchase WITH (NOLOCK) WHERE TermofPurchaseId = x.TermOfPurchaseId),
			  x.ContractNo, x.DeliveryNo, x.CustomerCode, x.PaymentTermDesc, CONVERT(varchar,x.FiscalYear) AS FiscalYear, x.FiscalPeriod, x.FiscalWeek,
			  ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK) WHERE ProductId = x.ProductId), x.TotalShippedQty,
			  PackingUnit = (SELECT PackingUnitDesc FROM PackingUnit WITH (NOLOCK) WHERE PackingUnitId = x.PackingUnitId),
			  CurrencyCode = (SELECT CurrencyCode FROM Currency WITH (NOLOCK) WHERE CurrencyId = x.SellCurrencyId),
			  x.OtherAmount,
			  --BaseAmount = ROUND(x.OtherAmount * (CASE WHEN x.SellCurrencyId=@BaseCurrencyId THEN 1 ELSE r.ExchangeRate / br.ExchangeRate END),2),
			  BaseAmount = ROUND(x.OtherAmount * r.ExchangeRate / br.ExchangeRate ,2),
			  CO = (SELECT Name FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = x.CountryOfOriginId), 
			  DataType, 
			  x.LabTestIncome, x.ShippingDocReceiptDate, x.AccountDocReceiptDate
		  FROM
		  (	
		  SELECT 
				i.ShipmentId, i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SupplierInvoiceNo, i.SequenceNo, i.ShippingDocReceiptDate, i.AccountDocReceiptDate,
				c.OfficeId, c.TradingAgencyid, c.ProductId, c.PackingUnitId, c.ContractNo, 
				s.DeliveryNo, cus.CustomerCode, pt.PaymentTermDesc,
        (select Year from nsldb..f_getPeriodWeekInfoByDate(i.invoiceDate)) as FiscalYear,
        (select Period from nsldb..f_getPeriodWeekInfoByDate(i.invoiceDate)) as FiscalPeriod,
        (select YearWeek from nsldb..f_getPeriodWeekInfoByDate(i.invoiceDate)) as FiscalWeek,
        s.VendorId, s.TotalShippedQty, s.TermOfPurchaseId, s.SellCurrencyId, s.CountryOfOriginId, s.LabTestIncome, 
				OtherAmount = (CASE dt.InterfaceTypeId WHEN 1 THEN s.TotalShippedAmt WHEN 2 THEN i.NSLCommissionAmt END),
				DataType = dt.InterfaceTypeId,
				dt.InvoiceNoSuffix,
				ExchangeRateDate = @ExchangeRateDate
          FROM invoice AS i
			INNER JOIN (SELECT InterfaceTypeId=1, InvoiceNoSuffix=''  WHERE @DataType IN (-1,1) UNION 
						SELECT InterfaceTypeId=2, InvoiceNoSuffix='C' WHERE @DataType IN (-1,2)
						) as dt ON ((dt.InterfaceTypeId = 1 AND (i.ARDate IS NULL OR i.ARDate > @cutoffDate)) 
							OR (dt.InterfaceTypeId = 2 AND (i.NSLCommissionSettlementDate IS NULL OR i.NSLCommissionSettlementDate > @cutoffDate)))
			INNER JOIN shipment AS s  WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId --AND (s.SplitCount = 0 OR (s.SplitCount > 0 AND s.IsVirtualSetSplit = 1))
			INNER JOIN Contract AS c  WITH (NOLOCK) ON s.ContractId = c.ContractId
      INNER JOIN Customer AS cus WITH (NOLOCK) ON cus.CustomerId = c.CustomerId
      INNER JOIN PaymentTerm AS pt WITH (NOLOCK) ON s.PaymentTermId = pt.PaymentTermId
			WHERE s.WorkflowStatusId = 8 AND s.Status = 1
				  AND (@InvoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
				  AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
				  AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
				  AND (@orderType IS NULL OR (@orderType = 'F' AND s.TermOfPurchaseId = 1) OR (@orderType = 'V' AND s.TermOfPurchaseId IN (2,3,4)))
				  AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
				  AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
				  AND c.ProductTeamId @productTeamList
				  AND (@vendorId = -1 OR s.VendorId = @vendorId)
				  AND (@currencyId = -1 OR s.SellCurrencyId = @currencyId)
				  AND (@payRefCode = '' OR i.ARRefNo = @payRefCode)
				  AND (@budgetYear = -1 OR EXISTS(SELECT * FROM SUNInterfaceLog WITH (NOLOCK)
							WHERE SUNInterfaceTypeId IN (1,26) AND CategoryId in ( 1, 3) AND IsReversalEntry = 0
							and FiscalYear = @Budgetyear AND Period Between @periodfrom and @periodto 
							AND SHIPMENTID = s.ShipmentId))
				  AND (c.CustomerId @customerIdList)
				  AND (c.TradingAgencyId @tradingAgencyList)
				  AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
				  --AND (@isUTOrder = -1 OR (@isUTOrder = 1 AND s.CustomerDestinationId IN (4,5,28))  OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
          AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder = 1 AND s.TermOfPurchaseId = 5))
				  AND (@isOPROrder = -1 OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)) OR (@isOPROrder = 1 AND s.WithOPRFabric > 0))
				  AND ((@sampleOrderGroup = -1)
						OR (@sampleOrderGroup = 0 AND (s.IsMockShopSample!=1 AND s.IsPressSample!=1))
						OR (@sampleOrderGroup = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1))
						OR (@sampleOrderGroup = 2 AND (s.IsMockShopSample=1))
						OR (@sampleOrderGroup = 3 AND (s.IsPressSample=1))
						OR (@sampleOrderGroup = 4 AND (s.IsMockShopSample!=1)))
		  ) AS x
		  INNER JOIN NSLINDUSTRY..Vendor AS v WITH (NOLOCK) ON x.VendorId = v.VendorId
		  LEFT JOIN ExchangeRate r WITH (NOLOCK) ON r.CurrencyId = SellCurrencyId  AND r.ExchangeRateTypeId = 2 AND r.Status = 1 AND ExchangeRateDate BETWEEN r.EffectiveDateFrom AND r.EffectiveDateTo
		  LEFT JOIN ExchangeRate br WITH (NOLOCK) ON br.CurrencyId = @BaseCurrencyId  AND br.ExchangeRateTypeId = 2 AND br.Status = 1 AND ExchangeRateDate BETWEEN br.EffectiveDateFrom AND br.EffectiveDateTo
          ORDER BY DataType, InvoiceNo, SequenceNo


          ]]>
        </commandText>
        <parameters>
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="currencyId" name="@currencyId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="exchangeRateYear" name="@exchangeRateYear" type="int" direction="Input" />
          <param key="exchangeRatePeriod" name="@exchangeRatePeriod" type="int" direction="Input" />
          <param key="payRefCode" name="@payRefCode" type="varchar" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="orderType" name="@orderType" type="varchar" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="cutoffDate" name="@cutoffDate" type="DateTime" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="sampleOrderGroup" name="@sampleOrderGroup" type="int" direction="Input" />
          <param key="dataType" name="@dataType" type="int" direction="Input" />
          <param key="reportVersion" name="@reportVersion" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OutstandingTradeReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ShipmentCommissionReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getShipmentCommissionReport" type="Text">
        <commandText>
          <![CDATA[
			SELECT cos.*, BaseCurrencyId = @BaseCurrencyId,
				InvoiceNo = (CASE WHEN cos.InvoicePrefix IS NOT NULL THEN dbo.fn_FormatInvoiceNo(cos.InvoicePrefix, cos.InvoiceSeq, cos.InvoiceYear) END),
				AccrualInvDate = coalesce(i.InvoiceDate, i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate),
				CutoffType = (case when cos.isAccrual = 0 then 1									-- Actual
								when cos.fiscalYear = p.BudgetYear AND cos.Period = p.Period then 2	-- Accrual
								else 3 end)															-- Realized
			INTO #temp_cutoffsales
			FROM
				(Select BudgetYear=@BudgetYear, Period=@PeriodFrom, 
						StartDate = (SELECT StartDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE Appid= 9 AND BudgetYear=@budgetYear AND Period=@PeriodFrom), 
						EndDate = (SELECT EndDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE Appid= 9 AND BudgetYear=@budgetYear AND Period=@PeriodFrom)
				) as p
				INNER JOIN Shipment as s with (nolock) ON s.Status=1
				INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
				INNER JOIN CutOffSales AS cos WITH (NOLOCK) ON cos.ShipmentId = s.ShipmentId
			WHERE (@BudgetYear>0 AND @PeriodFrom>0)
				AND	((@isActual = 1  AND cos.isAccrual = 0 AND cos.fiscalYear = p.BudgetYear AND cos.Period = p.Period)		--AND s.WorkflowStatusId=8
					OR (@isAccrual = 1 AND cos.isAccrual = 1 AND cos.fiscalYear = p.BudgetYear AND cos.Period = p.Period)
					OR (@isRealized = 1 AND cos.IsAccrual = 1 
						AND (s.WorkflowStatusId=8 AND i.InvoiceUploadDate between p.StartDate and p.EndDate 
							OR (s.WorkflowStatusId=9 
								AND cos.FiscalYear = p.budgetYear - (case when p.Period=1 then 1 else 0 end) 
								AND cos.Period = p.Period - (case when p.Period=1 then -11 else 1 end)
								)
							)
						)
					)
			UNION	-- For Mockshop & Studio Sample report with Invoice Date Range parameter
			SELECT cos.*, BaseCurrencyId = @BaseCurrencyId,
				InvoiceNo = (CASE WHEN cos.InvoicePrefix IS NOT NULL THEN dbo.fn_FormatInvoiceNo(cos.InvoicePrefix, cos.InvoiceSeq, cos.InvoiceYear) END),
				AccrualInvDate = coalesce(i.InvoiceDate, i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate),
				CutoffType = (case when cos.isAccrual = 0 then 1										-- Actual
								when cos.fiscalYear = @BudgetYear AND cos.Period = @PeriodFrom then 2	-- Accrual
								else 3 end) 															-- Realized
			FROM Invoice AS i WITH (NOLOCK)
				INNER JOIN CutOffSales AS cos WITH (NOLOCK) ON cos.ShipmentId = i.ShipmentId
			WHERE (@BudgetYear=-1 OR @PeriodFrom=-1) 
				AND i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo
				
			SELECT ad.ShipmentId, ad.SettledAmt, an.IssueDate
				INTO #temp_SamePeriodAdj
				FROM AdjustmentDetail ad WITH (NOLOCK) 
				INNER JOIN AdjustmentNote AS an WITH (NOLOCK) ON ad.adjustmentnoteid = an.adjustmentnoteid AND ((@officeId = -1 AND an.OfficeId @officeIdList) OR an.OfficeId = @officeId)
				INNER JOIN NSLDB..AccountFinancialCalender AS fc WITH (NOLOCK) ON fc.Appid = 13 and fc.BudgetYear = @BudgetYear AND fc.period = @PeriodFrom AND an.IssueDate BETWEEN fc.StartDate and fc.EndDate 


			SELECT
				ShipmentId, 
				InvoiceNo = InvNo, 
				SequenceNo, 
				InvoiceDate = InvDate, 
				VendorName = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = x.VendorId), 
				ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK) WHERE ProductId = x.ProductId),
				ProductTeamCode = (SELECT Code FROM NSLDB..OfficeStructure WITH (NOLOCK) WHERE OfficeStructureId = x.ProductTeamId),
				DepartmentDesc = (SELECT Description FROM NSLDB..officestructure WHERE OfficeStructureId=x.DeptId), 
 				ContractNo, DeliveryNo, 
				SupplierInvoiceNo = SupplierInvNo,
				ShippingDocReceiptDate,
 				PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId), 
 				TotalPcs = TotalShippedQty * PiecesPerPack, 
				CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = isnull(x.CurrencyId,x.SellCurrencyId)), 
 				TotalShippedQty, 

				SalesOtherAmount,
				SalesBaseAmount,
 				NSLCommissionPercent, 
				SalesCommOtherAmount,
				SalesCommBaseAmount,
 				CourierChargeToNUKOtherAmount = CourierChargeToNUK,
				CourierChargeToNUKBaseAmount = ROUND(CourierChargeToNUK * SalesRate / SalesBaseRate,2),
				PurchaseOtherAmount,
				PurchaseBaseAmount,
 				SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = x.SeasonId), 
 				CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = x.CountryOfOriginId), 
 				OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = x.OfficeId), 
 				TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = x.TermOfPurchaseId), 
 				OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = x.WithOPRFabric), 
 				TradingAgencyName = (SELECT ShortName FROM TradingAgency WHERE TradingAgencyId = x.TradingAgencyId), 
				QACommissionPercent, 
 				VendorPaymentDiscountPercent,
				QACommOtherAmount,
				QACommBaseAmount = ROUND(QACommOtherAmount * PurchaseRate / PurchaseBaseRate, 2),
				PaymentDiscountOtherAmount,
				PaymentDiscountBaseAmount = ROUND(PaymentDiscountOtherAmount * PurchaseRate / PurchaseBaseRate, 2),
 				LabTestIncomeOtherAmount, 
				LabTestIncomeBaseAmount = ROUND(LabTestIncomeOtherAmount * SalesRate / SalesBaseRate, 2),
				SampleOrder = (case when IsMockShopSample=1 then 'MS' when IsStudioSample=1 then 'SS' else '' end),
				DCNoteNo,
				SectionNo = SectionNo
			INTO #temp_MainEntry
			FROM (
				SELECT	cos.*,
					c.DeptId, c.ContractNo, 
					s.DeliveryNo, s.NSLCommissionPercent, s.CountryOfOriginId,	s.WithOPRFabric, 
					i.shippingDocReceiptDate, i.CourierChargeToNUK,
					InvNo = ISNULL(cos.InvoiceNo, (CASE ct.CutoffType WHEN 2 THEN ii.InvoiceNo WHEN 3 THEN '' ELSE dbo.fn_FormatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) END)),
					InvDate = (case when ct.CutoffType=2 then cos.AccrualInvDate 
								when ct.CutoffType=3 then cos.InvoiceDate 
								else isnull(cos.InvoiceDate,i.InvoiceDate) end),
					SupplierInvNo = (case when ct.CutoffType=2 then i.SupplierInvoiceNo else cos.SupplierInvoiceNo end),
					CurrencyId = isnull(sl.CurrencyId, cos.SellCurrencyId),
					
					SalesOtherAmount = ISNULL((case when ct.CategoryId=3 then sl.OtherAmt else cos.TotalShippedAmt end) * (ReverseSign), 0),
					SalesBaseAmount =  ISNULL((case when ct.CategoryId=3 then sl.BaseAmt else cos.TotalSHippedAmtInBaseCurrency end) * (ReverseSign), 0),
					SalesCommOtherAmount = ISNULL((case when ct.CategoryId=3 then cl.OtherAmt else cos.SalesCommission end) * (ReverseSign), 0),
					SalesCommBaseAmount = ISNULL((case when ct.CategoryId=3 then cl.BaseAmt else cos.SalesCommissionInBaseCurrency end) * (ReverseSign),0),
					PurchaseOtherAmount = ISNULL((case when ct.CategoryId=3 then ISNULL(pa.SettledAmt, pl.OtherAmt) 
											when ct.CutoffType=2 then ISNULL(y.TotalShippedSupplierGmtAmt, cos.TotalShippedSupplierGmtAmt)
											else ISNULL(pa.SettledAmt, cos.TotalShippedSupplierGmtAmt) 
											end), 0) * (ReverseSign),
					PurchaseBaseAmount = ISNULL((case when ct.CategoryId=3 then ISNULL(ROUND(pa.SettledAmt * pr.ExchangeRate / pr.BaseExchangeRate,2), pl.BaseAmt)  
											when ct.CutoffType=2 then ISNULL(Round(y.TotalShippedSupplierGmtAmt * ar.ExchangeRate / ar.BaseExchangeRate,2), cos.TotalShippedSupplierGmtAmtInBaseCurrency)  
											else ISNULL(ROUND(pa.SettledAmt * pr.ExchangeRate / pr.BaseExchangeRate,2), cos.TotalShippedSupplierGmtAmtInBaseCurrency) 
											end), 0) * (ReverseSign),
					QACommOtherAmount = ISNULL(ROUND((case when ct.CategoryId=3 then pl.OtherAmt * pl.QACommissionPercent
											when ct.CutoffType=2 then isnull(y.QACommissionAmount, cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent) 
											else cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent 
											end) / 100, 2),0) * (ReverseSign), 
					PaymentDiscountOtherAmount = ISNULL(ROUND((case when ct.CategoryId=3 then pl.OtherAmt * pl.VendorPaymentDiscountPercent 
											when ct.CutoffType=2 then isnull(y.VendorPaymentDiscountAmount, cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent)
											else cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent
											end) / 100, 2),0) * (ReverseSign),
					LabTestIncomeOtherAmount = ISNULL(ROUND((case when ct.CategoryId=3 then sl.LabTestIncome * sl.qty 
											when ct.CutoffType=2 then s.LabTestIncome * s.TotalShippedQty
											else cos.LabTestIncome * cos.TotalShippedQty 
											end), 2),0) * (ReverseSign),
					SalesRate = sr.ExchangeRate,
					SalesBaseRate = sr.BaseExchangeRate,
					PurchaseRate = pr.ExchangeRate, 
					PurchaseBaseRate = pr.BaseExchangeRate,
					
					DCNoteNo = coalesce(m.DCNoteNo, sn.DCNoteNo, ''),
					ct.SectionNo
				FROM #temp_cutoffsales AS cos
					INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId=cos.ShipmentId
					INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
					INNER JOIN Contract AS c WITH (NOLOCK) ON s.ContractId = c.ContractId
					INNER JOIN (  SELECT CategoryId=1,	Description='Actual',	CutoffType=1,  SectionNo=0, ReverseSign=1
							UNION SELECT CategoryId=2,	Description='Accrual',	CutoffType=2,  SectionNo=3, ReverseSign=1
							UNION SELECT CategoryId=3,	Description='Realized',	CutoffType=3,  SectionNo=1, ReverseSign=1
							UNION SELECT CategoryId=5,	Description='Reversal',	CutoffType=3,  SectionNo=2, ReverseSign=-1
							) AS ct ON ct.CutoffType=cos.CutoffType
					--INNER JOIN (SELECT CategoryId, Description, 
					--					CutoffType = (CASE WHEN CategoryId=5 THEN 3 ELSE CategoryId END), 
					--					SectionNo = (CASE CategoryId WHEN 1 THEN 0 WHEN 2 THEN 3 WHEN 3 THEN 1 WHEN 5 THEN 2 END),
					--					ReverseSign = (CASE WHEN CategoryId=5 THEN -1 ELSE 1 END) 
					--				FROM SunInterfaceCategory
					--				WHERE CategoryId in (1,2,3,5)
					--			) AS ct ON ct.CutoffType=cos.CutoffType
					CROSS APPLY (SELECT SalesLogId		= max(case when l.SunInterfaceTypeId=1 and (l.CategoryId=ic.CategoryId or (l.CategoryId=4 and ic.CategoryId=1)) then l.SunInterfaceLogId end),
										CommLogId		= max(case when l.SunInterfaceTypeId=2 and (l.CategoryId=ic.CategoryId or (l.CategoryId=4 and ic.CategoryId=1)) then l.SunInterfaceLogId end),
										PurchaseLogId	= max(case when l.SunInterfaceTypeId=3 and (l.CategoryId=ic.CategoryId or (l.CategoryId=4 and ic.CategoryId in (1,3))) then l.SunInterfaceLogId end)
									FROM (SELECT ct.CategoryId) AS ic
										INNER JOIN SunInterfaceLog as l ON l.ShipmentId=s.ShipmentId AND l.SunInterfaceTypeId in (1,2,3,4) and l.QueueId<>-1
								) AS il
					LEFT JOIN
						(
						SELECT ShipmentId,
							TotalShippedSupplierGmtAmt = SUM(TotalShippedSupplierGmtAmt),
							QACommissionAmount = SUM(ROUND(TotalShippedSupplierGmtAmt * QACommissionPercent / 100,2)),
							VendorPaymentDiscountAmount = SUM(ROUND(TotalShippedSupplierGmtAmt * VendorPaymentDiscountPercent / 100,2))
						FROM CutOffSplitSales 
						GROUP BY ShipmentId
						) AS y on y.ShipmentId = i.ShipmentId
					LEFT JOIN ilsOrderRef as ior on ior.ShipmentId=cos.ShipmentId AND ior.DeliveryNo=s.DeliveryNo
					LEFT JOIN ilsInvoice as ii on ior.OrderRefId=ii.OrderRefId 
					LEFT JOIN SunInterfaceLog as sl on sl.SunInterfaceLogId=il.SalesLogId
					LEFT JOIN SunInterfaceLog as cl on cl.SunInterfaceLogId=il.CommLogId
					LEFT JOIN SunInterfaceLog as pl on pl.SunInterfaceLogId=il.PurchaseLogId
					CROSS APPLY ( SELECT ExchangeRate = MAX(CASE WHEN r.CurrencyId=t.CurrencyId THEN ExchangeRate END), BaseExchangeRate=MAX(CASE WHEN r.CurrencyId=t.BaseCurrencyId THEN ExchangeRate END)
									FROM (SELECT TransactionDate=cos.AccrualInvDate, CurrencyId=s.BuyCurrencyId, cos.BaseCurrencyId) AS t
									INNER JOIN ExchangeRate AS r ON r.CurrencyId IN (t.CurrencyId, t.BaseCurrencyId) AND t.TransactionDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND r.ExchangeRateTypeId=1 AND r.Status=1
						) as ar
					CROSS APPLY ( SELECT ExchangeRate = MAX(CASE WHEN r.CurrencyId=t.CurrencyId THEN ExchangeRate END), BaseExchangeRate=MAX(CASE WHEN r.CurrencyId=t.BaseCurrencyId THEN ExchangeRate END)
									FROM (SELECT FiscalYear=isnull(sl.FiscalYear,cos.FiscalYear), Period=isnull(sl.Period,cos.Period), CurrencyId=s.SellCurrencyId, cos.BaseCurrencyId) AS t
									INNER JOIN nsldb..AccountFinancialCalender AS fc on fc.BudgetYear=t.FiscalYear and fc.Period=t.Period AND fc.AppId=13 and fc.Status=1
									INNER JOIN ExchangeRate AS r ON fc.EndDate BETWEEN r.EffectiveDateFrom AND r.EffectiveDateTo AND r.CurrencyId IN (t.CurrencyId, t.BaseCurrencyId) AND r.ExchangeRateTypeId=1
						) as sr
					CROSS APPLY ( SELECT ExchangeRate = MAX(CASE WHEN r.CurrencyId=t.CurrencyId THEN ExchangeRate END), BaseExchangeRate=MAX(CASE WHEN r.CurrencyId=t.BaseCurrencyId THEN ExchangeRate END)
									FROM (SELECT FiscalYear=isnull(sl.FiscalYear,cos.FiscalYear), Period=isnull(sl.Period,cos.Period), CurrencyId=s.BuyCurrencyId, cos.BaseCurrencyId) AS t
									INNER JOIN nsldb..AccountFinancialCalender AS fc on fc.AppId=13 and fc.Status=1 AND fc.BudgetYear=t.FiscalYear and fc.Period=t.Period
									INNER JOIN ExchangeRate AS r ON fc.EndDate BETWEEN EffectiveDateFrom AND EffectiveDateTo AND r.ExchangeRateTypeId=1 AND r.CurrencyId IN (t.CurrencyId, t.BaseCurrencyId)
						) as pr
					CROSS APPLY ( SELECT TOP 1 t.SettledAmt, t.IssueDate 
									FROM (SELECT s.ShipmentId) AS s0 
									LEFT JOIN #temp_SamePeriodAdj AS t ON t.ShipmentId=s0.ShipmentId
									ORDER BY t.IssueDate
						) as pa
					LEFT JOIN MockShopDCNoteShipment AS ms WITH (NOLOCK) ON ms.ShipmentId = i.ShipmentId
					LEFT JOIN MockShopDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId 
					LEFT JOIN StudioDCNoteShipment AS sns WITH (NOLOCK) ON sns.ShipmentId = i.ShipmentId
					LEFT JOIN StudioDCNote AS sn WITH (NOLOCK) ON sn.DCNoteId = sns.DCNoteId 
					INNER JOIN Product  AS p WITH (NOLOCK) ON p.ProductId = c.ProductId 
								AND p.DesignSourceId  @designSourceList
					INNER JOIN NSLDB..OfficeStructure AS os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId 
								AND (os.ParentId @departmentIdList)
				WHERE 1=1 
					AND (@invoicePrefix = ''  OR (i.InvoicePrefix = @invoicePrefix AND i.InvoiceSeq BETWEEN @invoiceSeqFrom AND @invoiceSeqTo AND i.InvoiceYear = @invoiceYear))
					AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFROM AND @invoiceDateTo)
					AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
					AND (@purchaseExtractDateFrom IS NULL 
							OR EXISTS(SELECT * FROM SunInterfaceLog WITH (NOLOCK) 
										WHERE ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 5 
										AND CreatedOn BETWEEN @purchaseExtractDateFrom AND DATEADD(d,1,@purchaseExtractDateTo)))
					AND (@vendorId = -1 OR s.VendorId = @vendorId)
					AND ((@officeId = -1 AND c.OfficeId @officeIdList)  OR c.OfficeId = @officeId)
					AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
					AND c.ProductTeamId  @productTeamList
					AND c.CustomerId @customerIdList
					AND c.TradingAgencyId @tradingAgencyList
					AND (@seasonId = -1 OR c.SeasonId = @seasonId)
					AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
					AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
			        AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
					AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
					AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
					AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
					AND (@isNSLTailoring = -1 
							OR (@isNSLTailoring = 1 AND c.UKSupplierCode in ('D68730', 'D68740', 'D68720', 'D69380', 'D69430'))
							OR (@isNSLTailoring = 0 AND c.UKSupplierCode NOT IN ('D68730', 'D68740', 'D68720', 'D69380', 'D69430')))
					AND ((@isSampleOrder = -1)
							OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
							OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
							OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
							OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
							OR (@isSampleOrder = 4 AND (s.IsMockShopSample=1 OR (s.IsPressSample<>1 AND s.IsStudioSample<>1)))
							OR (@isSampleOrder = 5 AND (s.IsPressSample=1 OR (s.IsMockShopSample<>1 AND s.IsStudioSample<>1)))
							OR (@isSampleOrder = 6 AND (s.IsStudioSample=1))
						) 
					AND (@supplierInvoiceNo IS NULL OR i.SupplierInvoiceNo LIKE '%' + @supplierInvoiceNo + '%')
					AND (@DCNoteNoFrom IS NULL 
							OR (@isSampleOrder = 2 AND m.DCNoteNo BETWEEN @DCNoteNoFrom AND @DCNoteNoTo)
							OR (@isSampleOrder = 6 AND sn.DCNoteNo BETWEEN @DCNoteNoFrom AND @DCNoteNoTo)
						)
				) as x
			 ORDER BY SectionNo, CurrencyCode, InvoiceNo, ShipmentId 




              --#############################################################################################################
              -- Sales & Purchase Adjustment section

              -- Debit/Credit Note entries
              SELECT 
	                x.ShipmentId,
	                InvoiceNo = dbo.fn_FormatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear), 
	                i.SequenceNo, 
                  i.InvoiceDate,
	                VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId) + ' - ' + ISNULL(AdjustmentNoteNo, '') , 
                  Prev_VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId) + ' - ' + ISNULL(AdjustmentNoteNo, '') , 
	                ItemNo = (select ItemNo From Product as p with (nolock) where ProductId = c.ProductId),
	                ProductTeamCode = (select Code from nsldb..OfficeStructure Code with (nolock) where OfficeStructureId = c.ProductTeamId),
                  DepartmentDesc = (SELECT Description from NSLDB..officestructure with (nolock) WHERE OfficeStructureId = c.DeptId),
                  c.ContractNo, 
	                s.DeliveryNo, 
	                i.SupplierInvoiceNo, i.shippingDocReceiptDate,
                  PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = c.PackingUnitId), 
	                TotalPcs = 0, --(s.TotalShippedQty * c.PiecesPerPack), 
	                CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.CurrencyId),
                  OriginalCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.PrevCurrencyId),

                  TotalShippedQty = 0, -- s.TotalShippedQty,                 
	                TotalShippedAmt = 0,    --s.TotalShippedAmt * DCSign, 
                  Prev_TotalShippedAmt = 0,
 	                SalesBaseAmount = 0,    --ROUND(s.TotalShippedAmt * xr.ExchangeRate / xru.ExchangeRate,2) * DCSign,
                  Prev_TotalSalesAmount =  0,
 	                NSLCommissionPercent = s.NSLCommissionPercent,  Prev_NSLCommissionPercent = 0,
 	                CommBaseAmt = 0,    --ROUND(ROUND(s.TotalShippedAmt * s.NSLCommissionPercent / 100, 2) * xr.ExchangeRate / xru.ExchangeRate,2) * DCSign,
                  Prev_CommBaseAmt = 0,
 	                CommAmt = 0,    --ROUND(s.TotalShippedAmt * s.NSLCommissionPercent / 100, 2) * DCSign,
                  Prev_CommAmt = 0,
 	                CourierChargeToNUK = 0,
 	                CourierChargeToNUKBaseAmount = ROUND(0 * xr.ExchangeRate / xru.ExchangeRate,2),
               
                  TotalShippedSupplierGmtAmtAfterDiscount =  x.LatestAmt   , --s.TotalShippedSupplierGmtAmt,
	                Prev_TotalShippedSupplierGmtAmtAfterDiscount = x.SettledAmt * -1 ,
	                PurchaseBaseAmount = ROUND( x.LatestAmt* xr.ExchangeRate / xru.ExchangeRate,2),
	                Prev_PurchaseBaseAmount = ROUND( x.SettledAmt * pxr.ExchangeRate / pxru.ExchangeRate,2) * -1,

 	                SeasonCode = (SELECT Code FROM NSLDB..Season WITH (NOLOCK) WHERE SeasonId = c.SeasonId),
 	                CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = s.CountryOfOriginId),
 	                OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WITH (NOLOCK) WHERE OfficeId = x.OfficeId),
 	                TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId),
                  Prev_TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId),
 	                OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WITH (NOLOCK) WHERE OPRFabricTypeId = s.WithOPRFabric),
 	                TradingAgencyName = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = c.TradingAgencyId),
 	                QACommissionPercent = isnull(x.QACommissionPercentAfter,0),
		              Prev_QACommissionPercent = isnull(x.QACommissionPercentBefore,0),
 	                VendorPaymentDiscountPercent = x.VendorPaymentDiscountAfter,
		              Prev_VendorPaymentDiscountPercent = x.VendorPaymentDiscountBefore,
                  QACommOtherAmount = x.QACommissionAmtBefore + x.QACommissionAmt,
                  Prev_QACommOtherAmount = x.QACommissionAmtBefore * -1,
 	                QACommBaseAmount = ROUND(( x.QACommissionAmtBefore + x.QACommissionAmt) *  xr.ExchangeRate / xru.ExchangeRate,2),
 	                Prev_QACommBaseAmount = ROUND( x.QACommissionAmtBefore*  pxr.ExchangeRate / pxru.ExchangeRate,2)*-1,
 	                PaymentDiscountOtherAmount = x.VendorPaymentDiscountAmtBefore + x.VendorPaymentDiscountAmt,
 	                Prev_PaymentDiscountOtherAmount = x.VendorPaymentDiscountAmtBefore*-1,
 	                PaymentDiscountBaseAmount = ROUND((x.VendorPaymentDiscountAmtBefore + x.VendorPaymentDiscountAmt) * xr.ExchangeRate / xru.ExchangeRate,2),
		              Prev_PaymentDiscountBaseAmount = ROUND(x.VendorPaymentDiscountAmtBefore * pxr.ExchangeRate / pxru.ExchangeRate,2) *-1,
                  LabTestIncomeOtherAmount = LabTestIncomeAfter,
                  Prev_LabTestIncomeOtherAmount = LabTestIncomeBefore * -1,
                  LabTestIncomeBaseAmount = ROUND( LabTestIncomeAfter *  xr.ExchangeRate / xru.ExchangeRate, 2),
                  Prev_LabTestIncomeBaseAmount = ROUND( LabTestIncomeBefore *  pxr.ExchangeRate / pxru.ExchangeRate, 2) * -1,

 	                --IsMockShopSample = convert(bit,s.IsMockShopSample),
					SampleOrder = (case when s.IsMockShopSample=1 then 'MS' when s.IsStudioSample=1 then 'SS' else '' end),
                  DCtNoteNo = isnull((SELECT m.DCNoteNo FROM MockShopDCNoteShipment AS ms WITH (NOLOCK) LEFT JOIN MockShopDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId WHERE ms.ShipmentId = x.ShipmentId),
									 isnull((SELECT DCNoteNo FROM StudioDCNoteShipment AS sns WITH (NOLOCK) LEFT JOIN StudioDCNote AS sn WITH (NOLOCK) ON sns.DCNoteId = sn.DCNoteId WHERE sns.ShipmentId = x.ShipmentId),'')),
                  SectionNo = 4,  -- Adjustment


	                x.DebitCreditIndicator,
                  AdjustmentType='PURCHASE-DCNOTE',	
				  AnyAdjustment = (CASE WHEN x.AdjustmentAmt <> 0 THEN 1 ELSE 0 END),
				  ActionDate = x.CreatedOn

              into #temp_AdjustmentDC
              FROM 
	              (
	              select 
		                ad.AdjustmentDetailId, ad.ShipmentId, ad.SplitShipmentId, ad.AdjustmentTypeId, ad.DebitCreditIndicator, 
		                ad.LatestAmt, ad.SettledAmt, ad.AdjustmentAmt, ad.AdjustmentNoteId, ad.IsInterfaced, 
		                ad.QACommissionPercentBefore, ad.QACommissionPercentAfter, ad.QACommissionAmt, ad.QACommissionAmtBefore,
                    ad.VendorPaymentDiscountBefore, ad.VendorPaymentDiscountAfter, ad.VendorPaymentDiscountAmt, ad.VendorPaymentDiscountAmtBefore,
                    ad.LabTestIncomeBefore, ad.LabTestIncomeAfter,
		                ad.VendorId, ad.CurrencyId, 
		                an.OfficeId, 
		                an.AdjustmentNoteNo, an.IssueDate, an.Amount,
                    DCSign = (case when ad.DebitCreditIndicator = 'C' then -1 else 1 end) ,
                    ad.CreatedOn,
                    PrevCurrencyId     = ISNULL((SELECT TOP 1 pad.CurrencyId 
													FROM AdjustmentDetail AS pad WITH (NOLOCK) LEFT JOIN AdjustmentNote AS pan WITH (NOLOCK) ON pan.AdjustmentNoteId=pad.AdjustmentNoteId
													WHERE ShipmentId=ad.ShipmentId AND (pan.IssueDate<an.IssueDate or pad.CreatedOn<ad.CreatedOn) AND pad.AdjustmentTypeId = ad.AdjustmentTypeId
													ORDER BY ISNULL(pan.IssueDate, pad.CreatedOn) Desc
												), ad.CurrencyId), 
					AdjustPeriodDate = (Case when @ReportVersion=0 
											then ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
											else ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
											--else ISNULL((select distinct fc.EndDate 
											--			from SunInterfaceLog as l with (nolock)
											--				inner join NSLDB..AccountFinancialCalender as fc with (nolock)
											--					on l.FiscalYear=fc.BudgetYear and l.Period=fc.Period and fc.status = 1 and fc.AppId = 13
											--				where l.ShipmentId = ad.ShipmentId
											--					and l.DCNoteNo = an.AdjustmentNoteNo
											--					and l.SunInterfaceTypeId = 21)
											--			, convert(varchar,ad.CreatedOn,23))
											end),
					PrevAdjustPeriodDate = ISNULL((Case when @ReportVersion=0 

													then (SELECT TOP 1 ISNULL(pan.IssueDate, convert(varchar,pad.CreatedOn,23)) 
															FROM AdjustmentDetail AS pad WITH (NOLOCK) 
																LEFT JOIN AdjustmentNote AS pan WITH (NOLOCK) ON pan.AdjustmentNoteId=pad.AdjustmentNoteId
															WHERE pad.ShipmentId=ad.ShipmentId 
																AND pad.AdjustmentTypeId = ad.AdjustmentTypeId
																AND (pan.IssueDate<an.IssueDate or pad.CreatedOn<ad.CreatedOn) 
															ORDER BY 1 desc)
													else ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
													--else (SELECT TOP 1 fc.EndDate 
													--		FROM SunInterfaceLog AS l WITH (NOLOCK)  
													--			LEFT JOIN NSLDB..AccountFinancialCalender AS fc WITH (NOLOCK) ON fc.BudgetYear=l.FiscalYear AND fc.Period=l.Period AND fc.AppId = 13 AND fc.Status=1
													--		WHERE l.ShipmentId = ad.ShipmentId
													--			and l.SunInterfaceTypeId in (3,21) 
													--			and l.CreatedOn < ad.CreatedOn
													--		ORDER BY 1 desc)
													end)
											,(SELECT TOP 1 EndDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE BudgetYear=cos.FiscalYear AND Period=cos.Period AND AppId=13 AND Status=1)
											)
					
				  from AdjustmentDetail as ad WITH (NOLOCK)
                    INNER JOIN CutOffSales AS cos ON cos.ShipmentId=ad.ShipmentId
                    INNER JOIN (SELECT TOP 1 StartDate, EndDate 
                                  FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) 
						                      WHERE Period=@PeriodFrom and BudgetYear=@BudgetYear and AppId = 9 
						                      ORDER BY CreatedOn
                               ) AS afc ON ad.CreatedOn between afc.StartDate and DATEADD(d, 1, afc.EndDate) 
	                  LEFT join AdjustmentNote as an WITH (NOLOCK) on an.AdjustmentNoteId=ad.AdjustmentNoteId
	              where 
                      ad.AdjustmentTypeId = 2
	              ) as x
	              INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = x.ShipmentId
	              INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId   AND (@officeId = -1 OR (c.OfficeId @officeIdList))
	              INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = x.ShipmentId
					INNER JOIN ExchangeRate AS xr WITH (NOLOCK) ON xr.CurrencyId=x.CurrencyId AND xr.ExchangeRateTypeId=1 AND x.AdjustPeriodDate between xr.EffectiveDateFrom and xr.EffectiveDateTo
					INNER JOIN ExchangeRate AS xru WITH (NOLOCK) ON xru.CurrencyId=@BaseCurrencyId AND xru.ExchangeRateTypeId=1 AND x.AdjustPeriodDate between xru.EffectiveDateFrom and xru.EffectiveDateTo
 					INNER JOIN ExchangeRate AS pxr WITH (NOLOCK) ON pxr.CurrencyId=ISNULL(x.PrevCurrencyId,s.BuyCurrencyId) AND pxr.ExchangeRateTypeId=1 AND x.PrevAdjustPeriodDate between pxr.EffectiveDateFrom and pxr.EffectiveDateTo
					INNER JOIN ExchangeRate AS pxru WITH (NOLOCK) ON pxru.CurrencyId=@BaseCurrencyId AND pxru.ExchangeRateTypeId=1 AND x.PrevAdjustPeriodDate between pxru.EffectiveDateFrom and pxru.EffectiveDateTo


              ----------------------
              -- Reverse Entries  --
              ----------------------
				SELECT sl.*,
							SalesAdjustLogId, CommAdjustLogId, PurchaseAdjustLogId, FirstSalesAdjustLogId, FirstCommAdjustLogId, FirstPurchaseAdjustLogId, LatestAdjustLogId, FirstAdjustLogId,
							PrevSalesAdjustLogId	= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstSalesAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=1), -- AND CategoryId in (5)
							PrevCommAdjustLogId		= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstCommAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=2), --AND CategoryId in (5)
							PrevPurchaseAdjustLogId = (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstPurchaseAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=3),--AND CategoryId in (5)
							PrevAdjustLogId			= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<l.LatestadjustLogId AND SunInterfaceTypeId in (1,2,3) and QueueId<>-1),
							IsSalesAdjustment		= (CASE WHEN SalesAdjustLogId IS NOT NULL OR CommAdjustLogId IS NOT NULL THEN 1 ELSE 0 END),
							IsPurchaseAdjustment	= (CASE WHEN PurchaseAdjustLogId IS NOT NULL THEN 1 ELSE 0 END)
		              INTO #temp_LogHistory
		              FROM (
			                  SELECT ShipmentId,
									LatestAdjustLogId = MAX(SunInterfaceLogId), 
									FirstAdjustLogId = MIN(SunInterfaceLogId), 
									SalesAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=1 THEN SunInterfaceLogId ELSE NULL END), 
									CommAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=2 THEN SunInterfaceLogId ELSE NULL END), 
									PurchaseAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=3 THEN SunInterfaceLogId ELSE NULL END), 
									FirstSalesAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=1 THEN SunInterfaceLogId ELSE NULL END), 
									FirstCommAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=2 THEN SunInterfaceLogId ELSE NULL END), 
									FirstPurchaseAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=3 THEN SunInterfaceLogId ELSE NULL END) 
		                        FROM SunInterfaceLog as l WITH (NOLOCK)
			                    WHERE CategoryId in (5) AND SunInterfaceTypeId IN (1,2,3) -- Purchase, Sales & Sales Commission
                                      AND (FiscalYear = @BudgetYear AND Period = @PeriodFrom)



			                          AND (@OfficeId = -1 OR (OfficeId in (@OfficeId)))
			                    GROUP by ShipmentId
			                ) AS l
			                INNER JOIN SunInterfaceLog AS sl WITH (NOLOCK) ON sl.ShipmentId = l.ShipmentId 
				                  AND sl.SunInterfaceTypeId IN (1,2,3)

				                  AND sl.CategoryId IN (1,3,4,5)


           SELECT 
				x.ShipmentId,
				InvoiceNo = dbo.fn_FormatInvoiceNo(x.InvoicePrefix, x.InvoiceSeq, x.InvoiceYear), 
				x.SequenceNo, 
				i.InvoiceDate,
				VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId), 
				Prev_VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = Prev_VendorId),
				ItemNo = (select ItemNo From Product as p with (nolock) where ProductId = x.ProductId),
				ProductTeamCode = (select Code from nsldb..OfficeStructure Code with (nolock) where OfficeStructureId = x.ProductTeamId),
				DepartmentDesc = (SELECT Description from NSLDB..officestructure with (nolock) WHERE OfficeStructureId = c.DeptId),
				c.ContractNo, 
				s.DeliveryNo, 
				x.SupplierInvoiceNo, i.ShippingDocReceiptDate,
				PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId), 
				TotalPcs = 0,
				CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.CurrencyId),
				PrevCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.Prev_CurrencyId),

				TotalShippedQty = 0,
				TotalShippedAmt = x.SalesOtherAmt,
				Prev_TotalShippedAmt = x.Prev_SalesOtherAmt * -1,
				SalesBaseAmount =  x.SalesBaseAmt, 
				Prev_SalesBaseAmount = x.Prev_SalesBaseAmt * -1, 
				NSLCommissionPercent = s.NSLCommissionPercent,  
				Prev_NSLCommissionPercent = x.Prev_NSLCommPercent,
                  
				CommBaseAmt = ROUND(x.SalesCommOtherAmt * CommExchangeRate / CommExchangeRateUSD, 2) ,
				Prev_CommBaseAmt = ROUND(x.Prev_SalesCommOtherAmt * Prev_CommExchangeRate / Prev_CommExchangeRateUSD, 2) * -1,
				CommAmt = x.SalesCommOtherAmt,  
				Prev_CommAmt = x.Prev_SalesCommOtherAmt * -1,
                    
				CourierChargeToNUK = 0,
				CourierChargeToNUKBaseAmount = 0,

				TotalShippedSupplierGmtAmtAfterDiscount = x.PurchaseOtherAmt,
				Prev_TotalShippedSupplierGmtAmtAfterDiscount = x.Prev_PurchaseOtherAmt * -1,
				PurchaseBaseAmount = x.PurchaseBaseAmt, 
				Prev_PurchaseBaseAmount = x.Prev_PurchaseBaseAmt * -1, 

				SeasonCode = (SELECT Code FROM NSLDB..Season WITH (NOLOCK) WHERE SeasonId = x.SeasonId),
				CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = x.CountryOfOriginId),
				OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WITH (NOLOCK) WHERE OfficeId = x.OfficeId),
				TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = x.TermOfPurchaseId),
				Prev_TermOfPurchaseDesc =  (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = Prev_TermOfPurchaseId),
                  
				OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WITH (NOLOCK) WHERE OPRFabricTypeId = s.WithOPRFabric),
				TradingAgencyName = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = x.TradingAgencyId),

				QACommissionPercent = ISNULL(x.QACommissionPercent, 0),
				Prev_QACommissionPercent = ISNULL(x.Prev_QACommissionPercent,	0),
				x.VendorPaymentDiscountPercent, x.Prev_VendorPaymentDiscountPercent,
				QACommOtherAmount = (CASE WHEN ISNULL(x.QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.PurchaseOtherAmt * x.QACommissionPercent / 100, 2) END),
				Prev_QACommOtherAmount =  (CASE WHEN ISNULL(x.Prev_QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.Prev_PurchaseOtherAmt * x.Prev_QACommissionPercent / 100, 2) * -1 END), 
				QACommBaseAmount = (CASE WHEN ISNULL(x.QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.PurchaseBaseAmt * x.QACommissionPercent / 100, 2) END),
				Prev_QACommBaseAmount = (CASE WHEN ISNULL(x.Prev_QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.Prev_PurchaseBaseAmt * x.Prev_QACommissionPercent / 100, 2)  * -1 END),
				PaymentDiscountOtherAmount = ROUND(x.PurchaseOtherAmt * x.VendorPaymentDiscountPercent / 100 , 2),
				Prev_PaymentDiscountOtherAmount = ROUND(x.Prev_PurchaseOtherAmt * x.Prev_VendorPaymentDiscountPercent / 100, 2) * -1,
				PaymentDiscountBaseAmount = ROUND(x.PurchaseBaseAmt * x.VendorPaymentDiscountPercent / 100 , 2) ,
				Prev_PaymentDiscountBaseAmount = ROUND(x.Prev_PurchaseBaseAmt * x.Prev_VendorPaymentDiscountPercent / 100, 2)  * -1,
				LabTestIncomeOtherAmount = x.LabTestIncome * x.Qty,
				Prev_LabTestIncomeOtherAmount = x.Prev_LabTestIncome * Prev_ShippedQty * -1,
				LabTestIncomeBaseAmount = ROUND(x.LabTestIncome * x.Qty * PurchaseExchangeRate / PurchaseExchangeRateUSD, 2),
				Prev_LabTestIncomeBaseAmount = ROUND(x.Prev_LabTestIncome * Prev_ShippedQty * Prev_PurchaseExchangeRate / Prev_PurchaseExchangeRateUSD, 2) * -1,
				SampleOrder = (case when x.IsMockShopSample=1 then 'MS' when x.IsStudioSample=1 then 'SS' else '' end),
				DCNoteNo = isnull((SELECT m.DCNoteNo FROM MockShopDCNoteShipment AS ms WITH (NOLOCK) LEFT JOIN MockShopDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId WHERE ms.ShipmentId = x.ShipmentId),
								  isnull((SELECT sn.DCNoteNo FROM StudioDCNoteShipment AS sns WITH (NOLOCK) LEFT JOIN StudioDCNote AS sn WITH (NOLOCK) ON sns.DCNoteId = sn.DCNoteId WHERE sns.ShipmentId = x.ShipmentId),'')),
				SectionNo = 4,  -- Adjustment



				DebitCreditIndicator = Convert(varchar(1),''),
				AdjustmentType = (CASE WHEN HasSalesAdjustment = 1 AND HasPurchaseAdjustment = 1 THEN 'SALES&PURCHASE' + (case when HasDCNote=1 then '-DCNOTE' else '' end) 
										WHEN HasSalesAdjustment = 1 THEN 'SALES' 
										ELSE (CASE WHEN HasPurchaseAdjustment = 1 THEN 'PURCHASE' ELSE '' END) + (case when HasDCNote=1 then '-DCNOTE' else '' end)
										END),
				AnyAdjustment = (CASE WHEN x.PurchaseOtherAmt <> x.Prev_PurchaseOtherAmt
											or x.SalesOtherAmt <> x.Prev_SalesOtherAmt
											or x.SalesBaseAmt <> x.Prev_SalesBaseAmt
											or x.PurchaseBaseAmt <> x.Prev_PurchaseBaseAmt
											or x.QACommissionPercent <> x.Prev_QACommissionPercent
											or x.VendorPaymentDiscountPercent <> x.Prev_VendorPaymentDiscountPercent
											or x.TermOfPurchaseId <> x.Prev_TermOfPurchaseId
											or x.VendorId <> x.Prev_VendorId
											or x.CurrencyId <> x.Prev_CurrencyId
										THEN 1 ELSE 0 END),
				x.ActionDate
		INTO #temp_adjustment
		FROM 
			(
				SELECT  ll.*,
						SalesOtherAmt		= (CASE WHEN m.isSalesAdjustment = 1 THEN ISNULL(s.OtherAmt,ISNULL(ps.OtherAmt,0)) ELSE 0 END),
						SalesBaseAmt		= (CASE WHEN m.isSalesAdjustment = 1 THEN ISNULL(s.BaseAmt, ISNULL(ps.BaseAmt,0)) ELSE 0 END),
						PurchaseOtherAmt	= (CASE WHEN m.isPurchaseAdjustment = 1 THEN ISNULL(p.OtherAmt,0) ELSE 0 END),
						PurchaseBaseAmt		= (CASE WHEN m.isPurchaseAdjustment = 1 THEN ISNULL(p.BaseAmt, 0) ELSE 0 END),
						SalesCommOtherAmt = (CASE WHEN m.IsSalesAdjustment=1 
													--THEN ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.SalesCommission ELSE s.SalesCommission END), 0)
													THEN ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.OtherAmt ELSE s.SalesCommission END), 0)
													ELSE 0 END),
						NSLCommPercent = (CASE WHEN m.isSalesAdjustment = 1 
											THEN (CASE WHEN ISNULL(s.OtherAmt,ps.OtherAmt) = 0 THEN 0
													ELSE ROUND(ISNULL(100.0 * (CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.SalesCommission ELSE s.SalesCommission END) / ISNULL(s.OtherAmt,ps.OtherAmt), 0),2) 
													END)
											ELSE 0 END),

						Prev_NSLCommPercent = (CASE WHEN m.IsSalesAdjustment=1 
													THEN (CASE WHEN ps.OtherAmt = 0 THEN 0 
															ELSE ROUND(ISNULL(100.0 * (CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.SalesCommission ELSE ps.SalesCommission END)/ ps.OtherAmt,0),2)
															END)
													ELSE 0 END),
						Prev_TermOfPurchaseId	= (CASE WHEN m.isPurchaseAdjustment=1 THEN pp.TermOfPurchaseId ELSE ps.TermOfPurchaseId END),
						Prev_SalesBaseAmt		= ISNULL((CASE WHEN m.IsSalesAdjustment=1 THEN ps.BaseAmt ELSE 0 END), 0),
						Prev_SalesOtherAmt		= ISNULL((CASE WHEN m.IsSalesAdjustment=1 THEN ps.OtherAmt ELSE 0 END),0),
						Prev_PurchaseOtherAmt	= ISNULL((CASE WHEN m.isPurchaseAdjustment=1 THEN pp.OtherAmt ELSE 0 END),0),
						Prev_PurchaseBaseAmt	= ISNULL((CASE WHEN m.isPurchaseAdjustment=1 THEN pp.BaseAmt ELSE 0 END), 0),
						Prev_SalesCommOtherAmt	= (CASE WHEN m.isSalesAdjustment=1 
													--THEN ISNULL(CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.SalesCommission ELSE ps.SalesCommission END, 0)
													THEN ISNULL(CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.OtherAmt ELSE ps.SalesCommission END, 0)
													ELSE 0 END),
						Prev_QACommissionPercent = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.QACommissionPercent,0) ELSE 0 END),
						Prev_VendorPaymentDiscountPercent = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.VendorPaymentDiscountPercent,0) ELSE 0 END),
						Prev_LabTestIncome = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.LabTestIncome, 0) ELSE 0 END),
						Prev_ShippedQty = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.Qty, 0) ELSE 0 END),
						Prev_CurrencyId = (CASE WHEN m.isPurchaseAdjustment=1 AND pp.SunInterfaceLogId IS NOT NULL THEN pp.CurrencyId 
												WHEN m.isSalesAdjustment=1 AND ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.CurrencyId
												ELSE ps.CurrencyId END),
						/*
						CommExchangeRate			= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = (CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.CurrencyId ELSE s.CurrencyId END) AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Currencyid	ELSE s.CurrencyId	END), cs.SellCurrencyId)
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						CommExchangeRateUSD			= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= @BaseCurrencyId
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						PurchaseExchangeRate		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = pp.CurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = isnull(p.CurrencyId,cs.BuyCurrencyId)		AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						PurchaseExchangeRateUSD		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_CommExchangeRate		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = (CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.CurrencyId ELSE ps.CurrencyId END) AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Currencyid	ELSE ps.CurrencyId	END), cs.SellCurrencyId)
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_CommExchangeRateUSD	= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= @BaseCurrencyId
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_PurchaseExchangeRate	= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = pp.CurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = isnull(pp.CurrencyId,cs.BuyCurrencyId)	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_PurchaseExchangeRateUSD= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						*/															
						CommExchangeRate			= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Currencyid	ELSE s.CurrencyId	END), cs.SellCurrencyId)
																AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) ,
						CommExchangeRateUSD			= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																AND er.CurrencyId	= @BaseCurrencyId
																AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						PurchaseExchangeRate		= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 
															WHERE er.CurrencyId = isnull(p.CurrencyId,cs.BuyCurrencyId)		AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						PurchaseExchangeRateUSD		= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 
															WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						Prev_CommExchangeRate		= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Currencyid	ELSE ps.CurrencyId	END), cs.SellCurrencyId)
																AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						Prev_CommExchangeRateUSD	= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																AND er.CurrencyId	= @BaseCurrencyId
																AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						Prev_PurchaseExchangeRate	= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 
															WHERE er.CurrencyId = isnull(pp.CurrencyId,cs.BuyCurrencyId)	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
						Prev_PurchaseExchangeRateUSD= (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 
															WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo),
															
						Prev_VendorId = ISNULL(ps.VendorId, pp.VendorId),
						HasSalesAdjustment = m.isSalesAdjustment,
						HasPurchaseAdjustment = m.isPurchaseAdjustment,
						HasDCNote = (case when ta.ShipmentId is not null then 1 else 0 end),
						ActionDate = ll.CreatedOn
					FROM
							(select * from #temp_logHistory where SunInterfaceLogId = LatestAdjustLogId) AS m

							INNER JOIN #temp_LogHistory AS ll ON ll.SunInterfaceLogId=m.LatestAdjustLogId       -- Reverse Log Record
							INNER JOIN #temp_LogHistory AS pl ON pl.SunInterfaceLogId=m.PrevAdjustLogId         -- Previouse Record of the Reverse Log record
							LEFT  JOIN #temp_LogHistory AS s  ON s.SunInterfaceLogId=m.SalesAdjustLogId         -- Sales Adjustment record
							LEFT  JOIN #temp_LogHistory AS c  ON c.SunInterfaceLogId=m.CommAdjustLogId          -- Sales Commission Adjustment record
							LEFT  JOIN #temp_LogHistory AS p  ON p.SunInterfaceLogId=m.PurchaseAdjustLogId      -- Purchase Adjustment record
							LEFT  JOIN #temp_LogHistory AS ps ON ps.SunInterfaceLogId=m.PrevSalesAdjustLogId    -- Previous Sales Adjustment record
							LEFT  JOIN #temp_LogHistory AS pc ON pc.SunInterfaceLogId=m.PrevCommAdjustLogId     -- Previous Sales Commission Adjustment record
							LEFT  JOIN #temp_LogHistory AS pp ON pp.SunInterfaceLogId=m.PrevPurchaseAdjustLogId -- Previous Purchase Adjustment record
							INNER JOIN CutOffSales AS cs WITH (NOLOCK) ON cs.ShipmentId = m.ShipmentId and (m.Period <> cs.Period OR m.FiscalYear <> cs.FiscalYear )
							LEFT JOIN #temp_AdjustmentDC as ta ON ta.ShipmentId=m.ShipmentId
				) AS x
			INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = x.ShipmentId
			INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId
			INNER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = x.ShipmentId


              -- Report contents
              select 
                        ShipmentId, InvoiceNo, SequenceNo, InvoiceDate,VendorName, VendorName AS Prev_VendorName , ItemNo ,ProductTeamCode , DepartmentDesc , ContractNo, DeliveryNo, SupplierInvoiceNo, ShippingDocReceiptDate, PackingUnitDesc , 
                        TotalPcs, CurrencyCode, OriginalCurrencyCode=CurrencyCode, TotalShippedQty , SalesOtherAmount, Prev_SalesOtherAmount =0, SalesBaseAmount , Prev_SalesBaseAmount = 0, NSLCommissionPercent , Prev_NSLCommissionPercent = 0,
                        SalesCommBaseAmount , Prev_SalesCommBaseAmount = 0,   SalesCommOtherAmount , Prev_SalesCommOtherAmount = 0  , CourierChargeToNUKOtherAmount , CourierChargeToNUKBaseAmount , PurchaseOtherAmount ,
                        Prev_PurchaseOtherAmount=0 , PurchaseBaseAmount , Prev_PurchaseBaseAmount=0 , SeasonCode , CountryOfOrigin, OfficeCode ,TermOfPurchaseDesc , TermOfPurchaseDesc AS Prev_TermOfPurchaseDesc,
                        OPRFabricTypeName , TradingAgencyName ,QACommissionPercent, Prev_QACommissionPercent = 0, VendorPaymentDiscountPercent, Prev_VendorPaymentDiscountPercent = 0,
                        QACommOtherAmount , Prev_QACommOtherAmount=0, 
                        QACommBaseAmount,  Prev_QACommBaseAmount =0, PaymentDiscountOtherAmount , Prev_PaymentDiscountOtherAmount=0, PaymentDiscountBaseAmount ,
                        Prev_PaymentDiscountBaseAmount = 0, LabTestIncomeOtherAmount, Prev_LabTestIncomeOtherAmount = 0, LabTestIncomeBaseAmount, Prev_LabTestIncomeBaseAmount = 0,
                        SampleOrder , DCNoteNo, SectionNo , DebitCreditIndicator='', AdjustmentType = Convert(varchar(1),''), 
						AnyAdjustment = 0, ActionDate  = InvoiceDate
                  from #temp_MainEntry 
              UNION
              (
              SELECT x.*
                  FROM
                      (
                        SELECT * FROM #temp_adjustment AS t WHERE AnyAdjustment = 1
                        UNION SELECT * FROM #temp_adjustmentDC WHERE AnyAdjustment = 1

                      ) AS x
                      INNER JOIN shipment AS s WITH (NOLOCK) ON s.ShipmentId=x.ShipmentId
                      INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId
                      INNER JOIN Product  AS p WITH (NOLOCK) ON p.ProductId = c.ProductId 
                          AND DesignSourceId  @designSourceList
                      INNER JOIN NSLDB..OfficeStructure AS os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId 
                          AND (os.ParentId @departmentIdList)
                  WHERE s.WorkflowStatusId=8
                      AND AdjustmentType<>''
                      AND (@vendorId = -1 OR s.VendorId = @vendorId)
                      AND (c.ProductTeamId  @productTeamList)
                      AND (c.CustomerId @customerIdList)
                      AND (c.TradingAgencyId @tradingAgencyList)
                      AND (@seasonId = -1 OR c.SeasonId = @seasonId)
                      AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
                      AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
                      --AND (@isUTOrder = -1 OR (@isUTOrder =1 AND s.CustomerDestinationId IN (4,5,28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
                      AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
                      AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
                      AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
                      AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
                      AND (@isNSLTailoring = -1 
                              OR (@isNSLTailoring = 1 AND c.UKSupplierCode in ('D68730', 'D68740', 'D68720', 'D69380', 'D69430'))
                              OR (@isNSLTailoring = 0 AND c.UKSupplierCode NOT IN ('D68730', 'D68740', 'D68720', 'D69380', 'D69430')))
                      AND ((@isSampleOrder = -1)
	                      OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                      OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                      OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                      OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                      OR (@isSampleOrder = 4 AND (s.IsMockShopSample=1 OR (s.IsPressSample<>1 AND s.IsStudioSample<>1)))
	                      OR (@isSampleOrder = 5 AND (s.IsPressSample=1 OR (s.IsMockShopSample<>1 AND s.IsStudioSample<>1)))
	                      OR (@isSampleOrder = 6 AND (s.IsStudioSample=1))
                      ) 
              ) 

          ]]>
        </commandText>
        <parameters>
          <param key="invoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="invoiceSeqFrom" name="@invoiceSeqFrom" type="int" direction="Input" />
          <param key="invoiceSeqTo" name="@invoiceSeqTo" type="int" direction="Input" />
          <param key="DCNoteNoFrom" name="@DCNoteNoFrom" type="varchar" direction="Input" />
          <param key="DCNoteNoTo" name="@DCNoteNoTo" type="varchar" direction="Input" />
          <param key="invoiceYear" name="@invoiceYear" type="int" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateFrom" name="@purchaseExtractDateFrom" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateTo" name="@purchaseExtractDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="departmentId" name="@departmentId" type="int" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="designSourceList" name="@designSourceList" type="ArrayInt" direction="Input" />
          <param key="isActual" name="@isActual" type="int" direction="Input" />
          <param key="isRealized" name="@isRealized" type="int" direction="Input" />
          <param key="isAccrual" name="@isAccrual" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isNSLTailoring" name="@isNSLTailoring" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="supplierInvoiceNo" name="@supplierInvoiceNo" type="varchar" direction="Input" />
          <param key="ReportVersion" name="@ReportVersion" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getShipmentCommissionStudioSampleReport_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
			SELECT
				x.ShipmentId, 
				InvoiceNo, --InvoicePrefix, InvoiceSeq, InvoiceYear, 
				SequenceNo, InvoiceDate, 
				VendorName = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = x.VendorId), 
				ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK) WHERE ProductId = x.ProductId),
				ProductTeamCode = (SELECT Code FROM NSLDB..OfficeStructure WITH (NOLOCK) WHERE OfficeStructureId = x.ProductTeamId),
				DepartmentDesc = (SELECT Description FROM NSLDB..officestructure WHERE OfficeStructureId=x.DeptId), 
 				ContractNo, DeliveryNo, SupplierInvoiceNo, ShippingDocReceiptDate,
 				PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId), 
 				TotalPcs = TotalShippedQty * PiecesPerPack, 
 				CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = x.SellCurrencyId), 
 				TotalShippedQty, TotalShippedAmt, 
				SalesBaseAmount = (case when ReverseAccrual=1 then TotalShippedAmtInBaseCurrency else TotalShippedAmtInBaseCurrency end),								--ROUND(TotalShippedAmt * SalesRate / SalesBaseRate, 2)
 				NSLCommissionPercent, 
				CommBaseAmt = (case when ReverseAccrual=1 then SalesCommissionInBaseCurrency else SalesCommissionInBaseCurrency end),									--ROUND(NSLCommissionAmt * CommRate / CommBaseRate ,2)
				CommAmt = ROUND(NSLCommissionAmt, 2), 
 				CourierChargeToNUK, 
				CourierChargeToNUKBaseAmount = ROUND(CourierChargeToNUK * SalesRate / SalesBaseRate, 2), 
 				TotalShippedSupplierGmtAmtAfterDiscount = (case when ReverseAccrual=1 then x.TotalShippedSupplierGmtAmt else x.TotalShippedSupplierGmtAmt end),			--x.TotalShippedSupplierGmtAmtAfterDiscount
 				PurchaseBaseAmount = (case when ReverseAccrual=1 then TotalShippedSupplierGmtAmtInBaseCurrency else TotalShippedSupplierGmtAmtInBaseCurrency end),		--ROUND(x.TotalShippedSupplierGmtAmtAfterDiscount * PurchaseRate / PurchaseBaseRate,2)
 				SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = x.SeasonId), 
 				CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = x.CountryOfOriginId), 
 				OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = x.OfficeId), 
 				TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = x.TermOfPurchaseId), 
 				OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = x.WithOPRFabric), 
 				TradingAgencyName = (SELECT ShortName FROM TradingAgency WHERE TradingAgencyId = x.TradingAgencyId), 
				QACommissionPercent, 
 				VendorPaymentDiscountPercent,
				QACommOtherAmount,
				QACommBaseAmount = ROUND(QACommOtherAmount * PurchaseRate / PurchaseBaseRate, 2),
				PaymentDiscountOtherAmount,
				PaymentDiscountBaseAmount = ROUND(PaymentDiscountOtherAmount * PurchaseRate / PurchaseBaseRate, 2),
 				LabTestIncomeOtherAmount = ROUND(LabTestIncome * TotalShippedQty, 2), 
 				LabTestIncomeBaseAmount = ROUND( ROUND(LabTestIncome * TotalShippedQty, 2) * SalesRate / SalesBaseRate, 2), 
 				IsMockShopSample = convert(bit,IsMockShopSample), 
 				MockShopDebitNoteNo = ISNULL(x.DCNoteNo, ''),
				--Phase = CASE WHEN IsAccrual = 1 THEN (CASE WHEN ReverseAccrual=1 THEN 2 ELSE 1 END) ELSE 0 END --Actual = 0, Realized = 1, ReverseAccrual = 2, Accrual = 3 
				Phase = (CASE CategoryId WHEN 5 THEN 2 WHEN 3 THEN 1 ELSE 0 END)	--Actual = 0, Realized = 1, ReverseAccrual = 2, Accrual = 3 
              INTO #temp_MainEntry
              FROM
              (
  	              SELECT 
						--z.*,
						CategoryId = ISNULL(y.CategoryId,0),
						ReverseAccrual = (case when y.CategoryId=5 then 1 else 0 end),

						i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear,  
						InvoiceNo = (case when y.ReverseAccrual=1 
                                      then dbo.fn_FormatInvoiceNo(cos.InvoicePrefix, cos.InvoiceSeq, cos.InvoiceYear)
                                      else dbo.fn_FormatInvoiceNo(cos.InvoicePrefix, cos.InvoiceSeq, cos.InvoiceYear)
									  --else dbo.fn_FormatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear)
                                      end), 
						SequenceNo = (case when y.ReverseAccrual=1 then cos.SequenceNo else cos.SequenceNo end),								--i.SequenceNo
						InvoiceDate = (case when y.ReverseAccrual=1 then cos.InvoiceDate else cos.InvoiceDate end),								--i.InvoiceDate
						VendorId = (case when y.ReverseAccrual=1 then cos.VendorId else cos.VendorId end),										--s.VendorId
						ProductId = (case when y.ReverseAccrual=1 then cos.ProductId else cos.ProductId end),									--c.ProductId
						ProductTeamId = (case when y.ReverseAccrual=1 then cos.ProductTeamId else cos.ProductTeamId end),						--c.ProductTeamId
						c.DeptId,
						c.ContractNo, s.DeliveryNo, 
						SupplierInvoiceNo = (case when y.ReverseAccrual=1 then cos.SupplierInvoiceNo else cos.SupplierInvoiceNo end),			--i.SupplierInvoiceNo
						i.shippingDocReceiptDate,
						PackingUnitId = (case when y.ReverseAccrual=1 then cos.PackingUnitId else cos.PackingUnitId end),							--c.PackingUnitId
						PiecesPerPack = (case when y.ReverseAccrual=1 then cos.PiecesPerPack else cos.PiecesPerPack end),							--c.PiecesPerPack
						SellCurrencyId = (case when y.ReverseAccrual=1 then cos.SellCurrencyId else cos.SellCurrencyId end),						--s.SellCurrencyId
						TotalShippedQty = (case when y.ReverseAccrual=1 then cos.TotalShippedQty else cos.TotalShippedQty end),						--s.TotalShippedQty
						TotalShippedAmt = (case when y.ReverseAccrual=1 then cos.TotalShippedAmt * (-1) else cos.TotalShippedAmt end),				--s.TotalShippedAmt
						TotalShippedAmtInBaseCurrency =  (case when y.ReverseAccrual=1 then cos.TotalShippedAmtInBaseCurrency * (-1) ELSE cos.TotalShippedAmtInBaseCurrency END), 
						s.NSLCommissionPercent,
						NSLCommissionAmt = (case when y.ReverseAccrual=1 then cos.SalesCommission * (-1)  else cos.SalesCommission end),			--i.NSLCommissionAmt
						SalesCommissionInBaseCurrency = (case when y.ReverseAccrual=1 then cos.SalesCommissionInBaseCurrency * (-1) ELSE cos.SalesCommissionInBaseCurrency END),
						i.CourierChargeToNUK, 
                      
						--InvoiceSellExchangeRate = (case when y.ReverseAccrual=1 then ISNULL((SELECT ExchangeRate FROM ExchangeRate WHERE ExchangeRateTypeId=1 AND CurrencyId=cos.SellCurrencyId AND afc.StartDate between EffectiveDateFrom and EffectiveDateTo),0) else i.InvoiceSellExchangeRate end),
 		                --InvoiceBuyExchangeRate  = (case when y.ReverseAccrual=1 then ISNULL((SELECT ExchangeRate FROM ExchangeRate WHERE ExchangeRateTypeId=1 AND CurrencyId=cos.BuyCurrencyId  AND afc.StartDate between EffectiveDateFrom and EffectiveDateTo),0) else i.InvoiceBuyExchangeRate end),
		                --BaseExchangeRate    = ISNULL((SELECT ExchangeRate FROM ExchangeRate WHERE ExchangeRateTypeid=1 AND CurrencyId = @BaseCurrencyId AND (case when y.ReverseAccrual=1 then afc.StartDate else i.InvoiceDate end) between EffectiveDatefrom and EffectiveDateTo), 1),

						salesRate		= (case when @ReportVersion=0 then osr.ExchangeRate else sr.ExchangeRate  end),
						salesBaseRate	= (case when @ReportVersion=0 then obr.ExchangeRate else sbr.ExchangeRate end),
						CommRate		= (case when @ReportVersion=0 then osr.ExchangeRate else cr.ExchangeRate  end),
						CommBaseRate	= (case when @ReportVersion=0 then obr.ExchangeRate else cbr.ExchangeRate end),
						PurchaseRate	= (case when @ReportVersion=0 then opr.ExchangeRate else pr.ExchangeRate  end),
						PurchaseBaseRate= (case when @ReportVersion=0 then obr.ExchangeRate else pbr.ExchangeRate end),

						SplitCount = (case when y.ReverseAccrual=1 then cos.SetSplitCount else cos.SetSplitCount end),					--s.SplitCount
						s.IsVirtualSetSplit,
						TotalShippedSupplierGmtAmtAfterDiscount = isnull(y.TotalShippedSupplierGmtAmtAfterDiscount, s.TotalShippedSupplierGmtAmtAfterDiscount),
						TotalShippedSupplierGmtAmt = (case when y.ReverseAccrual=1 then cos.TotalShippedSupplierGmtAmt * (-1) ELSE cos.TotalShippedSupplierGmtAmt END),
						TotalShippedSupplierGmtAmtInBaseCurrency = (case when y.ReverseAccrual=1 then cos.TotalShippedSupplierGmtAmtInBaseCurrency * (-1) ELSE cos.TotalShippedSupplierGmtAmtInBaseCurrency END),
						SeasonId = (case when y.ReverseAccrual=1 then cos.SeasonId else cos.SeasonId end),								--c.SeasonId
						s.CountryOfOriginId,
						ShipmentId = (case when y.ReverseAccrual=1 then cos.ShipmentId else cos.ShipmentId end),						--s.ShipmentId
						OfficeId = (case when y.ReverseAccrual=1 then cos.OfficeId else cos.OfficeId end),								--c.OfficeId
						TermOfPurchaseId = (case when y.ReverseAccrual=1 then cos.TermOfPurchaseId else cos.TermOfPurchaseId end),		--s.TermOfPurchaseId
						s.WithOPRFabric, 
						TradingAgencyId = (case when y.ReverseAccrual=1 then cos.TradingAgencyId else cos.TradingAgencyId end),			--c.TradingAgencyId
						QACommissionPercent = (case when y.ReverseAccrual=1 then cos.QACommissionPercent 
														else cos.QACommissionPercent 
														--else (CASE WHEN (y.AvgQACommissionPercent IS NULL OR y.AvgQACommissionPercent = s.QACommissionPercent) THEN s.QACommissionPercent ELSE y.MaxQACommissionPercent END) 
														end), 
						VendorPaymentDiscountPercent = (case when y.ReverseAccrual=1 then cos.VendorPaymentDiscountPercent 
																	else cos.VendorPaymentDiscountPercent 
																	--else (CASE WHEN (y.AvgVendorPaymentDiscountPercent IS NULL OR y.AvgVendorPaymentDiscountPercent = s.VendorPaymentDiscountPercent) THEN s.VendorPaymentDiscountPercent ELSE NULL END) 
																	end), 
						SplitQACommissionAmount = y.QACommissionAmount,
						QACommOtherAmount = ROUND((case when y.ReverseAccrual=1 
															then ROUND(cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent / 100, 2) * (-1)
															else ROUND(cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent / 100, 2)
															--else (CASE WHEN (y.AvgQACommissionPercent IS NULL OR y.AvgQACommissionPercent = s.QACommissionPercent) 
															--	THEN ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2)
															--	ELSE y.QACommissionAmount
															--	END) 
															end),2), 
						PaymentDiscountOtherAmount = ROUND((case when y.ReverseAccrual=1 
																		then ROUND(cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent / 100, 2) * (-1)
																		else ROUND(cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent / 100, 2)
																		--else ISNULL(y.VendorPaymentDiscountAmount, ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2))
																		end), 2),

		                  LabTestIncome = (case when y.ReverseAccrual=1 then cos.LabTestIncome * (-1) else cos.LabTestIncome end),			--s.LabTestIncome
		                  IsMockShopSample = (case when y.ReverseAccrual=1 then cos.IsMockShopSample else cos.IsMockShopSample end),		--s.IsMockShopSample
		                  y.DCNoteNo, 
		                  DebitCreditIndicator = '' 
				from
				(
					select 
						s.ShipmentId, c.ProductId, c.ProductTeamId,
						m.DCNoteNo,
						
						SellCurrencyId = (case when z.ReverseAccrual=1 then isnull(cos.SellCurrencyId,s.SellCurrencyId) else isnull(cos.SellCurrencyId,s.SellCurrencyId) end),			--s.SellCurrencyId
						BuyCurrencyId = (case when z.ReverseAccrual=1 then isnull(cos.BuyCurrencyId,s.BuyCurrencyId) else isnull(cos.BuyCurrencyId,s.BuyCurrencyId) end),				--s.BuyCurrencyId
						z.ReverseAccrual,						
						IsAccrual = isnull(cos.IsAccrual, 0),
						
						--a.CategoryId,
						CategoryId = isnull(a.CategoryId,0),
						
						SalesFiscalYear		= (case when @ReportVersion=0 then max(cos.FiscalYear)	else isnull(max(case when il.SunInterfaceTypeId=1 and (il.CategoryId=a.CategoryId or (a.CategoryId=1 and il.CategoryId=4)) then il.FiscalYear	else null end),max(cos.FiscalYear))end),
						SalesPeriod			= (case when @ReportVersion=0 then max(cos.Period)		else isnull(max(case when il.SunInterfaceTypeId=1 and (il.CategoryId=a.CategoryId or (a.CategoryId=1 and il.CategoryId=4)) then il.Period		else null end),max(cos.Period)) end),
						CommFiscalYear		= (case when @ReportVersion=0 then max(cos.FiscalYear)	else isnull(max(case when il.SunInterfaceTypeId=2 and (il.CategoryId=a.CategoryId or (a.CategoryId=1 and il.CategoryId=4)) then il.FiscalYear	else null end),max(cos.FiscalYear))end),
						CommPeriod			= (case when @ReportVersion=0 then max(cos.Period)		else isnull(max(case when il.SunInterfaceTypeId=2 and (il.CategoryId=a.CategoryId or (a.CategoryId=1 and il.CategoryId=4)) then il.Period		else null end),max(cos.Period))end),
						PurchaseFiscalYear	= (case when @ReportVersion=0 then max(cos.FiscalYear)	else isnull(max(case when il.SunInterfaceTypeId=3 and (il.CategoryId=a.CategoryId or (a.CategoryId in (1,3) and il.CategoryId=4)) then il.FiscalYear	else null end),max(cos.FiscalYear)) end),
						PurchasePeriod		= (case when @ReportVersion=0 then max(cos.Period)		else isnull(max(case when il.SunInterfaceTypeId=3 and (il.CategoryId=a.CategoryId or (a.CategoryId in (1,3) and il.CategoryId=4)) then il.Period		else null end),max(cos.Period))end),
						
						--ExchangeRateDate = max(case when a.CategoryId=5 then fc.StartDate else i.InvoiceDate end),
						ExchangeRateDate = max(case when isnull(a.CategoryId,0)=5 then fc.StartDate else i.InvoiceDate end),						
						
						TotalShippedSupplierGmtAmtAfterDiscount = CONVERT(NUMERIC(18,2),SUM(ss.TotalShippedSupplierGmtAmtAfterDiscount)), 
						QACommissionAmount = CONVERT(NUMERIC(18,2),SUM(ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.QACommissionPercent / 100,2))), 
						VendorPaymentDiscountAmount = CONVERT(NUMERIC(18,2),SUM(ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.VendorPaymentDiscountPercent / 100, 2))), 
						AvgQACommissionPercent = CONVERT(NUMERIC(18,2),AVG(ss.QACommissionPercent)), 
						MaxQACommissionPercent = MAX(ss.QACommissionPercent), 
						AvgVendorPaymentDiscountPercent = CONVERT(NUMERIC(18,2),AVG(ss.VendorPaymentDiscountPercent)) 
					FROM Shipment as s with (nolock)
						INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
						INNER JOIN Contract AS c WITH (NOLOCK) ON s.ContractId = c.ContractId
						LEFT JOIN StudioDCNoteShipment AS ms WITH (NOLOCK) ON ms.ShipmentId = i.ShipmentId
						LEFT JOIN StudioDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId 
						LEFT JOIN CutOffSales AS cos WITH (NOLOCK) ON cos.ShipmentId = s.ShipmentId
						left join SplitShipment as ss WITH (NOLOCK) on  ss.ShipmentId = s.ShipmentId and ss.IsVirtualSetSplit = 0 AND ss.Status = 1 
						left join SunInterfaceLog as il with (nolock) on il.ShipmentId = s.ShipmentId and il.SunInterfaceTypeId in (1,2,3,4) and il.QueueId<>-1 and il.SplitShipmentId=isnull(ss.SplitShipmentId,0)
						LEFT JOIN (SELECT IsAccrual=1, ReverseAccrual=1, CategoryId=5 UNION SELECT IsAccrual=1, ReverseAccrual=0, CategoryId=3  UNION SELECT IsAccrual=0, ReverseAccrual=0, CategoryId=1) AS a ON a.IsAccrual=cos.IsAccrual
						LEFT JOIN NSLDB..AccountFinancialCalender AS fc WITH (NOLOCK) ON fc.AppId=13 AND fc.BudgetYear=cos.FiscalYear AND fc.Period=cos.Period
						LEFT JOIN (SELECT IsAccrual=1, ReverseAccrual=1, CategoryId=5 UNION SELECT IsAccrual=1, ReverseAccrual=0, CategoryId=3  UNION SELECT IsAccrual=0, ReverseAccrual=0, CategoryId=1) AS z ON z.CategoryId=isnull(a.CategoryId,0)
					WHERE (s.WorkflowStatusId = 8 or (s.WorkflowStatusId=9 and z.ReverseAccrual=1))
						AND (@budgetYear = -1 
							OR (@isActual = 1 AND cos.fiscalYear = @budgetYear AND cos.Period = @periodFrom and cos.isAccrual = 0)
							OR (@isRealized =1 AND cos.IsAccrual = 1
								AND ( EXISTS (SELECT * FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) 
												WHERE Appid= 9 AND i.InvoiceUploadDate BETWEEN StartDate AND EndDate 
												AND BudgetYear = @budgetYear AND Period = @periodFrom)
									 OR (s.WorkflowStatusId=9 and z.ReverseAccrual=1
										and cos.FiscalYear=@budgetYear - (case when @PeriodFrom=1 then 1 else 0 end) 
										and cos.Period=@PeriodFrom - (case when @PeriodFrom=1 then -11 else 1 end)
										)
									)			
								)
							)
						AND (@invoicePrefix = ''  OR (i.InvoicePrefix = @invoicePrefix AND i.InvoiceSeq BETWEEN @invoiceSeqFrom AND @invoiceSeqTo AND i.InvoiceYear = @invoiceYear))
						AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFROM AND @invoiceDateTo)
						AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
						AND (@purchaseExtractDateFrom IS NULL 
								OR EXISTS(SELECT * FROM SunInterfaceLog WITH (NOLOCK) 
											WHERE ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 5 
											AND CreatedOn BETWEEN @purchaseExtractDateFrom AND DATEADD(d,1,@purchaseExtractDateTo)))
						AND (@vendorId = -1 OR s.VendorId = @vendorId)
						AND ((@officeId = -1 AND c.OfficeId @officeIdList)  OR c.OfficeId = @officeId)
						AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
						AND c.ProductTeamId  @productTeamList
						AND c.CustomerId @customerIdList
						AND c.TradingAgencyId @tradingAgencyList
						AND (@seasonId = -1 OR c.SeasonId = @seasonId)
						AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
						AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
						--AND (@isUTOrder = -1 OR (@isUTOrder =1 AND s.CustomerDestinationId IN (4,5,28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
            AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
						AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
						AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
						AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
						AND (@isNSLTailoring = -1 
								OR (@isNSLTailoring = 1 AND c.UKSupplierCode in ('D68730', 'D68740', 'D68720', 'D69380', 'D69430'))
								OR (@isNSLTailoring = 0 AND c.UKSupplierCode NOT IN ('D68730', 'D68740', 'D68720', 'D69380', 'D69430')))
						AND ((@isSampleOrder = -1)
	            OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	            OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	            OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	            OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	            OR (@isSampleOrder = 4 AND (s.IsMockShopSample=1 OR (s.IsPressSample<>1 AND s.IsStudioSample<>1)))
	            OR (@isSampleOrder = 5 AND (s.IsPressSample=1 OR (s.IsMockShopSample<>1 AND s.IsStudioSample<>1)))
	            OR (@isSampleOrder = 6 AND (s.IsStudioSample=1))
            ) 
						AND (@MockShopDCNoteNoFrom IS NULL OR (m.DCNoteNo BETWEEN @MockShopDCNoteNoFrom AND @MockShopDCNoteNoTo))
						AND (@supplierInvoiceNo IS NULL OR i.SupplierInvoiceNo LIKE '%' + @supplierInvoiceNo + '%')
					group by s.ShipmentId, cos.SellCurrencyId, cos.BuyCurrencyId, cos.IsAccrual,c.ProductId, c.ProductTeamId, m.DCNoteNo, a.CategoryId, s.SellCurrencyId, s.BuyCurrencyId, z.ReverseAccrual
				) as y
				INNER JOIN Shipment as s with (nolock) ON s.ShipmentId = y.ShipmentId
				INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
				INNER JOIN Contract AS c WITH (NOLOCK) ON s.ContractId = c.ContractId
				LEFT  JOIN CutOffSales AS cos WITH (NOLOCK) ON cos.ShipmentId = s.ShipmentId

				LEFT  JOIN nsldb..AccountFinancialCalender as sfc with (nolock) on sfc.appid=13 and sfc.status=1 and sfc.BudgetYear = y.SalesFiscalYear		and sfc.Period = y.SalesPeriod
				LEFT  JOIN nsldb..AccountFinancialCalender as cfc with (nolock) on cfc.appid=13 and cfc.status=1 and cfc.BudgetYear = y.CommFiscalYear		and cfc.Period = y.CommPeriod
				LEFT  JOIN nsldb..AccountFinancialCalender as pfc with (nolock) on pfc.appid=13 and pfc.status=1 and pfc.BudgetYear = y.PurchaseFIscalYear	and pfc.Period = y.PurchasePeriod
				left join ExchangeRate as obr with (nolock) on obr.ExchangeRateTypeId=1 and y.ExchangeRateDate between obr.EffectiveDateFrom and obr.EffectiveDateTo and obr.CurrencyId=@BaseCurrencyId
				left join ExchangeRate as osr with (nolock) on osr.ExchangeRateTypeId=1 and y.ExchangeRateDate between osr.EffectiveDateFrom and osr.EffectiveDateTo and osr.CurrencyId=y.SellCurrencyId
				left join ExchangeRate as opr with (nolock) on opr.ExchangeRateTypeId=1 and y.ExchangeRateDate between opr.EffectiveDateFrom and opr.EffectiveDateTo and opr.CurrencyId=y.BuyCurrencyId
				left join ExchangeRate as sbr with (nolock) on sbr.ExchangeRateTypeId=1 and sfc.EndDate between sbr.EffectiveDateFrom and sbr.EffectiveDateTo and sbr.CurrencyId=@BaseCurrencyId
				left join ExchangeRate as sr with (nolock) on sr.ExchangeRateTypeId=1 and sfc.EndDate between sr.EffectiveDateFrom and sr.EffectiveDateTo and sr.CurrencyId=y.SellCurrencyId
				left join ExchangeRate as cbr with (nolock) on cbr.ExchangeRateTypeId=1 and cfc.EndDate between cbr.EffectiveDateFrom and cbr.EffectiveDateTo and cbr.CurrencyId=@BaseCurrencyId
				left join ExchangeRate as cr with (nolock) on cr.ExchangeRateTypeId=1 and cfc.EndDate between cr.EffectiveDateFrom and cr.EffectiveDateTo and cr.CurrencyId=y.SellCurrencyId
				left join ExchangeRate as pbr with (nolock) on pbr.ExchangeRateTypeId=1 and pfc.EndDate between pbr.EffectiveDateFrom and pbr.EffectiveDateTo and pbr.CurrencyId=@BaseCurrencyId
				left join ExchangeRate as pr with (nolock) on pr.ExchangeRateTypeId=1 and pfc.EndDate between pr.EffectiveDateFrom and pr.EffectiveDateTo and pr.CurrencyId=y.SellCurrencyId
					
				INNER JOIN Product  AS p WITH (NOLOCK) ON p.ProductId = c.ProductId 
                        AND DesignSourceId  @designSourceList
                INNER JOIN NSLDB..OfficeStructure AS os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId 
                        AND (os.ParentId @departmentIdList)


              ) AS x
              ORDER BY Phase, CurrencyCode, InvoicePrefix, InvoiceSeq, InvoiceYear 
              
              --#############################################################################################################
              -- Sales & Purchase Adjustment section

              -- Debit/Credit Note entries
              select 
	                x.ShipmentId,
	                InvoiceNo = dbo.fn_FormatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear), 
	                i.SequenceNo, 
                  i.InvoiceDate,
	                VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId) + ' - ' + ISNULL(AdjustmentNoteNo, '') , 
                  Prev_VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId) + ' - ' + ISNULL(AdjustmentNoteNo, '') , 
	                ItemNo = (select ItemNo From Product as p with (nolock) where ProductId = c.ProductId),
	                ProductTeamCode = (select Code from nsldb..OfficeStructure Code with (nolock) where OfficeStructureId = c.ProductTeamId),
                  DepartmentDesc = (SELECT Description from NSLDB..officestructure with (nolock) WHERE OfficeStructureId = c.DeptId),
                  c.ContractNo, 
	                s.DeliveryNo, 
	                i.SupplierInvoiceNo, i.shippingDocReceiptDate,
                  PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = c.PackingUnitId), 
	                TotalPcs = 0, --(s.TotalShippedQty * c.PiecesPerPack), 
	                CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.CurrencyId),
                  OriginalCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.PrevCurrencyId),

                  TotalShippedQty = 0, -- s.TotalShippedQty,                 
	                TotalShippedAmt = 0,    --s.TotalShippedAmt * DCSign, 
                  Prev_TotalShippedAmt = 0,
 	                SalesBaseAmount = 0,    --ROUND(s.TotalShippedAmt * xr.ExchangeRate / xru.ExchangeRate,2) * DCSign,
                  Prev_TotalSalesAmount =  0,
 	                NSLCommissionPercent = s.NSLCommissionPercent,  Prev_NSLCommissionPercent = 0,
 	                CommBaseAmt = 0,    --ROUND(ROUND(s.TotalShippedAmt * s.NSLCommissionPercent / 100, 2) * xr.ExchangeRate / xru.ExchangeRate,2) * DCSign,
                  Prev_CommBaseAmt = 0,
 	                CommAmt = 0,    --ROUND(s.TotalShippedAmt * s.NSLCommissionPercent / 100, 2) * DCSign,
                  Prev_CommAmt = 0,
 	                CourierChargeToNUK = 0,
 	                CourierChargeToNUKBaseAmount = ROUND(0 * xr.ExchangeRate / xru.ExchangeRate,2),
               
                  TotalShippedSupplierGmtAmtAfterDiscount =  x.LatestAmt   , --s.TotalShippedSupplierGmtAmt,
	                Prev_TotalShippedSupplierGmtAmtAfterDiscount = x.SettledAmt * -1 ,
	                PurchaseBaseAmount = ROUND( x.LatestAmt* xr.ExchangeRate / xru.ExchangeRate,2),
	                Prev_PurchaseBaseAmount = ROUND( x.SettledAmt * pxr.ExchangeRate / pxru.ExchangeRate,2) * -1,

 	                SeasonCode = (SELECT Code FROM NSLDB..Season WITH (NOLOCK) WHERE SeasonId = c.SeasonId),
 	                CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = s.CountryOfOriginId),
 	                OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WITH (NOLOCK) WHERE OfficeId = x.OfficeId),
 	                TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId),
                  Prev_TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = s.TermOfPurchaseId),
 	                OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WITH (NOLOCK) WHERE OPRFabricTypeId = s.WithOPRFabric),
 	                TradingAgencyName = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = c.TradingAgencyId),
 	                QACommissionPercent = isnull(x.QACommissionPercentAfter,0),
		              Prev_QACommissionPercent = isnull(x.QACommissionPercentBefore,0),
 	                VendorPaymentDiscountPercent = x.VendorPaymentDiscountAfter,
		              Prev_VendorPaymentDiscountPercent = x.VendorPaymentDiscountBefore,
                  QACommOtherAmount = x.QACommissionAmtBefore + x.QACommissionAmt,
                  Prev_QACommOtherAmount = x.QACommissionAmtBefore * -1,
 	                QACommBaseAmount = ROUND(( x.QACommissionAmtBefore + x.QACommissionAmt) *  xr.ExchangeRate / xru.ExchangeRate,2),
 	                Prev_QACommBaseAmount = ROUND( x.QACommissionAmtBefore*  pxr.ExchangeRate / pxru.ExchangeRate,2)*-1,
 	                PaymentDiscountOtherAmount = x.VendorPaymentDiscountAmtBefore + x.VendorPaymentDiscountAmt,
 	                Prev_PaymentDiscountOtherAmount = x.VendorPaymentDiscountAmtBefore*-1,
 	                PaymentDiscountBaseAmount = ROUND((x.VendorPaymentDiscountAmtBefore + x.VendorPaymentDiscountAmt) * xr.ExchangeRate / xru.ExchangeRate,2),
		              Prev_PaymentDiscountBaseAmount = ROUND(x.VendorPaymentDiscountAmtBefore * pxr.ExchangeRate / pxru.ExchangeRate,2) *-1,
                  LabTestIncomeOtherAmount = LabTestIncomeAfter,
                  Prev_LabTestIncomeOtherAmount = LabTestIncomeBefore * -1,
                  LabTestIncomeBaseAmount = ROUND( LabTestIncomeAfter *  xr.ExchangeRate / xru.ExchangeRate, 2),
                  Prev_LabTestIncomeBaseAmount = ROUND( LabTestIncomeBefore *  pxr.ExchangeRate / pxru.ExchangeRate, 2) * -1,

 	                IsMockShopSample = convert(bit,s.IsMockShopSample),
                  MockShopDebitNoteNo = isnull((SELECT m.DCNoteNo 
 					                                      FROM StudioDCNoteShipment AS ms WITH (NOLOCK) 
 					                                      LEFT JOIN StudioDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId 
 					                                      WHERE ms.ShipmentId = x.ShipmentId
 					                                    ),''),
                  phase = 4,  -- Adjustment
	                x.DebitCreditIndicator,
                  AdjustmentType='PURCHASE-DCNOTE',	
				  AnyAdjustment = (CASE WHEN x.AdjustmentAmt <> 0 THEN 1 ELSE 0 END),
				  ActionDate = x.CreatedOn

              into #temp_AdjustmentDC
              FROM 
	              (
	              select 
		                ad.AdjustmentDetailId, ad.ShipmentId, ad.SplitShipmentId, ad.AdjustmentTypeId, ad.DebitCreditIndicator, 
		                ad.LatestAmt, ad.SettledAmt, ad.AdjustmentAmt, ad.AdjustmentNoteId, ad.IsInterfaced, 
		                ad.QACommissionPercentBefore, ad.QACommissionPercentAfter, ad.QACommissionAmt, ad.QACommissionAmtBefore,
                    ad.VendorPaymentDiscountBefore, ad.VendorPaymentDiscountAfter, ad.VendorPaymentDiscountAmt, ad.VendorPaymentDiscountAmtBefore,
                    ad.LabTestIncomeBefore, ad.LabTestIncomeAfter,
		                ad.VendorId, ad.CurrencyId, 
		                an.OfficeId, 
		                an.AdjustmentNoteNo, an.IssueDate, an.Amount,
                    DCSign = (case when ad.DebitCreditIndicator = 'C' then -1 else 1 end) ,
                    ad.CreatedOn,
                    PrevCurrencyId     = ISNULL((SELECT TOP 1 pad.CurrencyId 
													FROM AdjustmentDetail AS pad WITH (NOLOCK) LEFT JOIN AdjustmentNote AS pan WITH (NOLOCK) ON pan.AdjustmentNoteId=pad.AdjustmentNoteId
													WHERE ShipmentId=ad.ShipmentId AND (pan.IssueDate<an.IssueDate or pad.CreatedOn<ad.CreatedOn) AND pad.AdjustmentTypeId = ad.AdjustmentTypeId
													ORDER BY ISNULL(pan.IssueDate, pad.CreatedOn) Desc
												), ad.CurrencyId), 
					AdjustPeriodDate = (Case when @ReportVersion=0 
											then ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
											else ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
											--else ISNULL((select distinct fc.EndDate 
											--			from SunInterfaceLog as l with (nolock)
											--				inner join NSLDB..AccountFinancialCalender as fc with (nolock)
											--					on l.FiscalYear=fc.BudgetYear and l.Period=fc.Period and fc.status = 1 and fc.AppId = 13
											--				where l.ShipmentId = ad.ShipmentId
											--					and l.DCNoteNo = an.AdjustmentNoteNo
											--					and l.SunInterfaceTypeId = 21)
											--			, convert(varchar,ad.CreatedOn,23))
											end),
					PrevAdjustPeriodDate = ISNULL((Case when @ReportVersion=0 

													then (SELECT TOP 1 ISNULL(pan.IssueDate, convert(varchar,pad.CreatedOn,23)) 
															FROM AdjustmentDetail AS pad WITH (NOLOCK) 
																LEFT JOIN AdjustmentNote AS pan WITH (NOLOCK) ON pan.AdjustmentNoteId=pad.AdjustmentNoteId
															WHERE pad.ShipmentId=ad.ShipmentId 
																AND pad.AdjustmentTypeId = ad.AdjustmentTypeId
																AND (pan.IssueDate<an.IssueDate or pad.CreatedOn<ad.CreatedOn) 
															ORDER BY 1 desc)
													else ISNULL(an.IssueDate, convert(varchar,ad.CreatedOn,23))
													--else (SELECT TOP 1 fc.EndDate 
													--		FROM SunInterfaceLog AS l WITH (NOLOCK)  
													--			LEFT JOIN NSLDB..AccountFinancialCalender AS fc WITH (NOLOCK) ON fc.BudgetYear=l.FiscalYear AND fc.Period=l.Period AND fc.AppId = 13 AND fc.Status=1
													--		WHERE l.ShipmentId = ad.ShipmentId
													--			and l.SunInterfaceTypeId in (3,21) 
													--			and l.CreatedOn < ad.CreatedOn
													--		ORDER BY 1 desc)
													end)
											,(SELECT TOP 1 EndDate FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) WHERE BudgetYear=cos.FiscalYear AND Period=cos.Period AND AppId=13 AND Status=1)
											)
					
				  from AdjustmentDetail as ad WITH (NOLOCK)
                    INNER JOIN CutOffSales AS cos ON cos.ShipmentId=ad.ShipmentId
                    INNER JOIN (SELECT TOP 1 StartDate, EndDate 
                                  FROM NSLDB..AccountFinancialCalender WITH (NOLOCK) 
						                      WHERE Period=@PeriodFrom and BudgetYear=@BudgetYear and AppId = 9 
						                      ORDER BY CreatedOn
                               ) AS afc ON ad.CreatedOn between afc.StartDate and DATEADD(d, 1, afc.EndDate) 
	                  LEFT join AdjustmentNote as an WITH (NOLOCK) on an.AdjustmentNoteId=ad.AdjustmentNoteId
	              where 
                      ad.AdjustmentTypeId = 2
	              ) as x
	              INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = x.ShipmentId
	              INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId   AND (@officeId = -1 OR (c.OfficeId @officeIdList))
	              INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = x.ShipmentId
					INNER JOIN ExchangeRate AS xr WITH (NOLOCK) ON xr.CurrencyId=x.CurrencyId AND xr.ExchangeRateTypeId=1 AND x.AdjustPeriodDate between xr.EffectiveDateFrom and xr.EffectiveDateTo
					INNER JOIN ExchangeRate AS xru WITH (NOLOCK) ON xru.CurrencyId=@BaseCurrencyId AND xru.ExchangeRateTypeId=1 AND x.AdjustPeriodDate between xru.EffectiveDateFrom and xru.EffectiveDateTo
 					INNER JOIN ExchangeRate AS pxr WITH (NOLOCK) ON pxr.CurrencyId=ISNULL(x.PrevCurrencyId,s.BuyCurrencyId) AND pxr.ExchangeRateTypeId=1 AND x.PrevAdjustPeriodDate between pxr.EffectiveDateFrom and pxr.EffectiveDateTo
					INNER JOIN ExchangeRate AS pxru WITH (NOLOCK) ON pxru.CurrencyId=@BaseCurrencyId AND pxru.ExchangeRateTypeId=1 AND x.PrevAdjustPeriodDate between pxru.EffectiveDateFrom and pxru.EffectiveDateTo


              ----------------------
              -- Reverse Entries  --
              ----------------------
				SELECT sl.*,
							SalesAdjustLogId, CommAdjustLogId, PurchaseAdjustLogId, FirstSalesAdjustLogId, FirstCommAdjustLogId, FirstPurchaseAdjustLogId, LatestAdjustLogId, FirstAdjustLogId,
							PrevSalesAdjustLogId	= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstSalesAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=1), -- AND CategoryId in (5)
							PrevCommAdjustLogId		= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstCommAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=2), --AND CategoryId in (5)
							PrevPurchaseAdjustLogId = (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<ISNULL(l.FirstPurchaseAdjustLogId, FirstAdjustLogId) AND SunInterfaceTypeId=3),--AND CategoryId in (5)
							PrevAdjustLogId			= (select MAX(SunInterfaceLogId) FROM SunInterfaceLog WITH (NOLOCK) WHERE ShipmentId=l.ShipmentId AND SunInterfaceLogId<l.LatestadjustLogId AND SunInterfaceTypeId in (1,2,3) and QueueId<>-1),
							IsSalesAdjustment		= (CASE WHEN SalesAdjustLogId IS NOT NULL OR CommAdjustLogId IS NOT NULL THEN 1 ELSE 0 END),
							IsPurchaseAdjustment	= (CASE WHEN PurchaseAdjustLogId IS NOT NULL THEN 1 ELSE 0 END)
		              INTO #temp_LogHistory
		              FROM (
			                  SELECT ShipmentId,
									LatestAdjustLogId = MAX(SunInterfaceLogId), 
									FirstAdjustLogId = MIN(SunInterfaceLogId), 
									SalesAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=1 THEN SunInterfaceLogId ELSE NULL END), 
									CommAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=2 THEN SunInterfaceLogId ELSE NULL END), 
									PurchaseAdjustLogId = MAX(CASE WHEN SunInterfaceTypeId=3 THEN SunInterfaceLogId ELSE NULL END), 
									FirstSalesAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=1 THEN SunInterfaceLogId ELSE NULL END), 
									FirstCommAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=2 THEN SunInterfaceLogId ELSE NULL END), 
									FirstPurchaseAdjustLogId = MIN(CASE WHEN SunInterfaceTypeId=3 THEN SunInterfaceLogId ELSE NULL END) 
		                        FROM SunInterfaceLog as l WITH (NOLOCK)
			                    WHERE CategoryId in (5) AND SunInterfaceTypeId IN (1,2,3) -- Purchase, Sales & Sales Commission
                                      AND (FiscalYear = @BudgetYear AND Period = @PeriodFrom)



			                          AND (@OfficeId = -1 OR (OfficeId in (@OfficeId)))
			                    GROUP by ShipmentId
			                ) AS l
			                INNER JOIN SunInterfaceLog AS sl WITH (NOLOCK) ON sl.ShipmentId = l.ShipmentId 
				                  AND sl.SunInterfaceTypeId IN (1,2,3)

				                  AND sl.CategoryId IN (1,3,4,5)


           SELECT 
				x.ShipmentId,
				InvoiceNo = dbo.fn_FormatInvoiceNo(x.InvoicePrefix, x.InvoiceSeq, x.InvoiceYear), 
				x.SequenceNo, 
				i.InvoiceDate,
				VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = x.VendorId), 
				Prev_VendorName = (SELECT Name FROM NSLIndustry..Vendor with (nolock) WHERE VendorId = Prev_VendorId),
				ItemNo = (select ItemNo From Product as p with (nolock) where ProductId = x.ProductId),
				ProductTeamCode = (select Code from nsldb..OfficeStructure Code with (nolock) where OfficeStructureId = x.ProductTeamId),
				DepartmentDesc = (SELECT Description from NSLDB..officestructure with (nolock) WHERE OfficeStructureId = c.DeptId),
				c.ContractNo, 
				s.DeliveryNo, 
				x.SupplierInvoiceNo, i.ShippingDocReceiptDate,
				PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId), 
				TotalPcs = 0,
				CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.CurrencyId),
				PrevCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=x.Prev_CurrencyId),

				TotalShippedQty = 0,
				TotalShippedAmt = x.SalesOtherAmt,
				Prev_TotalShippedAmt = x.Prev_SalesOtherAmt * -1,
				SalesBaseAmount =  x.SalesBaseAmt, 
				Prev_SalesBaseAmount = x.Prev_SalesBaseAmt * -1, 
				NSLCommissionPercent = s.NSLCommissionPercent,  
				Prev_NSLCommissionPercent = x.Prev_NSLCommPercent,
                  
				CommBaseAmt = ROUND(x.SalesCommOtherAmt * CommExchangeRate / CommExchangeRateUSD, 2) ,
				Prev_CommBaseAmt = ROUND(x.Prev_SalesCommOtherAmt * Prev_CommExchangeRate / Prev_CommExchangeRateUSD, 2) * -1,
				CommAmt = x.SalesCommOtherAmt,  
				Prev_CommAmt = x.Prev_SalesCommOtherAmt * -1,
                    
				CourierChargeToNUK = 0,
				CourierChargeToNUKBaseAmount = 0,

				TotalShippedSupplierGmtAmtAfterDiscount = x.PurchaseOtherAmt,
				Prev_TotalShippedSupplierGmtAmtAfterDiscount = x.Prev_PurchaseOtherAmt * -1,
				PurchaseBaseAmount = x.PurchaseBaseAmt, 
				Prev_PurchaseBaseAmount = x.Prev_PurchaseBaseAmt * -1, 

				SeasonCode = (SELECT Code FROM NSLDB..Season WITH (NOLOCK) WHERE SeasonId = x.SeasonId),
				CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WITH (NOLOCK) WHERE CountryOfOriginId = x.CountryOfOriginId),
				OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WITH (NOLOCK) WHERE OfficeId = x.OfficeId),
				TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = x.TermOfPurchaseId),
				Prev_TermOfPurchaseDesc =  (SELECT TermOfPurchaseDesc FROM TermOfPurchase WITH (NOLOCK) WHERE TermOfPurchaseId = Prev_TermOfPurchaseId),
                  
				OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WITH (NOLOCK) WHERE OPRFabricTypeId = s.WithOPRFabric),
				TradingAgencyName = (SELECT ShortName FROM TradingAgency WITH (NOLOCK) WHERE TradingAgencyId = x.TradingAgencyId),

				QACommissionPercent = ISNULL(x.QACommissionPercent, 0),
				Prev_QACommissionPercent = ISNULL(x.Prev_QACommissionPercent,	0),
				x.VendorPaymentDiscountPercent, x.Prev_VendorPaymentDiscountPercent,
				QACommOtherAmount = (CASE WHEN ISNULL(x.QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.PurchaseOtherAmt * x.QACommissionPercent / 100, 2) END),
				Prev_QACommOtherAmount =  (CASE WHEN ISNULL(x.Prev_QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.Prev_PurchaseOtherAmt * x.Prev_QACommissionPercent / 100, 2) * -1 END), 
				QACommBaseAmount = (CASE WHEN ISNULL(x.QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.PurchaseBaseAmt * x.QACommissionPercent / 100, 2) END),
				Prev_QACommBaseAmount = (CASE WHEN ISNULL(x.Prev_QACommissionPercent,0) = 0 THEN 0.00 ELSE ROUND(x.Prev_PurchaseBaseAmt * x.Prev_QACommissionPercent / 100, 2)  * -1 END),
				PaymentDiscountOtherAmount = ROUND(x.PurchaseOtherAmt * x.VendorPaymentDiscountPercent / 100 , 2),
				Prev_PaymentDiscountOtherAmount = ROUND(x.Prev_PurchaseOtherAmt * x.Prev_VendorPaymentDiscountPercent / 100, 2) * -1,
				PaymentDiscountBaseAmount = ROUND(x.PurchaseBaseAmt * x.VendorPaymentDiscountPercent / 100 , 2) ,
				Prev_PaymentDiscountBaseAmount = ROUND(x.Prev_PurchaseBaseAmt * x.Prev_VendorPaymentDiscountPercent / 100, 2)  * -1,
				LabTestIncomeOtherAmount = x.LabTestIncome * x.Qty,
				Prev_LabTestIncomeOtherAmount = x.Prev_LabTestIncome * Prev_ShippedQty * -1,
				LabTestIncomeBaseAmount = ROUND(x.LabTestIncome * x.Qty * PurchaseExchangeRate / PurchaseExchangeRateUSD, 2),
				Prev_LabTestIncomeBaseAmount = ROUND(x.Prev_LabTestIncome * Prev_ShippedQty * Prev_PurchaseExchangeRate / Prev_PurchaseExchangeRateUSD, 2) * -1,
				IsMockShopSample = convert(bit,x.IsMockShopSample),
				MockShopDebitNoteNo = isnull((SELECT m.DCNoteNo 
													FROM StudioDCNoteShipment AS ms WITH (NOLOCK) 
														LEFT JOIN StudioDCNote AS m WITH (NOLOCK) ON ms.DCNoteId = m.DCNoteId 
													WHERE ms.ShipmentId = x.ShipmentId
                    							),''),
				phase = 4,  -- Adjustment
				DebitCreditIndicator = Convert(varchar(1),''),
				AdjustmentType = (CASE WHEN HasSalesAdjustment = 1 AND HasPurchaseAdjustment = 1 THEN 'SALES&PURCHASE' + (case when HasDCNote=1 then '-DCNOTE' else '' end) 
										WHEN HasSalesAdjustment = 1 THEN 'SALES' 
										ELSE (CASE WHEN HasPurchaseAdjustment = 1 THEN 'PURCHASE' ELSE '' END) + (case when HasDCNote=1 then '-DCNOTE' else '' end)
										END),
				AnyAdjustment = (CASE WHEN x.PurchaseOtherAmt <> x.Prev_PurchaseOtherAmt
											or x.SalesOtherAmt <> x.Prev_SalesOtherAmt
											or x.SalesBaseAmt <> x.Prev_SalesBaseAmt
											or x.PurchaseBaseAmt <> x.Prev_PurchaseBaseAmt
											or x.QACommissionPercent <> x.Prev_QACommissionPercent
											or x.VendorPaymentDiscountPercent <> x.Prev_VendorPaymentDiscountPercent
											or x.TermOfPurchaseId <> x.Prev_TermOfPurchaseId
											or x.VendorId <> x.Prev_VendorId
											or x.CurrencyId <> x.Prev_CurrencyId
										THEN 1 ELSE 0 END),
				x.ActionDate
		INTO #temp_adjustment
		FROM 
			(
				SELECT  ll.*,
						SalesOtherAmt		= (CASE WHEN m.isSalesAdjustment = 1 THEN ISNULL(s.OtherAmt,ISNULL(ps.OtherAmt,0)) ELSE 0 END),
						SalesBaseAmt		= (CASE WHEN m.isSalesAdjustment = 1 THEN ISNULL(s.BaseAmt, ISNULL(ps.BaseAmt,0)) ELSE 0 END),
						PurchaseOtherAmt	= (CASE WHEN m.isPurchaseAdjustment = 1 THEN ISNULL(p.OtherAmt,0) ELSE 0 END),
						PurchaseBaseAmt		= (CASE WHEN m.isPurchaseAdjustment = 1 THEN ISNULL(p.BaseAmt, 0) ELSE 0 END),
						SalesCommOtherAmt = (CASE WHEN m.IsSalesAdjustment=1 
													THEN ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.SalesCommission ELSE s.SalesCommission END), 0)
													ELSE 0 END),
						NSLCommPercent = (CASE WHEN m.isSalesAdjustment = 1 
											THEN ROUND(ISNULL(100.0 * (CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.SalesCommission ELSE s.SalesCommission END) / ISNULL(s.OtherAmt,ps.OtherAmt), 0),2) 
											ELSE 0 END),
                  			
						Prev_NSLCommPercent = (CASE WHEN m.IsSalesAdjustment=1 
													THEN ROUND(ISNULL(100.0 * (CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.SalesCommission ELSE ps.SalesCommission END)/ ps.OtherAmt,0),2)
													ELSE 0 END),
						Prev_TermOfPurchaseId	= (CASE WHEN m.isPurchaseAdjustment=1 THEN pp.TermOfPurchaseId ELSE ps.TermOfPurchaseId END),
						Prev_SalesBaseAmt		= ISNULL((CASE WHEN m.IsSalesAdjustment=1 THEN ps.BaseAmt ELSE 0 END), 0),
						Prev_SalesOtherAmt		= ISNULL((CASE WHEN m.IsSalesAdjustment=1 THEN ps.OtherAmt ELSE 0 END),0),
						Prev_PurchaseOtherAmt	= ISNULL((CASE WHEN m.isPurchaseAdjustment=1 THEN pp.OtherAmt ELSE 0 END),0),
						Prev_PurchaseBaseAmt	= ISNULL((CASE WHEN m.isPurchaseAdjustment=1 THEN pp.BaseAmt ELSE 0 END), 0),
						Prev_SalesCommOtherAmt	= (CASE WHEN m.isSalesAdjustment=1 
													THEN ISNULL(CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.SalesCommission ELSE ps.SalesCommission END, 0)
													ELSE 0 END),
						Prev_QACommissionPercent = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.QACommissionPercent,0) ELSE 0 END),
						Prev_VendorPaymentDiscountPercent = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.VendorPaymentDiscountPercent,0) ELSE 0 END),
						Prev_LabTestIncome = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.LabTestIncome, 0) ELSE 0 END),
						Prev_ShippedQty = (CASE WHEN m.isPurchaseAdjustment=1 THEN ISNULL(pp.Qty, 0) ELSE 0 END),
						Prev_CurrencyId = (CASE WHEN m.isPurchaseAdjustment=1 AND pp.SunInterfaceLogId IS NOT NULL THEN pp.CurrencyId 
												WHEN m.isSalesAdjustment=1 AND ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.CurrencyId
												ELSE ps.CurrencyId END),

						CommExchangeRate			= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = (CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.CurrencyId ELSE s.CurrencyId END) AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Currencyid	ELSE s.CurrencyId	END), cs.SellCurrencyId)
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						CommExchangeRateUSD			= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= @BaseCurrencyId
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.FiscalYear	ELSE s.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(c.SunInterfaceLogId,0) > ISNULL(s.SunInterfaceLogId,0) THEN c.Period		ELSE s.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						PurchaseExchangeRate		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = pp.CurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = isnull(p.CurrencyId,cs.BuyCurrencyId)		AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						PurchaseExchangeRateUSD		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(p.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(p.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_CommExchangeRate		= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = (CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.CurrencyId ELSE ps.CurrencyId END) AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Currencyid	ELSE ps.CurrencyId	END), cs.SellCurrencyId)
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_CommExchangeRateUSD	= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc 
																		ON  fc.AppId = 13 AND er.ExchangeRateTypeId = 1 
																		AND er.CurrencyId	= @BaseCurrencyId
																		AND fc.BudgetYear	= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.FiscalYear	ELSE ps.FiscalYear	END), cs.FiscalYear) 
																		AND fc.Period		= ISNULL((CASE WHEN ISNULL(pc.SunInterfaceLogId,0) > ISNULL(ps.SunInterfaceLogId,0) THEN pc.Period		ELSE ps.Period		END), cs.Period) 
																		AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_PurchaseExchangeRate	= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = pp.CurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = isnull(pp.CurrencyId,cs.BuyCurrencyId)	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
						Prev_PurchaseExchangeRateUSD= (CASE WHEN @ReportVersion=0
															THEN (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender a ON a.BudgetYear = cs.FiscalYear AND a.Period = cs.Period AND a.AppId = 9 WHERE er.CurrencyId = @BaseCurrencyId AND er.ExchangeRateTypeId = 1 AND a.StartDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo)
															ELSE (SELECT ExchangeRate FROM ExchangeRate er INNER JOIN NSLDB..AccountFinancialCalender fc ON fc.BudgetYear = isnull(pp.FiscalYear, cs.FiscalYear) AND fc.Period = isnull(pp.Period, cs.Period) AND fc.AppId = 13 WHERE er.CurrencyId = @BaseCurrencyId	AND er.ExchangeRateTypeId = 1	AND fc.EndDate BETWEEN er.EffectiveDateFrom AND er.EffectiveDateTo) END),
															
						Prev_VendorId = ISNULL(ps.VendorId, pp.VendorId),
						HasSalesAdjustment = m.isSalesAdjustment,
						HasPurchaseAdjustment = m.isPurchaseAdjustment,
						HasDCNote = (case when ta.ShipmentId is not null then 1 else 0 end),
						ActionDate = ll.CreatedOn
					FROM
							(select * from #temp_logHistory where SunInterfaceLogId = LatestAdjustLogId) AS m

							INNER JOIN #temp_LogHistory AS ll ON ll.SunInterfaceLogId=m.LatestAdjustLogId       -- Reverse Log Record
							INNER JOIN #temp_LogHistory AS pl ON pl.SunInterfaceLogId=m.PrevAdjustLogId         -- Previouse Record of the Reverse Log record
							LEFT  JOIN #temp_LogHistory AS s  ON s.SunInterfaceLogId=m.SalesAdjustLogId         -- Sales Adjustment record
							LEFT  JOIN #temp_LogHistory AS c  ON c.SunInterfaceLogId=m.CommAdjustLogId          -- Sales Commission Adjustment record
							LEFT  JOIN #temp_LogHistory AS p  ON p.SunInterfaceLogId=m.PurchaseAdjustLogId      -- Purchase Adjustment record
							LEFT  JOIN #temp_LogHistory AS ps ON ps.SunInterfaceLogId=m.PrevSalesAdjustLogId    -- Previous Sales Adjustment record
							LEFT  JOIN #temp_LogHistory AS pc ON pc.SunInterfaceLogId=m.PrevCommAdjustLogId     -- Previous Sales Commission Adjustment record
							LEFT  JOIN #temp_LogHistory AS pp ON pp.SunInterfaceLogId=m.PrevPurchaseAdjustLogId -- Previous Purchase Adjustment record
							INNER JOIN CutOffSales AS cs WITH (NOLOCK) ON cs.ShipmentId = m.ShipmentId and (m.Period <> cs.Period OR m.FiscalYear <> cs.FiscalYear )
							LEFT JOIN #temp_AdjustmentDC as ta ON ta.ShipmentId=m.ShipmentId
				) AS x
			INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = x.ShipmentId
			INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId
			INNER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = x.ShipmentId


              -- Report contents
              select 
                        ShipmentId, InvoiceNo, SequenceNo, InvoiceDate,VendorName, VendorName AS Prev_VendorName , ItemNo ,ProductTeamCode , DepartmentDesc , ContractNo, DeliveryNo, SupplierInvoiceNo, ShippingDocReceiptDate, PackingUnitDesc , 
                        TotalPcs, CurrencyCode, OriginalCurrencyCode=CurrencyCode, TotalShippedQty , TotalShippedAmt, Prev_TotalShippedAmt =0, SalesBaseAmount , Prev_SalesBaseAmount = 0, NSLCommissionPercent , Prev_NSLCommissionPercent = 0,
                        CommBaseAmt , Prev_CommBaseAmt = 0,   CommAmt , Prev_CommAmt = 0  , CourierChargeToNUK , CourierChargeToNUKBaseAmount , TotalShippedSupplierGmtAmtAfterDiscount ,
                        Prev_TotalShippedSupplierGmtAmtAfterDiscount=0 , PurchaseBaseAmount , Prev_PurchaseBaseAmount=0 , SeasonCode , CountryOfOrigin, OfficeCode ,TermOfPurchaseDesc , TermOfPurchaseDesc AS Prev_TermOfPurchaseDesc,
                        OPRFabricTypeName , TradingAgencyName ,QACommissionPercent, Prev_QACommissionPercent = 0, VendorPaymentDiscountPercent, Prev_VendorPaymentDiscountPercent = 0,
                        QACommOtherAmount , Prev_QACommOtherAmount=0, 
                        QACommBaseAmount,  Prev_QACommBaseAmount =0, PaymentDiscountOtherAmount , Prev_PaymentDiscountOtherAmount=0, PaymentDiscountBaseAmount ,
                        Prev_PaymentDiscountBaseAmount = 0, LabTestIncomeOtherAmount, Prev_LabTestIncomeOtherAmount = 0, LabTestIncomeBaseAmount, Prev_LabTestIncomeBaseAmount = 0,
                        IsMockShopSample , MockShopDebitNoteNo, phase , DebitCreditIndicator='', AdjustmentType = Convert(varchar(1),''), 
						AnyAdjustment = 0, ActionDate  = InvoiceDate
                  from #temp_MainEntry 
              UNION
              (
              SELECT x.*
                  FROM
                      (
                        SELECT * FROM #temp_adjustment AS t WHERE AnyAdjustment = 1
                        UNION SELECT * FROM #temp_adjustmentDC WHERE AnyAdjustment = 1

                      ) AS x
                      INNER JOIN shipment AS s WITH (NOLOCK) ON s.ShipmentId=x.ShipmentId
                      INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId
                      INNER JOIN Product  AS p WITH (NOLOCK) ON p.ProductId = c.ProductId 
                          AND DesignSourceId  @designSourceList
                      INNER JOIN NSLDB..OfficeStructure AS os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId 
                          AND (os.ParentId @departmentIdList)
                  WHERE s.WorkflowStatusId=8
                      AND AdjustmentType<>''
                      AND (@vendorId = -1 OR s.VendorId = @vendorId)
                      AND (c.ProductTeamId  @productTeamList)
                      AND (c.CustomerId @customerIdList)
                      AND (c.TradingAgencyId @tradingAgencyList)
                      AND (@seasonId = -1 OR c.SeasonId = @seasonId)
                      AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
                      AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
                      --AND (@isUTOrder = -1 OR (@isUTOrder =1 AND s.CustomerDestinationId IN (4,5,28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
                      AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
                      AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
                      AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
                      AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
                      AND (@isNSLTailoring = -1 
                              OR (@isNSLTailoring = 1 AND c.UKSupplierCode in ('D68730', 'D68740', 'D68720', 'D69380', 'D69430'))
                              OR (@isNSLTailoring = 0 AND c.UKSupplierCode NOT IN ('D68730', 'D68740', 'D68720', 'D69380', 'D69430')))
                      AND ((@isSampleOrder = -1)
	                      OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                      OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                      OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                      OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                      OR (@isSampleOrder = 4 AND (s.IsMockShopSample=1 OR (s.IsPressSample<>1 AND s.IsStudioSample<>1)))
	                      OR (@isSampleOrder = 5 AND (s.IsPressSample=1 OR (s.IsMockShopSample<>1 AND s.IsStudioSample<>1)))
	                      OR (@isSampleOrder = 6 AND (s.IsStudioSample=1))
                      ) 
              ) 

          ]]>
        </commandText>
        <parameters>
          <param key="invoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="invoiceSeqFrom" name="@invoiceSeqFrom" type="int" direction="Input" />
          <param key="invoiceSeqTo" name="@invoiceSeqTo" type="int" direction="Input" />
          <param key="mockShopDCNoteNoFrom" name="@mockShopDCNoteNoFrom" type="varchar" direction="Input" />
          <param key="mockshopDCNoteNoTo" name="@mockShopDCNoteNoTo" type="varchar" direction="Input" />
          <param key="invoiceYear" name="@invoiceYear" type="int" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateFrom" name="@purchaseExtractDateFrom" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateTo" name="@purchaseExtractDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="departmentId" name="@departmentId" type="int" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="designSourceList" name="@designSourceList" type="ArrayInt" direction="Input" />
          <param key="isActual" name="@isActual" type="int" direction="Input" />
          <param key="isRealized" name="@isRealized" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isNSLTailoring" name="@isNSLTailoring" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="supplierInvoiceNo" name="@supplierInvoiceNo" type="varchar" direction="Input" />
          <param key="ReportVersion" name="@ReportVersion" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getShipmentCommissionChoiceReport_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
          SELECT
              x.ShipmentId,
              InvoiceNo = dbo.fn_formatInvoiceNo(InvoicePrefix, InvoiceSeq, InvoiceYear), 
              SequenceNo, InvoiceDate, 
              VendorName = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = x.VendorId), 
              ItemNo, ProductTeamCode, DepartmentDesc,
              ContractNo, DeliveryNo, SupplierInvoiceNo,
              PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = x.PackingUnitId),
              TotalShippedQty * PiecesPerPack AS TotalPcs,
              CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = x.SellCurrencyId),
              OriginalCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = x.SellCurrencyId),
              TotalShippedQty,
              TotalShippedAmt, ROUND(TotalShippedAmt * InvoiceSellExchangeRate / baseExchangeRate,2) AS SalesBaseAmount,
              NSLCommissionPercent, ROUND(NSLCommissionAmt * InvoiceSellExchangeRate / baseExchangeRate ,2) AS CommBaseAmt ,
              ROUND(NSLCommissionAmt, 2) AS CommAmt,
              CourierChargeToNUK, CourierChargeToNUKBaseAmount = ROUND(CourierChargeToNUK * InvoiceSellExchangeRate / baseExchangeRate, 2),
              TotalShippedSupplierGmtAmtAfterDiscount = isnull(y.TotalShippedSupplierGmtAmtAfterDiscount, x.TotalShippedSupplierGmtAmtAfterDiscount),
              PurchaseBaseAmount = ROUND(isnull(y.TotalShippedSupplierGmtAmtAfterDiscount, x.TotalShippedSupplierGmtAmtAfterDiscount) * InvoiceBuyExchangeRate / baseExchangeRate,2),
              -- s.TotalShippedSupplierGmtAmtAfterDiscount, ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * i.InvoiceBuyExchangeRate / baseER.ExchangeRate,2) AS PurchaseBaseAmount,
              SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = x.SeasonId),
              CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = x.CountryOfOriginId),
              OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = x.OfficeId),
              TermOfPurchaseDesc = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = x.TermOfPurchaseId),
              OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = x.WithOPRFabric),
              TradingAgencyName = (SELECT ShortName FROM TradingAgency WHERE TradingAgencyId = x.TradingAgencyId),
              Phase = CASE WHEN IsAccrual = 1 THEN 2 ELSE 1 END, --Actual = 1, Realized = 2, Accrual = 3,
              QACommissionPercent = CASE WHEN (y.AvgQACommissionPercent IS NULL OR y.AvgQACommissionPercent = x.QACommissionPercent)
                                          THEN x.QACommissionPercent ELSE NULL END,
              VendorPaymentDiscountPercent = CASE WHEN (y.AvgVendorPaymentDiscountPercent IS NULL OR y.AvgVendorPaymentDiscountPercent = x.VendorPaymentDiscountPercent)
                                                  THEN x.VendorPaymentDiscountPercent ELSE NULL END,
              QACommOtherAmount = ISNULL(y.QACommissionAmount, ROUND(x.TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent /100,2)),
              QACommBaseAmount = ROUND(isnull(y.QACommissionAmount, ROUND(x.TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)) * InvoiceBuyExchangeRate / baseExchangeRate,2),
              PaymentDiscountOtherAmount = ISNULL(y.VendorPaymentDiscountAmount, ROUND(x.TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)),
              PaymentDiscountBaseAmount = ROUND(isnull(y.VendorPaymentDiscountAmount, ROUND(x.TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)) * InvoiceBuyExchangeRate / baseExchangeRate,2),
              IsMockShopSample = convert(bit,x.IsMockShopSample)
              , MockShopDebitNoteNo='' , DebitCreditIndicator = Convert(varchar(1),''), AdjustmentType = Convert(varchar(1),'')
          FROM
            ( SELECT
                i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SequenceNo,
                s.VendorId, p.ItemNo, ProductTeamCode = os.Code, 
                DepartmentDesc = (SELECT Description from NSLDB..officestructure WHERE OfficeStructureId=c.DeptId),
                c.ContractNo, s.DeliveryNo, i.SupplierInvoiceNo,
                c.PackingUnitId, c.PiecesPerPack, s.SellCurrencyId,
                s.TotalShippedQty, i.ChoiceOrderTotalShippedAmt AS TotalShippedAmt, s.NSLCommissionPercent, 
                i.ChoiceOrderNSLCommissionAmt AS NSLCommissionAmt, i.CourierChargeToNUK,
                i.InvoiceSellExchangeRate, i.InvoiceBuyExchangeRate,
                s.SplitCount , s.IsVirtualSetSplit ,
                i.ChoiceOrderTotalShippedSupplierGmtAmt AS TotalShippedSupplierGmtAmtAfterDiscount ,
                c.SeasonId, s.CountryOfOriginId, s.ShipmentId, c.OfficeId,
                s.TermOfPurchaseId, s.WithOPRFabric, c.TradingAgencyId,
                baseExchangeRate = (SELECT ExchangeRate FROM ExchangeRate WHERE CurrencyId = @baseCurrencyId AND ExchangeRateTypeid = 1 and i.invoicedate between Effectivedatefrom and effectivedateto),
                cos.IsAccrual, s.QACommissionPercent, s.VendorPaymentDiscountPercent, s.IsMockShopSample
              FROM Invoice AS i
                INNER JOIN Shipment AS s ON i.ShipmentId = s.ShipmentId
                INNER JOIN Contract AS c ON s.ContractId = c.ContractId
                INNER JOIN Product AS p ON p.ProductId = c.ProductId 
                INNER JOIN NSLDB..OfficeStructure AS os ON os.OfficeStructureId = c.ProductTeamId 
                    --AND (@departmentId = -1 OR os.ParentId = @departmentId)    
                    AND os.ParentId @departmentIdList
                LEFT JOIN CutOffSales AS cos ON cos.ShipmentId = s.ShipmentId
              WHERE s.WorkflowStatusId = 8
                AND (@invoicePrefix = ''  OR (i.InvoicePrefix = @invoicePrefix AND i.InvoiceSeq BETWEEN @invoiceSeqFrom AND @invoiceSeqTo AND i.InvoiceYear = @invoiceYear))
                AND (@budgetYear = -1 
                     OR (@isActual = 1 AND cos.fiscalYear = @budgetYear AND cos.Period = @periodFrom and cos.isAccrual = 0)
                     OR (@isRealized =1 AND cos.IsAccrual = 1
                          AND EXISTS (SELECT * FROM NSLDB..AccountFinancialCalender 
                                        WHERE Appid= 9 AND i.InvoiceUploadDate BETWEEN StartDate AND EndDate 
                                          AND BudgetYear = @budgetYear AND Period = @periodFrom)))
                AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFROM AND @invoiceDateTo)
                AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
                AND (@purchaseExtractDateFrom IS NULL 
                        OR EXISTS(SELECT * FROM SunInterfaceLog 
                                    WHERE ShipmentId = s.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId <> 5 
                                      AND CreatedOn BETWEEN @purchaseExtractDateFrom AND DATEADD(d,1,@purchaseExtractDateTo)))
                AND (@vendorId = -1 OR s.VendorId = @vendorId)
                AND ((@officeId = -1 AND c.OfficeId @officeIdList)  OR c.OfficeId = @officeId)
                AND c.ProductTeamId  @productTeamList
                AND (@seasonId = -1 OR c.SeasonId = @seasonId)
                AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @CountryOfOriginId)
                AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
                AND c.CustomerId =8
                AND c.TradingAgencyId @tradingAgencyList
            ) AS x
            LEFT JOIN
              ( SELECT  
                  TotalShippedSupplierGmtAmtAfterDiscount=SUM(TotalShippedSupplierGmtAmtAfterDiscount),
                  QACommissionAmount =	SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * QACommissionPercent / 100,2)),
                  VendorPaymentDiscountAmount = SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * VendorPaymentDiscountPercent / 100, 2)),
                  AvgQACommissionPercent = AVG(QACommissionPercent),
                  AvgVendorPaymentDiscountPercent = AVG(VendorPaymentDiscountPercent),
                  shipmentid 
                FROM SplitShipment
                WHERE IsVirtualSetSplit = 0 AND Status = 1
                Group by shipmentid
              ) AS y on y.shipmentid = x.shipmentid
          ]]>
        </commandText>
        <parameters>
          <param key="invoicePrefix" name="@invoicePrefix" type="varchar" direction="Input" />
          <param key="invoiceSeqFrom" name="@invoiceSeqFrom" type="int" direction="Input" />
          <param key="invoiceSeqTo" name="@invoiceSeqTo" type="int" direction="Input" />
          <param key="invoiceYear" name="@invoiceYear" type="int" direction="Input" />
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateFrom" name="@purchaseExtractDateFrom" type="DateTime" direction="Input" />
          <param key="purchaseExtractDateTo" name="@purchaseExtractDateTo" type="DateTime" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="departmentId" name="@departmentId" type="int" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="isActual" name="@isActual" type="int" direction="Input" />
          <param key="isRealized" name="@isRealized" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getAccrualShipmentCommission_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[

          SELECT
              s.ShipmentId,
              InvoiceNo = (case when cos.InvoicePrefix is not null
								then dbo.fn_formatInvoiceNo(cos.InvoicePrefix, cos.InvoiceSeq, cos.InvoiceYear)
								else ii.InvoiceNo end),
			  cos.SequenceNo,
              InvoiceDate =  ISNULL(i.InvoiceDate, ISNULL(i.ActualAtWarehouseDate, ISNULL(i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate))),
              VendorName = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = cos.VendorId), 
              Prev_VendorName = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = cos.VendorId), 
              p.ItemNo,
              ProductTeamCode = os.Code, DepartmentDesc=(SELECT Description from NSLDB..officestructure WHERE OfficeStructureId=c.DeptId),
              c.ContractNo, s.DeliveryNo,
              i.SupplierInvoiceNo,
              PackingUnitDesc = (SELECT PackingUnitOPSKey FROM PackingUnit WHERE PackingUnitId = cos.PackingUnitId),
              cos.TotalShippedQty * cos.PiecesPerPack AS TotalPcs,
              CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = cos.SellCurrencyId),
              cos.TotalShippedQty,
              cos.TotalShippedAmt, ROUND(cos.TotalShippedAmt * ser.ExchangeRate / baseER.ExchangeRate,2) AS SalesBaseAmount,
              s.NSLCommissionPercent, ROUND(cos.SalesCommission * ser.ExchangeRate/ baseER.ExchangeRate ,2) AS CommBaseAmt,
              ROUND( cos.SalesCommission, 2) AS CommAmt,
              CourierChargeToNUK = ISNULL(i.CourierChargeToNUK,0), CourierChargeToNUKBaseAmount = ISNULL(ROUND(i.CourierChargeToNUK * ser.ExchangeRate / baseER.ExchangeRate, 2),0),
              TotalShippedSupplierGmtAmtAfterDiscount = ISNULL(y.TotalShippedSupplierGmtAmt, cos.TotalShippedSupplierGmtAmt),
              PurchaseBaseAmount = ROUND(ISNULL(y.TotalShippedSupplierGmtAmt, cos.TotalShippedSupplierGmtAmt) * ber.ExchangeRate / baseER.ExchangeRate,2),

              SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
              CountryOfOrigin = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),
              OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = cos.OfficeId),
              TermOfPurchaseDesc =(SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = cos.TermOfPurchaseId),
              Prev_TermOfPurchaseDesc =(SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = cos.TermOfPurchaseId),
              OPRFabricTypeName = (SELECT OPRFabricTypeName FROM OPRFabricType WHERE OPRFabricTypeId = s.WithOPRFabric),
              TradingAgencyName = (SELECT ShortName FROM TradingAgency WHERE TradingAgencyId = cos.TradingAgencyId),
              Phase = 3,
              --Actual = 1, Realized = 2, Accrual = 3
              QACommissionPercent= CASE WHEN (y.AvgQACommissionPercent IS NULL OR y.AvgQACommissionPercent = cos.QACommissionPercent)
              THEN cos.QACommissionPercent ELSE NULL END,
              VendorPaymentDiscountPercent = CASE WHEN (y.AvgVendorPaymentDiscountPercent IS NULL OR
              y.AvgVendorPaymentDiscountPercent = cos.VendorPaymentDiscountPercent)
              THEN cos.VendorPaymentDiscountPercent ELSE NULL END,
              QACommOtherAmount = isnull(y.QACommissionAmount, ROUND(cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent /100,2)),
              QACommBaseAmount = ROUND(isnull(y.QACommissionAmount, ROUND(cos.TotalShippedSupplierGmtAmt * cos.QACommissionPercent / 100,2)) * ber.ExchangeRate / baseER.ExchangeRate,2),
              PaymentDiscountOtherAmount = isnull(y.VendorPaymentDiscountAmount, ROUND(cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent / 100, 2)),
              PaymentDiscountBaseAmount = ROUND(isnull(y.VendorPaymentDiscountAmount, ROUND(cos.TotalShippedSupplierGmtAmt * cos.VendorPaymentDiscountPercent / 100, 2)) * ber.ExchangeRate / baseER.ExchangeRate,2),
              	LabTestIncomeOtherAmount = ROUND(s.LabTestIncome * s.TotalShippedQty, 2),
            	LabTestIncomeBaseAmount = ROUND( ROUND(s.LabTestIncome * s.TotalShippedQty, 2) *ber.ExchangeRate / baseER.ExchangeRate  ,2),
              IsMockShopSample = convert(bit,cos.IsMockShopSample)
              , MockShopDebitNoteNo='' , DebitCreditIndicator = Convert(varchar(1),''), AdjustmentType = Convert(varchar(1),'')
          FROM Invoice AS i
              INNER JOIN Shipment AS s ON i.ShipmentId = s.ShipmentId
              INNER JOIN Contract AS c ON s.ContractId = c.ContractId
              INNER JOIN Product AS p ON p.ProductId = c.ProductId AND DesignSourceId  @designSourceList
              INNER JOIN NSLDB..OfficeStructure AS os ON os.OfficeStructureId = c.ProductTeamId 
                  -- AND (@departmentId = -1 OR os.ParentId = @departmentId)
                  AND (os.ParentId @departmentIdList)
              INNER JOIN CutoffSales AS cos ON cos.ShipmentId = i.ShipmentId AND cos.IsAccrual = 1 AND cos.FiscalYear = @budgetYear AND cos.Period = @periodFrom
              INNER JOIN ExchangeRate AS ser on ser.CurrencyId = s.SellCurrencyId AND ser.ExchangeRateTypeId = 1 AND
                  ISNULL(i.InvoiceDate, ISNULL(i.ActualAtWarehouseDate, ISNULL(i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate))) BETWEEN ser.EffectiveDateFrom AND ser.EffectiveDateTo
              INNER JOIN ExchangeRate AS ber on ber.CurrencyId = s.BuyCurrencyId AND ber.ExchangeRateTypeId = 1 AND
                  ISNULL(i.InvoiceDate, ISNULL(i.ActualAtWarehouseDate, ISNULL(i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate))) BETWEEN ber.EffectiveDateFrom AND ber.EffectiveDateTo
              INNER JOIN ExchangeRate AS baseER ON baseER.CurrencyId = @baseCurrencyId AND baseER.ExchangeRateTypeId = 1 AND
                  ISNULL(i.InvoiceDate, ISNULL(i.ActualAtWarehouseDate, ISNULL(i.ILSActualAtWarehouseDate, cos.CustomerAtWarehouseDate))) BETWEEN baseER.EffectiveDateFrom AND baseER.EffectiveDateTo
              LEFT JOIN
                  (
                    SELECT ShipmentId, TotalShippedSupplierGmtAmt = SUM(TotalShippedSupplierGmtAmt),
                        QACommissionAmount = SUM(ROUND(TotalShippedSupplierGmtAmt * QACommissionPercent / 100,2)),
                        VendorPaymentDiscountAmount = SUM(ROUND(TotalShippedSupplierGmtAmt * VendorPaymentDiscountPercent / 100,2)),
                        AvgQACommissionpercent = AVG(QACommissionPercent),
                        AvgVendorPaymentDiscountPercent = AVG(VendorPaymentDiscountPercent)
                    FROM CutOffSplitSales
                    GROUP BY ShipmentId
                  ) AS y ON y.ShipmentId = i.ShipmentId
			  LEFT JOIN ILSOrderRef as ior ON ior.ShipmentId=s.ShipmentId
			  LEFT JOIN ILSInvoice as ii ON ii.OrderRefId=ior.OrderRefId
          WHERE
              s.WorkflowStatusId NOT IN (3,9)
              AND (@vendorId = -1 OR s.VendorId = @vendorId)
              AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
              AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
              AND c.ProductTeamId  @productTeamList
              AND (@seasonId = -1 OR c.SeasonId = @seasonId)
              AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
              AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
              --AND (@isUTOrder = -1 OR (@isUTOrder =1 AND s.CustomerDestinationId IN (4,5,28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
              AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5) ) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
              AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
              AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
              AND (c.CustomerId @customerIdList)
              AND (c.TradingAgencyId @tradingAgencyList)
              AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
              AND (@isNSLTailoring = -1 
                      OR (@isNSLTailoring = 1 AND c.UKSupplierCode in ('D68730', 'D68740', 'D68720', 'D69380', 'D69430'))
                      OR (@isNSLTailoring = 0 AND c.UKSupplierCode NOT IN ('D68730', 'D68740', 'D68720', 'D69380', 'D69430')))
              --AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample = 1 then 1 else 0 end) = @isSampleOrder) )
              
              AND ((@isSampleOrder = -1)
	              OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	              OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	              OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	              OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	              OR (@isSampleOrder = 4 AND (s.IsMockShopSample=1 OR (s.IsPressSample<>1 AND s.IsStudioSample<>1)))
	              OR (@isSampleOrder = 5 AND (s.IsPressSample=1 OR (s.IsMockShopSample<>1 AND s.IsStudioSample<>1)))
	              OR (@isSampleOrder = 6 AND (s.IsStudioSample=1))
              ) 
              AND (@mockShopDNNoFrom IS NULL 
                    OR EXISTS(SELECT DCNoteNo 
                                FROM MockShopDCNoteShipment AS ms
                                    INNER JOIN MockShopDCNote AS m ON ms.DCNoteId = m.DCNoteId 
                                WHERE ms.ShipmentId=i.ShipmentId
		                                AND m.DCNoteNo BETWEEN @mockShopDNNoFrom AND @mockShopDNNoTo))
                                    AND (@supplierInvoiceNo IS NULL OR i.SupplierInvoiceNo LIKE '%' + @supplierInvoiceNo + '%')
          ]]>
        </commandText>
        <parameters>
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId"  name="@handlingOfficeId" type="int" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="departmentId" name="@departmentId" type="int" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="designSourceList" name="@designSourceList" type="ArrayInt" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
          <param key="isNSLTailoring" name="@isNSLTailoring" type="int" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="mockShopDNNoFrom" name="@mockShopDNNoFrom" type="varchar" direction="Input" />
          <param key="mockshopDNNoTo" name="@mockShopDNNoTo" type="varchar" direction="Input" />
          <param key="supplierInvoiceNo" name="@supplierInvoiceNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="getAccrualSalesSummary_ToBeRemoved" type="Text">
        <commandText>

          SELECT SUM(ROUND(TotalShippedAmt * er.ExchangeRate / ber.ExchangeRate,2)),
          SUM(ROUND(SalesCommission * er.ExchangeRate / ber.ExchangeRate,2)) from CutoffSales cos
          INNER JOIN ExchangeRate er on er.CurrencyId = cos.SellCurrencyId AND er.ExchangeRateTypeId = 1 AND isnull(cos.ActualAtWarehouseDate, cos.ILSActualAtWarehouseDate) Between er.EffectiveDateFrom AND er.effectivedateto
          INNER JOIN ExchangeRate ber on ber.CurrencyId = @baseCurrencyId AND ber.ExchangeRateTypeId = 1 AND isnull(cos.ActualAtWarehouseDate, cos.ILSActualAtWarehouseDate) Between ber.EffectiveDateFrom AND ber.effectivedateto
          WHERE
          OfficeId @officeIdList
          AND FiscalYear = @budgetYear AND Period = @period
          AND IsAccrual = 1
        </commandText>
        <parameters>
          <param key="budgetYear" name="@budgetYear" type="int" direction="Input" />
          <param key="period" name="@period" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ShipmentCommissionReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="CustomerReceiptReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getCustomerReceiptReportByCriteria" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @CurrentFiscalYear int 
			DECLARE @CurrentFiscalPeriod int
			SELECT @CurrentFiscalYear = BudgetYear, @CurrentFiscalPeriod = Period 
				FROM nsldb..AccountFinancialCalender 
				WHERE getdate() BETWEEN StartDate AND EndDate AND AppId=13


			SELECT FiscalYear=fc.BudgetYear, fc.Period, fc.StartDate, fc.EndDate, r.ExchangeRateTypeId, r.CurrencyId, r.ExchangeRate, BaseExchangeRate=br.ExchangeRate
				INTO #PeriodExchangeRate
				FROM nsldb..AccountFinancialCalender AS fc 

					INNER JOIN exchangeRate AS br ON fc.EndDate between br.EffectiveDateFrom and br.EffectiveDateTo and br.currencyId=@BaseCurrencyId and fc.appid=13 and fc.status = 1
					INNER JOIN exchangeRate AS r ON br.EffectiveDateTo=r.EffectiveDateTo and br.ExchangeRateTypeId=r.ExchangeRateTypeId and br.status=1 and r.status=1

		  SELECT x.*,
                c.ContractId, c.OfficeId, c.SeasonId, c.ProductId, s.VendorId, c.PackingUnitId, c.CustomerId, c.TradingAgencyId,
				c.ContractNo, s.DeliveryNo, s.TotalShippedQty,
                i.SequenceNo, i.SupplierInvoiceNo, i.InvoiceDate,
				cu.CustomerCode, cu.CustomerDesc,
				p.ItemNo,
				TradingAgencyName = ta.ShortName,
				OfficeCode = o.OfficeCode,
				SeasonCode = se.Code,
				ProductTeamCode = pt.Code,
				PackingUnitDesc = pu.PackingUnitDesc,
				VendorName = v.Name,
				CurrencyCode = cy.CurrencyCode,
				BaseCurrencyCode = bc.CurrencyCode,
				InvoiceNo = CONCAT(STUFF(100000+i.InvoiceSeq,1,1,i.InvoicePrefix+'/'),'/',i.InvoiceYear, (CASE WHEN DateType=2 THEN 'C' ELSE '' END)),
				InvExRate = ir.ExchangeRate, 
				BaseInvExRate = ir.BaseExchangeRate, 
				ExchangeRate = rr.ExchangeRate, 
				BaseExchangeRate = rr.BaseExchangeRate,
				BaseReceiveAmount = (case when x.CurrencyId=@BaseCurrencyId then ReceiveAmount else ROUND(ReceiveAmount * rr.ExchangeRate / rr.BaseExchangeRate,2) end),
				BaseSalesAmount = (case when x.CurrencyId=@BaseCurrencyId then SalesAmount else ROUND(SalesAmount * ir.ExchangeRate / ir.BaseExchangeRate,2) end)
			FROM ( 
				SELECT dt.DateType, iv.ShipmentId, CurrencyId=sh.SellCurrencyId, 
					ReceiveRefNo  = (case DateType when 1 then iv.ArRefNo when 2 then iv.NSLCommissionRefNo end),
					ReceiveDate   = (case DateType when 1 then iv.ARDate when 2 then iv.NSLCommissionSettlementDate end),
					SalesAmount   = (case DateType when 1 then sh.TotalShippedAmt when 2 then iv.NSLCommissionAmt end),
					ReceiveAmount = (case DateType when 1 then iv.ARAmt when 2 then iv.NSLCommissionSettlementAmt end),
					InvFiscalYear = (CASE WHEN @versionId = 0 THEN MAX(ip.BudgetYear)
										ELSE COALESCE(MAX(case when (l.SplitShipmentId = 0 OR l.SupplierInvoiceNo = iv.SupplierInvoiceNo) AND l.SunInterfaceTypeId = 3 AND l.CategoryId IN (1, 4) AND l.QueueId <> -1 then l.SunInterfaceLogId*10000.+l.FiscalYear end)%10000, MAX(co.FiscalYear), @CurrentFiscalYear) 
										END),
					InvFiscalPeriod = (CASE WHEN @versionId = 0 THEN MAX(ip.Period) 
										ELSE COALESCE(MAX(case when (l.SplitShipmentId = 0 OR l.SupplierInvoiceNo = iv.SupplierInvoiceNo) AND l.SunInterfaceTypeId = 3 AND l.CategoryId IN (1, 4) AND l.QueueId <> -1 then l.SunInterfaceLogId*100.+l.Period end)%100, MAX(co.Period), @CurrentFiscalPeriod) 
										END),
					RcpFiscalYear   = (CASE WHEN @versionId = 0 THEN MAX(rp.BudgetYear)
										ELSE ISNULL(MAX(case when ((dt.DateType=1 AND l.SUNInterfaceTypeId=4) OR (dt.DateTYpe=2 AND l.SUNInterfaceTypeId=29)) then l.SunInterfaceLogId*10000.+l.FiscalYear end)%10000, MAX(rp.BudgetYear)) 
										END),
					RcpFiscalPeriod = (CASE WHEN @versionId = 0 THEN MAX(rp.Period)
										ELSE ISNULL(MAX(case when ((dt.DateType=1 AND l.SUNInterfaceTypeId=4) OR (dt.DateTYpe=2 AND l.SUNInterfaceTypeId=29)) then l.SunInterfaceLogId*100.+l.Period end)%100, MAX(rp.Period)) 
										END)
				FROM Invoice as iv
					INNER JOIN Shipment as sh WITH (NOLOCK) ON sh.ShipmentId=iv.ShipmentId
					LEFT  JOIN CutoffSales as co WITH (NOLOCK) ON co.ShipmentId=iv.ShipmentId
					INNER JOIN (SELECT DateType=1, ReceiptDate='Sales' UNION SELECT DateType=2, ReceiptDate='Commission') as dt ON (@DateType=-1 OR @DateType=dt.DateType)
					INNER JOIN NSLDB..AccountFinancialCalender rp WITH (NOLOCK) ON rp.AppId = 13 AND ((dt.DateType=1 AND iv.ARDate between rp.StartDate and rp.EndDate) OR (dt.DateTYpe=2 AND iv.NSLCommissionSettlementDate between rp.StartDate and rp.EndDate))
					INNER JOIN NSLDB..AccountFinancialCalender ip WITH (NOLOCK) ON ip.AppId = 13 AND iv.InvoiceDate between ip.StartDate and ip.EndDate 
					LEFT JOIN SunInterfaceLog l WITH (NOLOCK) ON l.ShipmentId = iv.ShipmentId AND @versionId = 1
				WHERE (@FiscalYear IS NULL OR (co.InvoiceDate IS NOT NULL AND co.FiscalYear = @FiscalYear AND co.Period BETWEEN @PeriodFrom AND @PeriodTo))
					AND ((@ReceiptDateFrom IS NULL AND @ReceiptDateTo IS NULL) 
							OR (dt.DateType=1 AND iv.ARDate BETWEEN @receiptDateFrom AND @receiptDateTo) 
							OR (dt.DateType=2 AND iv.NSLCommissionSettlementDate BETWEEN @receiptDateFrom AND @receiptDateTo))
				GROUP BY dt.DateType, iv.ShipmentId, sh.SellCurrencyId,	iv.ARDate, iv.ArRefNo, iv.ARAmt, sh.TotalShippedAmt,
						iv.NSLCommissionSettlementDate, iv.NSLCommissionRefNo, iv.NSLCommissionAmt,iv.NSLCommissionSettlementAmt
				) as x
				INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId=x.ShipmentId AND s.WorkflowStatusId = 8 AND s.Status = 1 
				INNER JOIN Invoice AS i WITH (NOLOCK) ON s.ShipmentId = i.ShipmentId AND x.ReceiveDate IS NOT NULL AND i.Status = 1
				INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId
				INNER JOIN #PeriodExchangeRate as ir on (ir.currencyId=x.CurrencyId and ir.ExchangeRateTypeId=1 and (ir.FiscalYear=x.InvFiscalYear and ir.Period=x.InvFiscalPeriod))
				INNER JOIN #PeriodExchangeRate as rr on (rr.currencyId=x.CurrencyId and rr.ExchangeRateTypeId=2 and (rr.FiscalYear=x.RcpFiscalYear and rr.Period=x.RcpFiscalPeriod))
				INNER JOIN Currency as cy WITH (NOLOCK) ON cy.CurrencyId = x.CurrencyId
				INNER JOIN Currency as bc WITH (NOLOCK) ON bc.CurrencyId=@BaseCurrencyId
				INNER JOIN Office as o WITH (NOLOCK) ON o.OfficeId = c.OfficeId
				INNER JOIN NSLDB..Season as se WITH (NOLOCK) ON se.SeasonId = c.SeasonId
				INNER JOIN NSLIndustry..Vendor as v WITH (NOLOCK) ON v.VendorId = s.VendorId
				INNER JOIN PackingUnit as pu WITH (NOLOCK) ON pu.PackingUnitId = c.PackingUnitId
				INNER JOIN Customer as cu WITH (NOLOCK) ON cu.CustomerId = c.CustomerId
				INNER JOIN TradingAgency AS ta WITH (NOLOCK) ON ta.TradingAgencyId = c.TradingAgencyId
				INNER JOIN product AS p WITH (NOLOCK) ON p.ProductId = c.ProductId
				INNER JOIN (SELECT Distinct ProductTeamId=o.officeStructureId, DeptId=o.ParentId, o.Code, o.Description
								FROM NSLDB..UserSeasonOfficeStructure AS u WITH (NOLOCK) 
									INNER JOIN NSLDB..OfficeStructure AS o WITH (NOLOCK) on (o.ParentId=u.OfficeStructureId or o.OfficeStructureId=u.OfficeStructureId) and o.officeStructureTypeId=50
								WHERE u.Status=1 AND o.Status=1
									AND u.UserId = @UserId
							) AS pt ON pt.ProductTeamId=c.ProductTeamId
			WHERE c.Status = 1 
				AND c.OfficeId @officeIdList
				AND s.SellCurrencyId @currencyIdList
				AND (@receiveRefCode is NULL or @receiveRefCode = x.ReceiveRefNo)
				AND s.TermOfPurchaseId @purchaseTermIdList
				AND s.PaymentTermId @paymentTermIdList
				AND c.SeasonId @seasonIdList
				AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
				AND ((@productTeamId = -1 or c.ProductTeamId = @productTeamId))
				AND c.CustomerId @customerIdList                                                     
				AND c.TradingAgencyId @tradingAgencyIdList          
				AND (@vendorId = -1 OR s.VendorId = @vendorId)
				AND ((@sampleType = -1)
					OR (@sampleType = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
					OR (@sampleType = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1)))
				AND (pt.DeptId @departmentIdList)
			ORDER BY InvoiceNo, SequenceNo
        ]]>
        </commandText>
        <parameters>
          <param key="receiptDateFrom" name="@receiptDateFrom" type="DateTime" direction="Input" />
          <param key="receiptDateTo" name="@receiptDateTo" type="DateTime" direction="Input" />
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="currencyIdList" name="@currencyIdList" type="ArrayInt" direction="Input" />
          <param key="receiveRefCode" name="@receiveRefCode" type="varchar" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="seasonIdList" name="@seasonIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamId" name="@productTeamId" type="Int" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="purchaseTermIdList" name="@purchaseTermIdList" type="ArrayInt" direction="Input" />
          <param key="paymentTermIdList" name="@paymentTermIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyIdList" name="@tradingAgencyIdList" type="ArrayInt" direction="Input" />
          <param key="dateType" name="@dateType" type="int" direction="Input" />
          <param key="sampleType" name="@sampleType" type="int" direction="Input" />
          <param key="userId" name="@userId" type="int" direction="Input" />
          <param key="versionId" name="@versionId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
  </dataSetAdapter>


  <dataSetAdapter name="AccountReportApt" populateCommands="false">

    <selectCommand>
      <dataCommand name="getSupplierPaymentByCriteria" type="Text">
        <commandText>
          <![CDATA[

          SELECT 
          ShipmentId, ContractId, ContractNo, DeliveryNo, SplitSuffix,
          x.InvoicePrefix, InvoiceSeq, InvoiceYear, InvoiceDate, SequenceNo,
	        SupplierInvoiceNo, TotalShippedQty,
	        PaymentRefNo, PaymentDate, 

	        PaymentAmount = x.PurchaseAmount - round(QACommissionPercent * PurchaseAmount / 100, 2) - round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) -  (LabTestIncome * TotalShippedQty) , 
          CurrencyCode = (select CurrencyCode from Currency as cc where cc.CurrencyId=BuyCurrencyId),
	        ExchangeRate,

	        BaseAmount = ROUND(( x.PurchaseAmount - round(QACommissionPercent * PurchaseAmount / 100, 2) - round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) -  (LabTestIncome * TotalShippedQty)) * ExchangeRate / BaseExchangeRate, 2)  ,
          BaseCurrencyCode = (select CurrencyCode from Currency as bc where bc.CurrencyId=@BaseCurrencyId),
	        BaseExchangeRate,

          x.PurchaseAmount,
          PurchaseBaseAmount = ROUND(x.PurchaseAmount * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          QACommissionPercent,
	        QACommissionAmount = round(QACommissionPercent * PurchaseAmount / 100, 2),
	        QACommissionBaseAmount = round(round(QACommissionPercent * PurchaseAmount / 100, 2) * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          VendorPaymentDiscountPercent,
      	  VendorPaymentDiscountAmount = round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2),
	        VendorPaymentDiscountBaseAmount = round(round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          LabtestIncomeAmount = (LabTestIncome * TotalShippedQty),
          LabTestIncomeBaseAmount = round(LabTestIncome * TotalShippedQty * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),
          
          TradingAgencyName = (select ShortName from TradingAgency AS ta where ta.TradingAgencyId = x.TradingAgencyId ),
          OfficeCode = (select OfficeCode from Office as o where o.OfficeId = x.OfficeId),
          SeasonCode = (SELECT Code FROM NSLDB..Season as se WHERE se.SeasonId = x.SeasonId),
          ProductTeamCode,
          VendorName = (SELECT Name from NSLIndustry..Vendor as v Where v.VendorId = x.VendorId),
          VendorSunAccountCode = (SELECT SunAccountCode from NSLIndustry..Vendor as v Where v.VendorId = x.VendorId),
          PackingUnitDesc = (SELECT PackingUnitDesc FROM PackingUnit as pu where pu.PackingUnitId = x.PackingUnitId),
          cu.CustomerCode, cu.CustomerDesc, cu.CustomerOPSKey,         
          PaymentTermDesc = (SELECT PaymentTermDesc FROM PaymentTerm WHERE PaymentTermId = x.PaymentTermId),
          ShippingDocReceiptDate, ShippingDocCheckedOn, AccountDocReceiptDate, DocReviewedOn, PurchaseInterfacedDate,
          IsChinaGBTestRequired, GBTestResult, GBTestFlagMarkedOn, GBTestFlagRemovedOn, GBTestResultRecordedOn
    FROM
      (
         SELECT
            s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo, SplitSuffix = '',
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SequenceNo,
      	    i.SupplierInvoiceNo, s.TotalShippedQty,
	          PaymentRefNo = i.APRefNo, PaymentDate = i.APDate, PaymentAmount = i.APAmt,
	          ExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                      WHERE ExchangerateTypeId=2 and CurrencyId=s.BuyCurrencyId
					                        AND (i.APDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                      ORDER BY EffectiveTypeId DESC),
	          BaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                          WHERE ExchangerateTypeId=2 and CurrencyId=@BaseCurrencyId
					                            AND (i.APDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                          ORDER BY EffectiveTypeId DESC),
            PurchaseAmount = s.TotalShippedSupplierGmtAmtAfterDiscount,
	          PurchaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                              WHERE ExchangerateTypeId=2 and CurrencyId=s.BuyCurrencyId
					                                AND (i.InvoiceDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                              ORDER BY EffectiveTypeId DESC),
	          PurchaseBaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                                  WHERE ExchangerateTypeId=2 and CurrencyId=@BaseCurrencyId
					                                    AND (i.InvoiceDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                                  ORDER BY EffectiveTypeId DESC),
            s.QACommissionPercent,
            s.VendorPaymentDiscountPercent,
	          s.BuyCurrencyId, s.VendorId, 
	          c.TradingAgencyId, c.OfficeId, c.SeasonId, c.ProductTeamId, c.PackingUnitId, c.CustomerId,
            ProductTeamCode = os.Code,
            s.LabTestIncome,
            s.PaymentTermId, i.ShippingDocReceiptDate, i.ShippingDocCheckedOn, i.AccountDocReceiptDate, s.DocReviewedOn,
            PurchaseInterfacedDate = ( SELECT Min(sq.CompletedTime )  FROM SUNInterfaceLog AS si WITH (NOLOCK) 
										INNER JOIN SUNInterfaceQueue AS sq WITH (NOLOCK) ON si.QueueId = sq.QueueId
										WHERE si.ShipmentId = s.ShipmentId AND si.SplitShipmentId = 0
									AND si.SUNInterfaceTypeId = 3 
									AND si.CategoryId IN ( 1, 4 )),
            s.IsChinaGBTestRequired, 
            GBTestResult = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
                  (SELECT TOP 1 TestResult FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                  ELSE NULL END),
            [GBTestFlagMarkedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
				        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : FALSE -> TRUE'),
		        [GBTestFlagRemovedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
						        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : TRUE -> FALSE'),
            GBTestResultRecordedOn = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
               (SELECT TOP 1 CreatedOn FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                    ELSE NULL END)
          FROM
            Contract AS c
            INNER JOIN Shipment AS s ON s.ContractId = c.ContractId AND s.WorkflowStatusId = 8 AND s.Status = 1
            INNER JOIN Invoice AS i ON s.ShipmentId = i.ShipmentId AND (i.APDate IS NOT NULL) AND i.Status = 1
            LEFT JOIN CutOffSales AS cos ON cos.ShipmentId = s.ShipmentId
            INNER JOIN NSLDB..OfficeStructure as os ON os.OfficeStructureId = c.ProductTeamId AND OfficeStructureTypeId=50 and os.Status=1 
                --AND (@departmentId = -1 OR ParentId = @departmentId)
                AND (ParentId @departmentIdList)
          WHERE  c.Status = 1 AND not (s.SplitCount>0 and s.IsVirtualSetSplit<>1)
            AND (@paymentDateFrom IS NULL OR i.APDate >= @paymentDateFrom)
            AND (@paymentDateTo IS NULL OR i.APDate <= @paymentDateTo)
            AND (@fiscalYear IS NULL OR (cos.InvoiceDate IS NOT NULL AND cos.FiscalYear = @fiscalYear AND cos.Period BETWEEN @periodFrom AND @periodTo))
            AND s.BuyCurrencyId @currencyIdList
            AND (@paymentRefCode is NULL or @paymentRefCode =i.APRefNo)
            AND s.TermOfPurchaseId @purchaseTermIdList
            AND s.PaymentTermId @paymentTermIdList
            AND c.SeasonId @seasonIdList
            AND c.OfficeId @officeIdList
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
            -- AND (@productTeamId is NULL or c.ProductTeamId = @productTeamId)
            AND c.ProductTeamId @productTeamIdList
            AND c.CustomerId @customerIdList
            AND c.TradingAgencyId @tradingAgencyIdList
            AND (@vendorId = -1 OR s.VendorId = @vendorId )
        UNION

        (
         SELECT
            s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo, ss.SplitSuffix,
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SequenceNo,
	          ss.SupplierInvoiceNo,  ss.TotalShippedQty,
            PaymentRefNo = ss.APRefNo, PaymentDate = ss.APDate, PaymentAmount = ss.APAmt,
	          ExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                      WHERE ExchangerateTypeId=2 and CurrencyId=ss.BuyCurrencyId
					                        AND (ss.APDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                      ORDER BY EffectiveTypeId DESC),
	          BaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                      WHERE ExchangerateTypeId=2 and CurrencyId=@BaseCurrencyId
					                        AND (ss.APDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                      ORDER BY EffectiveTypeId DESC),
            PurchaseAmount = ss.TotalShippedSupplierGmtAmtAfterDiscount,
	          PurchaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                              WHERE ExchangerateTypeId=2 and CurrencyId=ss.BuyCurrencyId
					                                AND (i.InvoiceDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                              ORDER BY EffectiveTypeId DESC),
	          PurchaseBaseExchangeRate = (SELECT top 1 ExchangeRate FROM ExchangeRate 
				                                  WHERE ExchangerateTypeId=2 and CurrencyId=@BaseCurrencyId
					                                    AND (i.InvoiceDate BETWEEN EffectiveDateFrom and EffectiveDateTo or EffectiveTypeId=0)
				                                  ORDER BY EffectiveTypeId DESC),
            ss.QACommissionPercent,
            ss.VendorPaymentDiscountPercent,
	          ss.BuyCurrencyId, ss.VendorId, 
	          c.TradingAgencyId, c.OfficeId, c.SeasonId, c.ProductTeamId, c.PackingUnitId, c.CustomerId,
            ProductTeamCode = os.Code,
            ss.LabTestIncome,
            ss.PaymentTermId, ss.ShippingDocReceiptDate, ss.ShippingDocCheckedOn, ss.AccountDocReceiptDate, ss.DocReviewedOn,
            PurchaseInterfacedDate =  ( SELECT Min(sq.CompletedTime )  FROM SUNInterfaceLog AS si WITH (NOLOCK) 
										INNER JOIN SUNInterfaceQueue AS sq WITH (NOLOCK) ON si.QueueId = sq.QueueId
										WHERE si.ShipmentId = s.ShipmentId and si.SplitShipmentId = ss.SplitShipmentId
									AND si.SUNInterfaceTypeId = 3 
									AND si.CategoryId IN ( 1, 4 )),
            s.IsChinaGBTestRequired, 
            GBTestResult = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
                  (SELECT TOP 1 TestResult FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                  ELSE NULL END),
            [GBTestFlagMarkedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
				        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : FALSE -> TRUE'),
		        [GBTestFlagRemovedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
						        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : TRUE -> FALSE'),
            GBTestResultRecordedOn = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
               (SELECT TOP 1 CreatedOn FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                    ELSE NULL END)
          FROM
            Contract AS c
            INNER JOIN Shipment AS s ON s.ContractId = c.ContractId AND s.WorkflowStatusId = 8 AND s.Status = 1
            INNER JOIN Invoice AS i ON s.ShipmentId = i.ShipmentId AND i.Status = 1
	          INNER JOIN SplitShipment AS ss ON ss.ShipmentId=s.ShipmentId AND ss.Status=1 AND (ss.APDate IS NOT NULL) 
            LEFT JOIN CutOffSales AS cos ON cos.ShipmentId = s.ShipmentId
            INNER JOIN NSLDB..OfficeStructure as os ON os.OfficeStructureId = c.ProductTeamId and OfficeStructureTypeId=50 and os.Status=1 
                -- AND (@departmentId = -1 OR ParentId = @departmentId)
                AND (ParentId @departmentIdList)
          WHERE  c.Status = 1 AND (s.SplitCount>0 and s.IsVirtualSetSplit<>1)
            AND (@paymentDateFrom IS NULL OR ss.APDate >= @paymentDateFrom)
            AND (@paymentDateTo IS NULL OR ss.APDate <= @paymentDateTo)
            AND (@fiscalYear IS NULL OR (cos.InvoiceDate IS NOT NULL AND cos.FiscalYear = @fiscalYear AND cos.Period BETWEEN @periodFrom AND @periodTo))
            AND ss.BuyCurrencyId @currencyIdList
            AND (@paymentRefCode is NULL or @paymentRefCode =ss.APRefNo)
            AND s.TermOfPurchaseId @purchaseTermIdList
            AND ss.PaymentTermId @paymentTermIdList
            AND c.SeasonId @seasonIdList
            AND c.OfficeId @officeIdList
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
            -- AND (@productTeamId is NULL or c.ProductTeamId = @productTeamId)
            AND c.ProductTeamId @productTeamIdList
            AND c.CustomerId @customerIdList
            AND c.TradingAgencyId @tradingAgencyIdList
            AND (@vendorId = -1 OR ss.VendorId = @vendorId)
        )
      ) as x
      INNER JOIN Customer AS cu ON cu.CustomerId = x.CustomerId


        ]]>
        </commandText>
        <parameters>
          <param key="paymentDateFrom" name="@paymentDateFrom" type="DateTime" direction="Input" />
          <param key="paymentDateTo" name="@paymentDateTo" type="DateTime" direction="Input" />
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="currencyIdList" name="@currencyIdList" type="ArrayInt" direction="Input" />
          <param key="paymentRefCode" name="@paymentRefCode" type="varchar" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="seasonIdList" name="@seasonIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamIdList" name="@productTeamIdList" type="ArrayInt" direction="Input" />
          <param key="purchaseTermIdList" name="@purchaseTermIdList" type="ArrayInt" direction="Input" />
          <param key="paymentTermIdList" name="@paymentTermIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyIdList" name="@tradingAgencyIdList" type="ArrayInt" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getSupplierPaymentByCriteria_Epicor" type="Text">
        <commandText>
          <![CDATA[
          SELECT 
          ShipmentId, ContractId, ContractNo, DeliveryNo, SplitSuffix,
          x.InvoicePrefix, InvoiceSeq, InvoiceYear, InvoiceDate, SequenceNo,
	        SupplierInvoiceNo, TotalShippedQty,
	        PaymentRefNo, PaymentDate, 

	        PaymentAmount = x.PurchaseAmount - round(QACommissionPercent * PurchaseAmount / 100, 2) - round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) -  (LabTestIncome * TotalShippedQty) , 
          CurrencyCode = (select CurrencyCode from Currency as cc where cc.CurrencyId=BuyCurrencyId),
	        ExchangeRate,

	        BaseAmount = ROUND(( x.PurchaseAmount - round(QACommissionPercent * PurchaseAmount / 100, 2) - round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) -  (LabTestIncome * TotalShippedQty)) * ExchangeRate / BaseExchangeRate, 2)  ,
          BaseCurrencyCode = (select CurrencyCode from Currency as bc where bc.CurrencyId=@BaseCurrencyId),
	        BaseExchangeRate,

          x.PurchaseAmount,
          PurchaseBaseAmount = ROUND(x.PurchaseAmount * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          QACommissionPercent,
	        QACommissionAmount = round(QACommissionPercent * PurchaseAmount / 100, 2),
	        QACommissionBaseAmount = round(round(QACommissionPercent * PurchaseAmount / 100, 2) * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          VendorPaymentDiscountPercent,
      	  VendorPaymentDiscountAmount = round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2),
	        VendorPaymentDiscountBaseAmount = round(round(VendorPaymentDiscountPercent * PurchaseAmount / 100, 2) * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),

          LabtestIncomeAmount = (LabTestIncome * TotalShippedQty),
          LabTestIncomeBaseAmount = round(LabTestIncome * TotalShippedQty * PurchaseExchangeRate / PurchaseBaseExchangeRate, 2),
          
          TradingAgencyName = (select ShortName from TradingAgency AS ta where ta.TradingAgencyId = x.TradingAgencyId ),
          OfficeCode = (select OfficeCode from Office as o where o.OfficeId = x.OfficeId),
          SeasonCode = (SELECT Code FROM NSLDB..Season as se WHERE se.SeasonId = x.SeasonId),
          ProductTeamCode,
          VendorName = (SELECT Name from NSLIndustry..Vendor as v Where v.VendorId = x.VendorId),
          VendorSunAccountCode = (SELECT EpicorSupplierId from NSLIndustry..Vendor as v Where v.VendorId = x.VendorId),
          PackingUnitDesc = (SELECT PackingUnitDesc FROM PackingUnit as pu where pu.PackingUnitId = x.PackingUnitId),
          cu.CustomerCode, cu.CustomerDesc, cu.CustomerOPSKey,         
          PaymentTermDesc = (SELECT PaymentTermDesc FROM PaymentTerm WHERE PaymentTermId = x.PaymentTermId),
          ShippingDocReceiptDate, ShippingDocCheckedOn, AccountDocReceiptDate, DocReviewedOn, PurchaseInterfacedDate,
          CAST(0 AS BIT) as IsChinaGBTestRequired, CAST(NULL AS char) as GBTestResult, CAST(NULL AS DATETIME) as GBTestFlagMarkedOn, 
          CAST(NULL AS DATETIME) as GBTestFlagRemovedOn, CAST(NULL AS DATETIME) as GBTestResultRecordedOn
    FROM
      (
         SELECT
            s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo, SplitSuffix = '',
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SequenceNo,
      	    i.SupplierInvoiceNo, s.TotalShippedQty,
	          PaymentRefNo = i.APRefNo, PaymentDate = i.APDate, PaymentAmount = i.APAmt,
	          ExchangeRate = (SELECT ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)               
                  WHERE ex.CurrencyId = s.BuyCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
                   ((sl.FiscalYear IS NULL AND et.FiscalYear IS NULL AND i.APDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  ((sl.FiscalYear IS NOT NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = sl.FiscalYear AND Period = sl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR
                  (sl.FiscalYear IS NULL  AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = et.FiscalYear AND Period = et.FiscalPeriod) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,
	          BaseExchangeRate = (SELECT ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)               
                  WHERE ex.CurrencyId = @BaseCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
                   ((sl.FiscalYear IS NULL AND et.FiscalYear IS NULL AND i.APDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  ((sl.FiscalYear IS NOT NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = sl.FiscalYear AND Period = sl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR
                  (sl.FiscalYear IS NULL  AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = et.FiscalYear AND Period = et.FiscalPeriod) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,
            PurchaseAmount = s.TotalShippedSupplierGmtAmtAfterDiscount,
            PurchaseExchangeRate =  (SELECT TOP 1 ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)            
	              WHERE ex.CurrencyId = s.BuyCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
	              ((psl.FiscalYear IS NULL AND cos.FiscalYear IS NULL AND GETDATE() BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 


	              ((psl.FiscalYear IS NOT NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = psl.FiscalYear AND Period = psl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR
	              (psl.FiscalYear IS NULL  AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = cos.FiscalYear AND Period = cos.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,
                              
	          PurchaseBaseExchangeRate = (SELECT TOP 1 ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)                   
                WHERE ex.CurrencyId = @BaseCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
	              ((psl.FiscalYear IS NULL AND cos.FiscalYear IS NULL AND GETDATE() BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 


	              ((psl.FiscalYear IS NOT NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = psl.FiscalYear AND Period = psl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR
	              (psl.FiscalYear IS NULL  AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = cos.FiscalYear AND Period = cos.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,
            s.QACommissionPercent,
            s.VendorPaymentDiscountPercent,
	          s.BuyCurrencyId, s.VendorId, 
	          c.TradingAgencyId, c.OfficeId, c.SeasonId, c.ProductTeamId, c.PackingUnitId, c.CustomerId,
            ProductTeamCode = os.Code,
            s.LabTestIncome,
            s.PaymentTermId, i.ShippingDocReceiptDate, i.ShippingDocCheckedOn, i.AccountDocReceiptDate, s.DocReviewedOn,            
            PurchaseInterfacedDate = ( SELECT Min(sq.CompletedTime )  FROM SUNInterfaceLog AS si WITH (NOLOCK) 
										INNER JOIN SUNInterfaceQueue AS sq WITH (NOLOCK) ON si.QueueId = sq.QueueId
										WHERE si.ShipmentId = s.ShipmentId and si.SplitShipmentId = 0
									AND si.SUNInterfaceTypeId = 3 
									AND si.CategoryId IN ( 1, 4 ))/*,
            s.IsChinaGBTestRequired, 
            GBTestResult = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
                  (SELECT TOP 1 TestResult FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                  ELSE NULL END),
            [GBTestFlagMarkedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
				        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : FALSE -> TRUE'),
		        [GBTestFlagRemovedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
						        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : TRUE -> FALSE'),
            GBTestResultRecordedOn = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
               (SELECT TOP 1 CreatedOn FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                    ELSE NULL END)*/
          FROM
            Contract AS c
            INNER JOIN Shipment AS s ON s.ContractId = c.ContractId AND s.WorkflowStatusId = 8 AND s.Status = 1
            INNER JOIN Invoice AS i ON s.ShipmentId = i.ShipmentId AND (i.APDate IS NOT NULL) AND i.Status = 1

            INNER JOIN NSLDB..OfficeStructure as os ON os.OfficeStructureId = c.ProductTeamId AND OfficeStructureTypeId=50 and os.Status=1 
                --AND (@departmentId = -1 OR ParentId = @departmentId)
                AND (ParentId @departmentIdList)
            LEFT JOIN CutOffSales AS cos ON cos.ShipmentId = s.ShipmentId
            LEFT JOIN SunInterfaceLog sl WITH (NOLOCK) ON sl.ShipmentId = s.ShipmentId AND sl.SUNInterfaceTypeId = 5 AND sl.QueueId <> -1
	          LEFT JOIN SunInterfaceLog psl WITH (NOLOCK) ON psl.ShipmentId = s.ShipmentId AND psl.SplitShipmentId = 0 AND psl.SUNInterfaceTypeId = 3 AND psl.CategoryId IN (1, 4) AND psl.QueueId <> -1      
			      /*  
			      LEFT JOIN EpicorAPTransaction et WITH (NOLOCK) ON et.DocumentNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) 
                      AND SupplierDocumentNo = i.SupplierInvoiceNo AND et.Status = 1 AND et.DocumentType = 'ISAMPUR'
			      */
			      LEFT JOIN (SELECT DocumentNo, SupplierDocumentNo, 
							FiscalYear = MAX(FiscalYear), FiscalPeriod = MAX(FiscalYear*100+FiscalPeriod)%100 
						FROM EpicorAPTransaction WITH (NOLOCK)
						WHERE Status=1  AND DocumentType = 'ISAMPUR'
						GROUP BY DocumentNo, SupplierDocumentNo
						) AS et
					ON et.DocumentNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) 
                      AND SupplierDocumentNo = i.SupplierInvoiceNo
          WHERE  c.Status = 1 AND not (s.SplitCount>0 and s.IsVirtualSetSplit<>1)
            AND (@paymentDateFrom IS NULL OR i.APDate >= @paymentDateFrom)
            AND (@paymentDateTo IS NULL OR i.APDate <= @paymentDateTo)
            AND (@fiscalYear IS NULL OR (cos.InvoiceDate IS NOT NULL AND cos.FiscalYear = @fiscalYear AND cos.Period BETWEEN @periodFrom AND @periodTo))
            AND s.BuyCurrencyId @currencyIdList
            AND (@paymentRefCode is NULL or @paymentRefCode =i.APRefNo)
            AND s.TermOfPurchaseId @purchaseTermIdList
            AND s.PaymentTermId @paymentTermIdList
            AND c.SeasonId @seasonIdList
            AND c.OfficeId @officeIdList
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
            -- AND (@productTeamId is NULL or c.ProductTeamId = @productTeamId)
            AND c.ProductTeamId @productTeamIdList
            AND c.CustomerId @customerIdList
            AND c.TradingAgencyId @tradingAgencyIdList
            AND (@vendorId = -1 OR s.VendorId = @vendorId )
        UNION

        (
         SELECT
            s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo, ss.SplitSuffix,
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear, i.InvoiceDate, i.SequenceNo,
	          ss.SupplierInvoiceNo,  ss.TotalShippedQty,
            PaymentRefNo = ss.APRefNo, PaymentDate = ss.APDate, PaymentAmount = ss.APAmt,
	          ExchangeRate = (SELECT ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)              
                  WHERE ex.CurrencyId = ss.BuyCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 

                  ((SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = sl.FiscalYear AND Period = sl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
                  OR ((sl.FiscalYear IS NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = et.FiscalYear AND Period = et.FiscalPeriod) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  (sl.FiscalYear IS NULL AND et.FiscalYear IS NULL AND ss.APDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,                                                            
	          BaseExchangeRate = (SELECT ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)                
                  WHERE ex.CurrencyId = @BaseCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 

                  ((SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = sl.FiscalYear AND Period = sl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
                  OR ((sl.FiscalYear IS NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = et.FiscalYear AND Period = et.FiscalPeriod) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  (sl.FiscalYear IS NULL AND et.FiscalYear IS NULL AND ss.APDate BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))) ,            
            PurchaseAmount = ss.TotalShippedSupplierGmtAmtAfterDiscount,
	          PurchaseExchangeRate = (SELECT TOP 1 ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)          
                  WHERE ex.CurrencyId = ss.BuyCurrencyId AND ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
                  ((SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = psl.FiscalYear AND Period = psl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
                  OR ((psl.FiscalYear IS NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = cos.FiscalYear AND Period = cos.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  (psl.FiscalYear IS NULL AND cos.FiscalYear IS NULL AND GETDATE() BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))),
	          PurchaseBaseExchangeRate = (SELECT TOP 1 ex.ExchangeRate FROM ExchangeRate ex WITH (NOLOCK)              
                  WHERE ex.CurrencyId = @BaseCurrencyId AND  ex.ExchangeRateTypeID = 2 AND ex.Status = 1 AND 
                  ((SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = psl.FiscalYear AND Period = psl.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo
                  OR ((psl.FiscalYear IS NULL AND (SELECT EndDate FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Budgetyear = cos.FiscalYear AND Period = cos.Period) BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo) OR 
                  (psl.FiscalYear IS NULL AND cos.FiscalYear IS NULL AND GETDATE() BETWEEN ex.EffectiveDateFrom AND ex.EffectiveDateTo)))),

            ss.QACommissionPercent,
            ss.VendorPaymentDiscountPercent,
	          ss.BuyCurrencyId, ss.VendorId, 
	          c.TradingAgencyId, c.OfficeId, c.SeasonId, c.ProductTeamId, c.PackingUnitId, c.CustomerId,
            ProductTeamCode = os.Code,
            ss.LabTestIncome,
            ss.PaymentTermId, ss.ShippingDocReceiptDate, ss.ShippingDocCheckedOn, ss.AccountDocReceiptDate, ss.DocReviewedOn,
            PurchaseInterfacedDate =  ( SELECT Min(sq.CompletedTime)  FROM SUNInterfaceLog AS si WITH (NOLOCK) 
										INNER JOIN SUNInterfaceQueue AS sq WITH (NOLOCK) ON si.QueueId = sq.QueueId
										WHERE si.ShipmentId = s.ShipmentId and si.SplitShipmentId = ss.SplitShipmentId
									AND si.SUNInterfaceTypeId = 3 
									AND si.CategoryId IN ( 1, 4 ))/*,
            s.IsChinaGBTestRequired, 
            GBTestResult = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
                  (SELECT TOP 1 TestResult FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                  ELSE NULL END),
            [GBTestFlagMarkedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
				        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : FALSE -> TRUE'),
		        [GBTestFlagRemovedOn] = (SELECT MAX( ActionDate) FROM ActionHistory AS e WITH (NOLOCK) WHERE e.ShipmentId = s.ShipmentId
						        AND e.AmendmentTypeId = 67 AND Remark = 'China GB Test Requirement : TRUE -> FALSE'),
            GBTestResultRecordedOn = (CASE WHEN s.IsChinaGBTestRequired = 1 THEN 
               (SELECT TOP 1 CreatedOn FROM NSLDB02.NSS.dbo.ChinaGBTestResult
                    WHERE Status = 1 
                    AND ProductId = c.ProductId AND OfficeId = c.OfficeId
                    AND (VendorId = -1 OR VendorId = s.VendorId)
                    AND (SeasonId = -1 OR SeasonId = c.SeasonId)
                    ORDER BY VendorId DESC, SeasonId Desc, TestCompletionDate Desc)
                    ELSE NULL END)*/
          FROM
            Contract AS c
            INNER JOIN Shipment AS s ON s.ContractId = c.ContractId AND s.WorkflowStatusId = 8 AND s.Status = 1
            INNER JOIN Invoice AS i ON s.ShipmentId = i.ShipmentId AND i.Status = 1
	          INNER JOIN SplitShipment AS ss ON ss.ShipmentId=s.ShipmentId AND ss.Status=1 AND (ss.APDate IS NOT NULL) 

            INNER JOIN NSLDB..OfficeStructure as os ON os.OfficeStructureId = c.ProductTeamId and OfficeStructureTypeId=50 and os.Status=1 
                -- AND (@departmentId = -1 OR ParentId = @departmentId)
                AND (ParentId @departmentIdList)
            LEFT JOIN CutOffSales AS cos ON cos.ShipmentId = s.ShipmentId
            LEFT JOIN SunInterfaceLog sl WITH (NOLOCK) ON sl.ShipmentId = s.ShipmentId AND sl.SplitShipmentId = ss.SplitShipmentId AND sl.SUNInterfaceTypeId = 5 AND sl.QueueId <> -1   
            LEFT JOIN SunInterfaceLog psl WITH (NOLOCK) ON psl.ShipmentId = s.ShipmentId AND psl.SplitShipmentId = ss.SplitShipmentId AND psl.SUNInterfaceTypeId = 3 AND psl.CategoryId IN (1, 4) AND psl.QueueId <> -1        
			      /*
            LEFT JOIN EpicorAPTransaction et WITH (NOLOCK) ON et.DocumentNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) 
                      AND SupplierDocumentNo = ss.SupplierInvoiceNo AND et.Status = 1 AND et.DocumentType = 'ISAMPUR'
			      */					  
			      LEFT JOIN (SELECT DocumentNo, SupplierDocumentNo, 
						FiscalYear = MAX(FiscalYear), FiscalPeriod = MAX(FiscalYear*100+FiscalPeriod)%100 
						FROM EpicorAPTransaction WITH (NOLOCK)
						WHERE Status=1  AND DocumentType = 'ISAMPUR'
						GROUP BY DocumentNo, SupplierDocumentNo
						) AS et
					ON et.DocumentNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear) 
                      AND SupplierDocumentNo = ss.SupplierInvoiceNo
          WHERE  c.Status = 1 AND (s.SplitCount>0 and s.IsVirtualSetSplit<>1)
            AND (@paymentDateFrom IS NULL OR ss.APDate >= @paymentDateFrom)
            AND (@paymentDateTo IS NULL OR ss.APDate <= @paymentDateTo)
            AND (@fiscalYear IS NULL OR (cos.InvoiceDate IS NOT NULL AND cos.FiscalYear = @fiscalYear AND cos.Period BETWEEN @periodFrom AND @periodTo))
            AND ss.BuyCurrencyId @currencyIdList
            AND (@paymentRefCode is NULL or @paymentRefCode =ss.APRefNo)
            AND s.TermOfPurchaseId @purchaseTermIdList
            AND ss.PaymentTermId @paymentTermIdList
            AND c.SeasonId @seasonIdList
            AND c.OfficeId @officeIdList
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
            -- AND (@productTeamId is NULL or c.ProductTeamId = @productTeamId)
            AND c.ProductTeamId @productTeamIdList
            AND c.CustomerId @customerIdList
            AND c.TradingAgencyId @tradingAgencyIdList
            AND (@vendorId = -1 OR ss.VendorId = @vendorId)
        )
      ) as x
      INNER JOIN Customer AS cu ON cu.CustomerId = x.CustomerId

        ]]>
        </commandText>
        <parameters>
          <param key="paymentDateFrom" name="@paymentDateFrom" type="DateTime" direction="Input" />
          <param key="paymentDateTo" name="@paymentDateTo" type="DateTime" direction="Input" />
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="currencyIdList" name="@currencyIdList" type="ArrayInt" direction="Input" />
          <param key="paymentRefCode" name="@paymentRefCode" type="varchar" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="seasonIdList" name="@seasonIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamIdList" name="@productTeamIdList" type="ArrayInt" direction="Input" />
          <param key="purchaseTermIdList" name="@purchaseTermIdList" type="ArrayInt" direction="Input" />
          <param key="paymentTermIdList" name="@paymentTermIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyIdList" name="@tradingAgencyIdList" type="ArrayInt" direction="Input" />
          <param key="departmentIdList" name="@departmentIdList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="getReceivablePayableForecastReport" type="Text">
        <commandText>
          <![CDATA[

         select
            s.ShipmentId,
            StartDate = @ReportDate - 35,
            c.ContractNo,  s.DeliveryNo,
            Split = case when (select count(ss.SplitShipmentId) from SplitShipment as ss where ss.ShipmentId=s.ShipmentId and ss.IsVirtualSetSplit=0 and ss.status=1)>0   then 1 else 0 end,
            i.InvoicePrefix,  i.InvoiceDate, i.ShippingDocReceiptDate,             
            DeliveryDate = isnull(i.InvoiceDate, s.CustomerAtWarehouseDate),
            OfficeName = (select top 1 replace(o.Description,'Office','') from Office as o where o.OfficeId=c.OfficeId and o.Status=1),
            OfficeCode = (select top 1 o.OfficeCode from Office as o where o.OfficeId=c.OfficeId and o.Status=1),
            s.CustomerDestinationId,  CustomerDestination = (select DestinationDesc from CustomerDestination as cd where cd.CustomerDestinationId = s.CustomerDestinationId and cd.Status=1),
            c.CustomerId,  Customer = (select cu.CustomerCode from Customer as cu where cu.CustomerId = c.CustomerId and cu.Status=1),
            TradingAgency = (select ta.ShortName from TradingAgency as ta where ta.TradingAgencyId=c.TradingAgencyId),
            ReceiveAmount = s.TotalShippedAmt,
            PayAmount = case when i.InvoicePrefix is not null 
				                  then s.TotalShippedSupplierGmtAmtAfterDiscount
			                    else ( case when exists (select ip.OrderRefId
						                                          from IlsOrderRef as ior 
						                                          inner join IlsPackingList as ip on ip.OrderRefId=ior.OrderRefId
						                                          where ior.ShipmentId=s.ShipmentId )
				                          then -- there is Packing List info in NSS - calc pay amount with qty in NSS packing list
				                            ( select PayAmount=sum(sd.ReducedSupplierGmtPrice * pl.qty)
					                              from ShipmentDetail as sd 
						                              inner join SizeOption as so on so.SizeOptionId=sd.SizeOptionId
						                              left join ( select ipd.OptionNo, ipd.Qty
								                                        from IlsOrderRef as ior
								                                        --inner join IlsPackingList as ip on ip.OrderRefId=ior.OrderRefId
													                              inner join IlsPackingListDetail as ipd on ipd.OrderRefId=ior.OrderRefId
						 		                                        where ior.ShipmentId=s.ShipmentId
              							                        ) as pl on pl.OptionNo=so.SizeOptionNo
					                              where sd.ShipmentId=s.ShipmentId
				                            )
				                          else -- No Packing list info in NSS - calc pay amount with po_qty in OPS
				                            ( select PayAmount=sum(sd.ReducedSupplierGmtPrice * sd.POQty) 
					                              from ShipmentDetail as sd 
					                              where sd.ShipmentId=s.ShipmentId
				                            )
				                          end
			                         )
			                    end,
            s.BuyCurrencyId, BuyCurrency = (select CurrencyCode from Currency as cy where cy.CurrencyId = s.BuyCurrencyId),
            s.SellCurrencyId, SellCurrency = (select CurrencyCode from Currency as cy where cy.CurrencyId = s.SellCurrencyId),
            s.PaymentTermId, PaymentTerm = (select PaymentTermDesc from PaymentTerm as pt where pt.PaymentTermId=s.PaymentTermId),
            --CustomerGroup = (case when s.CustomerDestinationId not in (4,5,28) and c.CustomerId in (1,2,6) then 'NEXT'
            --                    else case when s.CustomerDestinationId not in (4,5,28) and c.CustomerId=8 then 'CHOICE'
            --                    else 'OTHERS' end end),
            --CustomerSeq = (case when s.CustomerDestinationId not in (4,5,28) and c.CustomerId in (1,2,6)  then 1
            --                    else case when s.CustomerDestinationId not in (4,5,28) and c.CustomerId=8 then 2
            --                    else 3 end end),
            
            CustomerGroup = (case when s.TermOfPurchaseId NOT IN (5) and c.CustomerId in (1,2,6) then 'NEXT'
                                else case when s.TermOfPurchaseId NOT IN (5) and c.CustomerId=8 then 'CHOICE'
                                else 'OTHERS' end end),
            CustomerSeq = (case when s.TermOfPurchaseId NOT IN (5) and c.CustomerId in (1,2,6)  then 1
                                else case when s.TermOfPurchaseId NOT IN (5) and c.CustomerId=8 then 2
                                else 3 end end),
            
            PayType = (case when s.PaymentTermId=2
                          then 'LC' + (case when i.InvoicePrefix is null then '_TO_SHIP' else '_SHIP' end)
                          else 'OA' + (case when i.InvoicePrefix is null
                                          then '_TO_SHIP'
                                          else (case when i.ShippingDocReceiptDate is null then '_NOT_RCV' else '_RCV' end) 
                                          end)
                          end)
        into #temp_shipment
        from
            Shipment as s
            inner join Invoice as i on i.ShipmentId = s.ShipmentId and s.Status=1
            inner join Contract as c on c.ContractId = s.ContractId and c.Status=1
        where
            s.Status=1 and s.WorkflowStatusId <>9	-- not Cancelled
            and convert(int,@ReportDate - isnull(i.InvoiceDate,s.CustomerAtWarehouseDate)) between 1 and 35
             and (c.OfficeId @OfficeIdList)
             and (s.PaymentTermId @paymentTermIdList)
--             and c.OfficeId in (1,2,3)
--             and s.PaymentTermId in (1,2)


        -- Build the Payment temp table
        select 
            ts.StartDate, ts.ContractNo, ts.DeliveryNo, ts.Split,
            ts.InvoicePrefix, ts.InvoiceDate, DeliveryDate = ts.DeliveryDate, ts.ShippingDocReceiptDate,
            ts.OfficeName,  ts.OfficeCode,
            ts.CustomerDestinationId, ts.CustomerDestination,
            ts.CustomerId, ts.Customer, ts.TradingAgency,
            ts.ReceiveAmount,
            ts.PayAmount,
            ts.BuyCurrencyId,  ts.BuyCurrency,
            ts.SellCurrencyId,  ts.SellCurrency,
            PaymentTermId = ts.PaymentTermId,  PaymentTerm = (select PaymentTermDesc from PaymentTerm as pt where pt.PaymentTermId=ts.PaymentTermId),
            ts.CustomerGroup,  ts.CustomerSeq,
            PayType = (case when ts.PaymentTermId=2
                          then 'LC' + (case when ts.InvoicePrefix is null then '_TO_SHIP' else '_SHIP' end)
                          else 'OA' + (case when ts.InvoicePrefix is null
                                          then '_TO_SHIP'
                                          else (case when ts.ShippingDocReceiptDate is null then '_NOT_RCV' else '_RCV' end) end)
                          end)
	      into #temp_Payment 
	      from #temp_shipment as ts
	      where split=0

	      union
	        (
	          select 
                  ts.StartDate,
                  ContractNo = ts.ContractNo+ss.SplitSuffix, ts.DeliveryNo, ts.Split,
                  ts.InvoicePrefix, ts.InvoiceDate, ts.DeliveryDate, ShippingDocReceiptDate = ss.ShippingDocReceiptDate,
                  ts.OfficeName, ts.OfficeCode,
                  ts.CustomerDestinationId, ts.CustomerDestination,
                  ts.CustomerId, ts.Customer, ts.TradingAgency,
                  ts.ReceiveAmount,
    	            PayAmount = ss.TotalShippedSupplierGmtAmtAfterDiscount,
                  BuyCurrencyId = ss.BuyCurrencyId, BuyCurrency = (select CurrencyCode from Currency as cy where cy.CurrencyId = ss.BuyCurrencyId),
                  SellCurrencyId = ss.SellCurrencyId, SellCurrency = (select CurrencyCode from Currency as cy where cy.CurrencyId = ss.SellCurrencyId),
                  PaymentTermId = ss.PaymentTermId, PaymentTerm = (select PaymentTermDesc from PaymentTerm as pt where pt.PaymentTermId=ss.PaymentTermId),
    	            ts.CustomerGroup, ts.CustomerSeq,
                  PayType = (case when ss.PaymentTermId=2
                                then 'LC' + (case when ts.InvoicePrefix is null then '_TO_SHIP' else '_SHIP' end)
                                else 'OA' + (case when ts.InvoicePrefix is null
                                                then '_TO_SHIP'
                                                else (case when ts.ShippingDocReceiptDate is null then '_NOT_RCV' else '_RCV' end) end)
                                end)
	          from #temp_shipment as ts
		        inner join SplitShipment as ss on ss.ShipmentId=ts.ShipmentId and ss.Status=1 and ss.IsVirtualSetSplit=0
	          where split=1
	        )


        -- Detail for report Sales, OA-Purchase and LC-Purchase
	         -- Sales Detail
           select
                  ReportName = 'Sales',
                  RecordType = 'Detail',
                  Office = OfficeName,
                  TradingAgency,
                  GroupTitle = 'Customer',
                  GroupField = CustomerGroup,
                  GroupSequence = CustomerSeq,
                  WeekStartDate = ((StartDate+7) + convert(int,DeliveryDate-(StartDate+7))/14*14),
                  WeekNo = convert(varchar, 1 + convert(int,convert(int,DeliveryDate-(StartDate+7))/14)),
                  Currency = ts.SellCurrency,
                  DeliveryDate,
                  DayTotal = round(sum(ReceiveAmount),0)
           from #temp_shipment as ts
           where DeliveryDate between StartDate+7 and StartDate+35-1 -- Day 8 to Day_35
           group by StartDate, ts.SellCurrency, OfficeName, TradingAgency, CustomerGroup, CustomerSeq ,DeliveryDate
                  
           union all
           
           (  -- Open Account - Purchase Detail
              select
                      ReportName = 'Open AC - Purchase',
                      RecordType = 'Detail',
                      Office = OfficeName,
                      TradingAgency,
                      GroupTitle = 'Status',
                      GroupField = (case PayType 	
				                              when 'OA_NOT_RCV' then 'Open AC-Shipped(supplier invoice not yet received)' 
				                              when 'OA_RCV' then 'Open AC-Shipped(supplier invoice received)' 
				                              when 'OA_TO_SHIP' then  'Open AC-To be shipped' 
				                              when 'LC_SHIP' then 'LC shipped' 
				                              when 'LC_TO_SHIP' then 'LC to be shipped' 
				                              else '' end), 
                      GroupSequence = PaymentTermId,
                      WeekStartDate = ((StartDate+7) + convert(int,DeliveryDate-(StartDate+7))/14*14),
                      WeekNo = convert(varchar, 1 + convert(int,convert(int,DeliveryDate-(StartDate+7))/14)),
                      Currency = tp.BuyCurrency,
                      DeliveryDate,
                      DayTotal = round(sum(PayAmount),0)
              from #temp_payment as tp
              where DeliveryDate between StartDate+7 and StartDate+35-1 -- Day 8 to Day_35
		              and left(PayType,2)='OA'
              group by StartDate, tp.BuyCurrency, OfficeName, TradingAgency, PaymentTermId, PayType ,DeliveryDate
	        )
          
	        union all
          
	        (	 -- LC Purchase Detail
             select
                      ReportName = 'LC - Purchase',
                      RecordType = 'Detail',
                      Office = OfficeName,
                      TradingAgency,
                      GroupTitle = 'Status',
                      GroupField = (case PayType 	
				                              when 'OA_NOT_RCV' then 'Open AC-Shipped(supplier invoice not yet received)' 
				                              when 'OA_RCV' then 'Open AC-Shipped(supplier invoice received)' 
				                              when 'OA_TO_SHIP' then  'Open AC-To be shipped' 
				                              when 'LC_SHIP' then 'LC shipped' 
				                              when 'LC_TO_SHIP' then 'LC to be shipped' 
				                              else '' end), 
                      GroupSequence = PaymentTermId,
                      WeekStartDate = ((StartDate) + convert(int,DeliveryDate-(StartDate))/14*14),
                      WeekNo = convert(varchar, 1 + convert(int,convert(int,DeliveryDate-(StartDate))/14)),
                      Currency = tp.BuyCurrency,
                      DeliveryDate,
                      DayTotal = round(sum(PayAmount),0)
              from #temp_payment as tp
              where DeliveryDate between StartDate and StartDate+28-1 -- Day 1 to Day_28
		              and left(PayType,2)='LC'
               group by StartDate, tp.BuyCurrency, OfficeName, TradingAgency, PaymentTermId, PayType ,DeliveryDate
	        )
          order by ReportName,Office,TradingAgency,GroupSequence,DeliveryDate

      ]]>
        </commandText>
        <parameters>
          <param key="ReportDate" name="@ReportDate" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="paymentTermIdList" name="@paymentTermIdList" type="ArrayInt" direction="Input" />
        </parameters>

      </dataCommand>


      <dataCommand name="getOtherCostSummaryReport_Old" type="Text">
        <commandText>
          <![CDATA[

         
          SELECT DISTINCT
	            i.ShipmentId 
          INTO #temp_SelectedShipment
          FROM invoice AS i with (nolock)
              --INNER JOIN Shipment AS s with (nolock) on s.ShipmentId=i.ShipmentId and s.Status=1
              --INNER JOIN Contract AS c with (nolock) on c.ContractId=s.ContractId and c.Status=1
              --INNER JOIN ShipmentDetail AS sd with (nolock) ON sd.ShipmentId = i.ShipmentId AND sd.Status=1
              --INNER JOIN OtherCost AS oc with (nolock) ON oc.ShipmentDetailId = sd.ShipmentDetailId AND oc.Status = 1
              LEFT JOIN CutoffSales AS cs with (nolock) ON i.ShipmentId=cs.ShipmentId 
              LEFT JOIN NSLDB..AccountFinancialCalender AS ac with (nolock) ON ac.Status=1 AND ac.AppId=9 AND (ac.StartDate<=i.InvoiceUploadDate AND i.InvoiceUploadDate<(ac.EndDate+1)) 
          WHERE i.status=1 
              AND ( -- Period Range
                        ((@InvoiceDateFrom is null and @InvoiceDateTo is null) or (@InvoiceDateFrom<=i.invoicedate and i.InvoiceDate<(@InvoiceDateTo+1)))
	                  --and ((@DeliveryDateFrom is null and @DeliveryDateTo is null) or (select SupplierAtWarehouseDate from shipment with (nolock) where ShipmentId=i.ShipmentId) between @DeliveryDateFrom and @DeliveryDateTo)
	                  and ( (@FiscalYear<0 and @PeriodNoFrom<0 and @PeriodNoTo<0) 
                          or (    (cs.IsAccrual=0 and cs.FiscalYear=@FiscalYear and cs.Period between @PeriodNoFrom and @PeriodNoTo)
		                           or (cs.IsAccrual=1 and isnull(ac.BudgetYear,cs.FiscalYear)=@FiscalYear and isnull(ac.Period,cs.Period) between @PeriodNoFrom and @PeriodNoTo)
		                         )
	                      )
                  )
              AND ( -- Cutoff type
	                     (@GetActual=1  and cs.IsAccrual=0 )
                    or (@GetAccrual=1 and cs.IsAccrual=1 and i.InvoiceDate is null)
                    or (@GetRealized=1 and cs.IsAccrual=1 and i.InvoiceDate is not null)
                    or (@GetNotYetCut=1 and cs.IsAccrual is null)
                  )
                  
        SELECT 
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear,
            InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
            i.InvoiceDate, i.SupplierInvoiceNo,
            c.ContractNo, s.DeliveryNo, 

            OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = c.OfficeId),
            SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
            CoName = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),

            Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = s.VendorId),
            ProductCode = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
            ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),

            s.TotalShippedQty, c.PiecesPerPack,
            Unit = (SELECT PackingUnitOPSKey FROM PAckingUnit WHERE PackingUnitId = c.PackingUnitId),
            SalesAmount             = round(s.TotalShippedAmt                         * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SupplierAmount          = round(s.TotalShippedSupplierGmtAmt              * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SupplierAmountDiscount  = round(s.TotalShippedSupplierGmtAmtAfterDiscount * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
      	    FobAmount               = round(s.TotalShippedNetFOBAmt                   * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
	          UKAmountDiscount        = round(s.TotalShippedAmtAfterDiscount            * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),

            CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
            x.ExchangeRate,
            BaseCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = @BaseCurrencyId),
            x.BaseExchangeRate,
            x.ShipmentId, 
            PackagingCost           = round(x.PackagingCost           * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ImportQuotaCharge       = round(x.ImportQuotaCharge       * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            RepairCost              = round(x.RepairCost              * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            OutsideLabTestCost      = round(x.OutsideLabTestCost      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            OtherFabricCost         = round(x.OtherFabricCost         * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SellingPriceDiscount    = round(x.SellingPriceDiscount    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FactoryPriceDiscount    = round(x.FactoryPriceDiscount    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            WashPrintAndDevelopCost = round(x.WashPrintAndDevelopCost * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FreightCost             = round(x.FreightCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            DutyCost                = round(x.DutyCost                * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            TransportationCost      = round(x.TransportationCost      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FragranceCost           = round(x.FragranceCost           * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ToolingCost             = round(x.ToolingCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            --DesignFee               = round(x.DesignFee               * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            AgencyCommission        = CASE WHEN c.CustomerId = 13 
                                        THEN x.GTCommission 
                                        ELSE round(x.AgencyCommission * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2) 
                                        END,
            iNetActualMarginDiff    = round(x.iNetActualMarginDiff    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FinanceCost             = round(x.FinanceCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            AirFreightCost          = round(x.AirFreightCost          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            KitDevelopment          = round(x.KitDevelopment          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            RepeatDiscount          = round(x.RepeatDiscount          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            DevelopmentSampleCost   = round(x.DevelopmentSampleCost   * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SampleLengthCost        = round(x.SampleLengthCost        * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FreightForBodycare      = round(x.FreightForBodycare      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CourierCostForSample    = round(x.CourierCostForSample    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ForwarderCharge			= round(x.ForwarderCharge		* (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            LicenceCost				= round(x.LicenceCost			* (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2)
            
          FROM 
            (
            Select 
                t.ShipmentId,          
                PackagingCost		        = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 1  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ImportQuotaCharge	      = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 2  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                RepairCost		          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 4  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                OutsideLabTestCost	    = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 5  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                OtherFabricCost		      = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 6  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                SellingPriceDiscount	  = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 7  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FactoryPriceDiscount	  = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 8  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                WashPrintAndDevelopCost	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 9  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FreightCost		          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 10 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                DutyCost		            = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 11 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                TransportationCost	    = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 12 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FragranceCost		        = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 13 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ToolingCost		          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 14 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                --DesignFee		            = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 15 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                AgencyCommission        = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 16 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                iNetActualMarginDiff    = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 17 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FinanceCost             = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 19 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                AirFreightCost          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 20 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                KitDevelopment          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 21 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                RepeatDiscount          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 23 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                DevelopmentSampleCost   = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 24 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                SampleLengthCost        = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 25 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                FreightForBodycare      = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 26 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                CourierCostForSample    = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 27 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                ForwarderCharge			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 35 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                LicenceCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 36 THEN oc.OtherCostAmt ELSE 0 END),0) *sd.ShippedQty),
                GTCommission            = max(s.GTCommissionPercent / 100.0 * s.TotalShippedAmt),
                ExchangeRate            = (select top 1 ExchangeRate from ExchangeRate with (nolock) where ExchangeRateTypeId = 1 AND Status=1 AND CurrencyId = s.SellCurrencyId AND (EffectiveTypeId=0 or (isnull(i.InvoiceDate,s.CustomerAtwarehouseDate) >= EffectiveDateFrom AND isnull(i.InvoiceDate,s.CustomerAtwarehouseDate)<(EffectiveDateTo+1))) order by EffectiveTypeId desc),
                BaseExchangeRate        = (select top 1 ExchangeRate from ExchangeRate with (nolock) where ExchangeRateTypeId = 1 AND Status=1 AND CurrencyId = @BaseCurrencyId AND (EffectiveTypeId=0 or (isnull(i.InvoiceDate,s.CustomerAtwarehouseDate) >=EffectiveDateFrom AND isnull(i.InvoiceDate,s.CustomerAtwarehouseDate)<(EffectiveDateTo+1))) order by EffectiveTypeId desc)
            FROM #temp_SelectedShipment as t
                INNER JOIN Invoice AS i with (nolock) on t.shipmentid=i.shipmentid and i.Status=1
            		INNER JOIN Shipment as s with (nolock) ON s.ShipmentId=t.ShipmentId and s.Status=1
                INNER JOIN ShipmentDetail AS sd with (nolock) ON sd.ShipmentId = t.ShipmentId and sd.Status=1
                LEFT JOIN OtherCost AS oc with (nolock) ON oc.ShipmentDetailId = sd.ShipmentDetailId AND oc.Status = 1
            GROUP BY 
                t.ShipmentId, i.InvoiceDate, s.CustomerAtWarehouseDate, s.SellCurrencyId
            ) as x
      	    INNER JOIN Invoice  AS i with (nolock) ON i.ShipmentId = x.ShipmentId
            INNER JOIN Shipment AS s with (nolock) ON s.ShipmentId = x.ShipmentId and s.Status=1
            INNER JOIN Contract AS c with (nolock) ON c.ContractId = s.ContractId and c.Status=1
       WHERE
            (c.officeid @OfficeIdList)
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR s.SalesForecastSpecialGroupId = @handlingOfficeId)
            AND (c.TradingAgencyId @TradingAgencyIdList)
            AND (s.TermOfPurchaseId @PurchaseTermIdList)
            AND (@CountryOfOriginId=-1 or s.CountryOfOriginId=@CountryOfOriginId)
            AND (@SeasonId = -1 or c.SeasonId = @SeasonId)


  ]]>
        </commandText>
        <parameters>
          <param key="BaseCurrencyId" name="@BaseCurrencyId" type="int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="int" direction="Input" />
          <param key="CountryOfOriginId" name="@CountryOfOriginId" type="Int" direction="Input"/>
          <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input"/>
          <param key="PurchaseTermIdList" name="@PurchaseTermIdList" type="ArrayInt" direction="Input"/>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input"/>
          <param key="PeriodNoFrom" name="@PeriodNoFrom" type="int" direction="Input"/>
          <param key="PeriodNoTo" name="@PeriodNoTo" type="int" direction="Input"/>
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input"/>
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input"/>
          <param key="DeliveryDateFrom" name="@DeliveryDateFrom" type="DateTime" direction="Input"/>
          <param key="DeliveryDateTo" name="@DeliveryDateTo" type="DateTime" direction="Input"/>
          <param key="GetActual" name="@GetActual" type="int" direction="Input"/>
          <param key="GetAccrual" name="@GetAccrual" type="int" direction="Input"/>
          <param key="GetRealized" name="@GetRealized" type="int" direction="Input"/>
          <param key="GetNotYetCut" name="@GetNotYetCut" type="int" direction="Input"/>
          <param key="SeasonId" name="@SeasonId" type="int" direction="Input" />
        </parameters>
      </dataCommand>



      <dataCommand name="getMonthEndSummaryReport" type="Text">
        <commandText>
          <![CDATA[

            Declare @PeriodStart as DateTime
            Declare @PeriodEnd as DateTime
            
            SELECT @PeriodStart=StartDate, @PeriodEnd=EndDate 
                FROM NSLDB..AccountFinancialCalender 
                WHERE BudgetYear=@FiscalYear and Period=@PeriodNo

            SELECT 
                  OfficeId,
                  isAccrual, InvoiceAmt, NonInvoicedAmt, NextPeriodAmt,
                  GroupType = CASE WHEN IsAccrual=1 
                                    THEN 'ALL-ACCRUAL' 
                                    ELSE CASE WHEN OfficeId=1 THEN CASE WHEN TermOfPurchaseId=1 THEN 'FOB' ELSE 'VM' END
		                                          WHEN OfficeId=9 THEN CASE WHEN TradingAgencyId=1 THEN 'FOB' ELSE 'VM' end
		                                          ELSE CASE WHEN TermOfPurchaseId=1 and TradingAgencyId=1 THEN 'FOB' ELSE 'VM' END
		                                          END
                                    END
            INTO #temp_MonthEndSummary
            FROM 
                (
                  ( -- Invoiced Amount
                    SELECT OfficeId, TermOfPurchaseId, TradingAgencyId, IsAccrual, InvoiceAmt=sum(TotalShippedAmtInBaseCurrency), NonInvoicedAmt=0, NextPeriodAmt=0
      	                FROM (  SELECT cs.OfficeId, cs.TermOfPurchaseId, cs.TradingAgencyId, cs.IsAccrual, cs.TotalShippedAmtInBaseCurrency
		                                FROM CutOffSales AS cs
                                        INNER JOIN Shipment AS s on s.ShipmentId = cs.ShipmentId
		                                --WHERE cs.CustomerId IN (1,2,5,6,7) AND cs.CustomerDestinationId NOT IN (4,5,28) 
                                    WHERE cs.CustomerId IN (1,2,5,6,7) AND s.TermOfPurchaseId NOT IN (5)
				                                AND cs.FiscalYear = @FiscalYear AND cs.Period = @PeriodNo 
                                        AND (cs.OfficeId @OfficeIdList)
                                        AND (cs.TermOfPurchaseId @PurchaseTermIdList)
                                        AND (cs.TradingAgencyId @TradingAgencyIdList)
                                        --AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample=1 then 1 else 0 end) = @isSampleOrder))
                                        AND ((@isSampleOrder = -1)
	                                          OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                                          OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                                          OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                                          OR (@isSampleOrder = 4 AND (s.IsMockShopSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 5 AND (s.IsStudioSample=1))
	                                          )
		                            UNION ALL
                                  -- Figure for NSL UK
		                              SELECT 	c.OfficeId,s.TermOfPurchaseId, c.TradingAgencyId, IsAccrual=0 
			                                    ,TotalShippedAmtInBaseCurrency=(s.TotalShippedAmt * i.InvoiceSellExchangeRate / d.ExchangeRate) 
		                                  FROM Invoice i 
			                                    INNER JOIN Shipment s ON i.ShipmentId = s.ShipmentId  AND i.InvoiceDate BETWEEN @PeriodStart AND @PeriodEnd
			                                    INNER JOIN Contract c ON s.ContractId = c.ContractId AND c.OfficeId = 10
			                                    INNER JOIN ExchangeRate d ON d.ExchangeRateTypeId = 1 AND d.CurrencyId = 3 AND i.InvoiceDate BETWEEN d.EffectiveDateFrom AND d.EffectiveDateTo
                                      WHERE
                                          (c.OfficeId @OfficeIdList)
                                          AND (s.TermOfPurchaseId @PurchaseTermIdList)
                                          AND (c.TradingAgencyId @TradingAgencyIdList)
                                          --AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample=1 then 1 else 0 end) = @isSampleOrder))
                                          AND ((@isSampleOrder = -1)
	                                          OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                                          OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                                          OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                                          OR (@isSampleOrder = 4 AND (s.IsMockShopSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 5 AND (s.IsStudioSample=1))
	                                          )
                                          
	                            ) AS c1 
	                      GROUP BY OfficeId, TermOfPurchaseId, TradingAgencyId, IsAccrual
                  ) 
                  
                  UNION ALL
                  -- Current Period Non-Invoiced order amount
                  ( SELECT OfficeId, TermOfPurchaseId, TradingAgencyId, IsAccrual=0, InvoiceAmt=0, NonInvoicedAmt=sum(NonInvoicedAmt), NextPeriodAmt=0
	                      FROM ( SELECT c.OfficeId, s.TermOfPurchaseId, c.TradingAgencyId, NonInvoicedAmt=(s.TotalOrderAmt * e.ExchangeRate / d.ExchangeRate) 
		                              FROM Invoice i 
			                                INNER JOIN Shipment s ON i.ShipmentId = s.ShipmentId AND s.Status = 1  
				                                    --AND s.WorkflowStatusId IN (2,4,6,7) AND s.CustomerDestinationId NOT IN (4,5,28)
                                            AND s.WorkflowStatusId IN (2,4,6,7) AND s.TermOfPurchaseId NOT IN (5)
				                                    AND s.CustomerAtWarehouseDate BETWEEN @PeriodStart AND @PeriodEnd
				                                    AND ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) IS NOT NULL
			                                INNER JOIN Contract c ON s.ContractId = c.ContractId AND c.CustomerId IN (1,2,5,6,7) 
			                                INNER JOIN ExchangeRate e ON e.ExchangeRateTypeId = 1 AND e.CurrencyId = s.SellCurrencyId 
				                                    AND ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN e.EffectiveDateFrom AND e.EffectiveDateTo
			                                INNER JOIN ExchangeRate d ON d.ExchangeRateTypeId = 1 AND d.CurrencyId = 3 
				                                    AND ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN d.EffectiveDateFrom AND d.EffectiveDateTo
                                      WHERE
                                            (c.OfficeId @OfficeIdList)
                                            AND (s.TermOfPurchaseId @PurchaseTermIdList)
                                            AND (c.TradingAgencyId @TradingAgencyIdList)
                                            --AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample=1 then 1 else 0 end) = @isSampleOrder))
                                            AND ((@isSampleOrder = -1)
	                                              OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                                              OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                                              OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                                              OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                                              OR (@isSampleOrder = 4 AND (s.IsMockShopSample<>1 AND s.IsStudioSample<>1))
	                                              OR (@isSampleOrder = 5 AND (s.IsStudioSample=1))
	                                              )
	                          ) AS c2
	                      GROUP BY OfficeId, TermOfPurchaseId, TradingAgencyId
                  ) 
                  
                  UNION ALL
                  -- The Non-Invoiced order will be revised to Next period 
                  ( SELECT OfficeId, TermOfPurchaseId, TradingAgencyId, IsAccrual=0, InvoiceAmt=0, NonInvoicedAmt=0, NextPeriodAmt=sum(NextPeriodAmt)
	                      FROM ( SELECT c.OfficeId, s.TermOfPurchaseId, c.TradingAgencyId,
                                    NextPeriodAmt=(s.TotalOrderAmt * ns.POExchangeRate / ISNULL(d.ExchangeRate,g.ExchangeRate)) 
		                              FROM Invoice i 
			                                INNER JOIN Shipment s ON i.ShipmentId = s.ShipmentId  AND s.Status = 1 
				                                    --AND s.WorkflowStatusId IN (2,4,6,7) AND s.CustomerDestinationId NOT IN (4,5,28)
                                            AND s.WorkflowStatusId IN (2,4,6,7) AND s.TermOfPurchaseId NOT IN (5)
			                                INNER JOIN Contract c ON s.ContractId = c.ContractId AND c.CustomerId IN (1,2,5,6,7) 
			                                INNER JOIN NSLDB02.NSS.dbo.Shipment ns ON s.ShipmentId = ns.ShipmentId 
				                                    AND ISNULL(ns.FirstApprovedCustomerAtWarehouseDate, ns.CustomerAtWarehouseDate) BETWEEN @PeriodStart AND @PeriodEnd
				                                    AND ns.CustomerAtWarehouseDate > @PeriodEnd
                                      INNER JOIN ExchangeRate g ON g.ExchangeRateTypeId = 1 AND g.CurrencyId = 3 AND g.EffectiveTypeId=0
			                                --LEFT  JOIN ExchangeRate e ON e.ExchangeRateTypeId = 1 AND e.CurrencyId = s.SellCurrencyId 
				                              --      AND ns.CustomerAtWarehouseDate BETWEEN e.EffectiveDateFrom AND e.EffectiveDateTo
                                      LEFT  JOIN ExchangeRate d ON d.ExchangeRateTypeId = 1 AND d.CurrencyId = 3 
				                                    AND ns.CustomerAtWarehouseDate BETWEEN d.EffectiveDateFrom AND d.EffectiveDateTo
                                  WHERE
                                      (c.OfficeId @OfficeIdList)
                                      AND (s.TermOfPurchaseId @PurchaseTermIdList)
                                      AND (c.TradingAgencyId @TradingAgencyIdList)
                                      --AND (@isSampleOrder = -1 OR ((case when s.IsMockShopSample=1 or s.IsPressSample=1 then 1 else 0 end) = @isSampleOrder))
                                      AND ((@isSampleOrder = -1)
	                                          OR (@isSampleOrder = 0 AND (s.IsMockShopSample<>1 AND s.IsPressSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 1 AND (s.IsMockShopSample=1 OR s.IsPressSample=1 OR s.IsStudioSample=1))
	                                          OR (@isSampleOrder = 2 AND (s.IsMockShopSample=1))
	                                          OR (@isSampleOrder = 3 AND (s.IsPressSample=1))
	                                          OR (@isSampleOrder = 4 AND (s.IsMockShopSample<>1 AND s.IsStudioSample<>1))
	                                          OR (@isSampleOrder = 5 AND (s.IsStudioSample=1))
	                                          )
		                        ) AS c3
	                      GROUP BY OfficeId, TermOfPurchaseId, TradingAgencyId
                  ) 
                ) AS me
               
        SELECT 
	            t.OfficeId,
	            OfficeName=(SELECT OfficeName=convert(varchar(100),replace(o.Description,'Office','')) FROM Office as o WHERE o.OfficeId=t.OfficeId),
	            g.GroupType,
              g.Sequence,
	            isAccrual = convert(bit,isAccrual),
	            InvoicedAmount = isnull(sum(InvoiceAmt),0),
	            NonInvoicedOrderAmount = isnull(sum(NonInvoicedAmt),0),
	            RevisedToNextPeriodAmount = isnull(sum(NextPeriodAmt),0)
        FROM 
            (SELECT DISTINCT OfficeId FROM #temp_MonthEndSummary) AS t
            LEFT JOIN ( SELECT GroupType='FOB', Sequence=1 
                            UNION Select 'VM', 2 
                            UNION Select 'ALL-ACCRUAL', 3
                       ) AS g ON 1=1
            LEFT JOIN #temp_MonthEndSummary AS x ON x.OfficeId=t.OfficeId and x.GroupType=g.GroupType
            GROUP BY t.OfficeId, g.GroupType, g.Sequence, x.IsAccrual
            ORDER BY t.OfficeId, g.GroupType, g.Sequence, x.IsAccrual
          
       ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input"/>
          <param key="PeriodNo" name="@PeriodNo" type="int" direction="Input"/>
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input"/>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
          <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input"/>
          <param key="PurchaseTermIdList" name="@PurchaseTermIdList" type="ArrayInt" direction="Input"/>
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AccountReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="OtherCostSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getOtherCostSummaryReport" type="Text">
        <commandText>
          <![CDATA[
          
          SELECT DISTINCT
	            i.ShipmentId 
          INTO #temp_SelectedShipment
          FROM invoice AS i with (nolock)
              --INNER JOIN Shipment AS s with (nolock) on s.ShipmentId=i.ShipmentId and s.Status=1
              --INNER JOIN Contract AS c with (nolock) on c.ContractId=s.ContractId and c.Status=1
              --INNER JOIN ShipmentDetail AS sd with (nolock) ON sd.ShipmentId = i.ShipmentId AND sd.Status=1
              --INNER JOIN OtherCost AS oc with (nolock) ON oc.ShipmentDetailId = sd.ShipmentDetailId AND oc.Status = 1
              LEFT JOIN CutoffSales AS cs with (nolock) ON i.ShipmentId=cs.ShipmentId 
              LEFT JOIN NSLDB..AccountFinancialCalender AS ac with (nolock) ON ac.Status=1 AND ac.AppId=9 AND (ac.StartDate<=i.InvoiceUploadDate AND i.InvoiceUploadDate<(ac.EndDate+1)) 
          WHERE i.status=1 
              AND ( -- Period Range
                        ((@InvoiceDateFrom is null and @InvoiceDateTo is null) or (@InvoiceDateFrom<=i.invoicedate and i.InvoiceDate<(@InvoiceDateTo+1)))
	                  --and ((@DeliveryDateFrom is null and @DeliveryDateTo is null) or (select SupplierAtWarehouseDate from shipment with (nolock) where ShipmentId=i.ShipmentId) between @DeliveryDateFrom and @DeliveryDateTo)
	                  and ( (@FiscalYear<0 and @PeriodNoFrom<0 and @PeriodNoTo<0) 
                          or (    (cs.IsAccrual=0 and cs.FiscalYear=@FiscalYear and cs.Period between @PeriodNoFrom and @PeriodNoTo)
		                           or (cs.IsAccrual=1 and isnull(ac.BudgetYear,cs.FiscalYear)=@FiscalYear and isnull(ac.Period,cs.Period) between @PeriodNoFrom and @PeriodNoTo)
		                         )
	                      )
                  )
              AND ( -- Cutoff type
	                     (@GetActual=1  and cs.IsAccrual=0 )
                    or (@GetAccrual=1 and cs.IsAccrual=1 and i.InvoiceDate is null)
                    or (@GetRealized=1 and cs.IsAccrual=1 and i.InvoiceDate is not null)
                    or (@GetNotYetCut=1 and cs.IsAccrual is null)
                  )
                  
        SELECT 
            i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear,
            InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
            i.InvoiceDate, i.SupplierInvoiceNo,
            c.ContractNo, s.DeliveryNo, 

            OfficeCode = (SELECT OfficeCode FROM NSLDB..Office WHERE OfficeId = c.OfficeId),
            SeasonCode = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
            CoName = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = s.CountryOfOriginId),

            Supplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = s.VendorId),
            ProductCode = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
            ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),

            s.TotalShippedQty, c.PiecesPerPack,
            Unit = (SELECT PackingUnitOPSKey FROM PAckingUnit WHERE PackingUnitId = c.PackingUnitId),
            SalesAmount             = round(s.TotalShippedAmt                         * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SupplierAmount          = round(s.TotalShippedSupplierGmtAmt              * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SupplierAmountDiscount  = round(s.TotalShippedSupplierGmtAmtAfterDiscount * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
      	    FobAmount               = round(s.TotalShippedNetFOBAmt                   * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
	          UKAmountDiscount        = round(s.TotalShippedAmtAfterDiscount            * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),

            CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.SellCurrencyId),
            x.ExchangeRate,
            BaseCurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = @BaseCurrencyId),
            x.BaseExchangeRate,
            x.ShipmentId, 
            PackagingCost           = round(x.PackagingCost           * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ImportQuotaCharge       = round(x.ImportQuotaCharge       * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            RepairCost              = round(x.RepairCost              * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            OutsideLabTestCost      = round(x.OutsideLabTestCost      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            OtherFabricCost         = round(x.OtherFabricCost         * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SellingPriceDiscount    = round(x.SellingPriceDiscount    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FactoryPriceDiscount    = round(x.FactoryPriceDiscount    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            WashPrintAndDevelopCost = round(x.WashPrintAndDevelopCost * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FreightCost             = round(x.FreightCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            DutyCost                = round(x.DutyCost                * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            TransportationCost      = round(x.TransportationCost      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FragranceCost           = round(x.FragranceCost           * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ToolingCost             = round(x.ToolingCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            --DesignFee               = round(x.DesignFee               * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            AgencyCommission        = CASE WHEN c.CustomerId = 13 
                                        THEN x.GTCommission 
                                        ELSE round(x.AgencyCommission * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2) 
                                        END,
            iNetActualMarginDiff    = round(x.iNetActualMarginDiff    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FinanceCost             = round(x.FinanceCost             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            AirFreightCost          = round(x.AirFreightCost          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            KitDevelopment          = round(x.KitDevelopment          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FabricLiabProvision     = round(x.FabricLiabProvision     * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            RepeatDiscount          = round(x.RepeatDiscount          * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            DevelopmentSampleCost   = round(x.DevelopmentSampleCost   * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            SampleLengthCost        = round(x.SampleLengthCost        * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            FreightForBodycare      = round(x.FreightForBodycare      * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CourierCostForSample    = round(x.CourierCostForSample    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            MarginDifference        = round(x.MarginDifference        * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            RecoveryHomeAndHard     = round(x.RecoveryHomeAndHard     * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            NTNRecovery             = round(x.NTNRecovery             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CoverForQuenbyFabric    = round(x.CoverForQuenbyFabric    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ClaimRecovery           = round(x.ClaimRecovery           * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            QCCentre				        = round(x.QCCentre				        * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            MailOrderBoxCost		    = round(x.MailOrderBoxCost		    * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ForwarderCharge			    = round(x.ForwarderCharge	    	  * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            LicenceCost				      = round(x.LicenceCost			        * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            TradingAirFreight		    = round(x.tradingAirFreight 		  * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            ClaimsRecovery			    = round(x.ClaimsRecovery    		  * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CoatingCost				      = round(x.CoatingCost     			  * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            Slippage                = round(x.Slippage                * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            QCCenterMyanmar         = round(x.QCCenterMyanmar         * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CMPHandling             = round(x.CMPHandling             * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2),
            CMPQAComm               = round(x.CMPQAComm               * (case when s.SellCurrencyId = @BaseCurrencyId then 1 else (x.ExchangeRate / x.BaseExchangeRate) end),2)
            
          FROM 
            (
            Select 
                t.ShipmentId,          
                PackagingCost			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 1  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ImportQuotaCharge		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 2  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                RepairCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 4  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                OutsideLabTestCost	    = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 5  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                OtherFabricCost			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 6  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                SellingPriceDiscount	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 7  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FactoryPriceDiscount	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 8  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                WashPrintAndDevelopCost	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 9  THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FreightCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 10 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                DutyCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 11 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                TransportationCost		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 12 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FragranceCost			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 13 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ToolingCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 14 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                --DesignFee				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 15 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                AgencyCommission		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 16 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                iNetActualMarginDiff	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 17 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FinanceCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 19 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                AirFreightCost			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 20 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                KitDevelopment			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 21 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FabricLiabProvision		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 22 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                RepeatDiscount			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 23 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                DevelopmentSampleCost	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 24 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                SampleLengthCost		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 25 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                FreightForBodycare		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 26 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                CourierCostForSample	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 27 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                MarginDifference		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 28 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                RecoveryHomeAndHard		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 29 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                NTNRecovery				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 30 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                CoverForQuenbyFabric	= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 31 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ClaimRecovery			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 32 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                QCCentre				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 33 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                MailOrderBoxCost		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 34 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ForwarderCharge			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 35 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                LicenceCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 36 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                TradingAirFreight		= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 37 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                ClaimsRecovery			= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 38 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                CoatingCost				= SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 39 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                Slippage          = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 42 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                QCCenterMyanmar   = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 40 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                CMPHandling       = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 43 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                CMPQAComm         = SUM(ISNULL((CASE WHEN oc.OtherCostTypeId = 44 THEN oc.OtherCostAmt ELSE 0 END),0) * sd.ShippedQty),
                GTCommission			= max(s.GTCommissionPercent / 100.0 * s.TotalShippedAmt),
                ExchangeRate			= (select top 1 ExchangeRate from ExchangeRate with (nolock) where ExchangeRateTypeId = 1 AND Status=1 AND CurrencyId = s.SellCurrencyId AND (EffectiveTypeId=0 or (isnull(i.InvoiceDate,s.CustomerAtwarehouseDate) >= EffectiveDateFrom AND isnull(i.InvoiceDate,s.CustomerAtwarehouseDate)<(EffectiveDateTo+1))) order by EffectiveTypeId desc),
                BaseExchangeRate		= (select top 1 ExchangeRate from ExchangeRate with (nolock) where ExchangeRateTypeId = 1 AND Status=1 AND CurrencyId = @BaseCurrencyId AND (EffectiveTypeId=0 or (isnull(i.InvoiceDate,s.CustomerAtwarehouseDate) >=EffectiveDateFrom AND isnull(i.InvoiceDate,s.CustomerAtwarehouseDate)<(EffectiveDateTo+1))) order by EffectiveTypeId desc)
            FROM #temp_SelectedShipment as t
                INNER JOIN Invoice AS i with (nolock) on t.shipmentid=i.shipmentid and i.Status=1
            	INNER JOIN Shipment as s with (nolock) ON s.ShipmentId=t.ShipmentId and s.Status=1
                INNER JOIN ShipmentDetail AS sd with (nolock) ON sd.ShipmentId = t.ShipmentId and sd.Status=1
                LEFT JOIN OtherCost AS oc with (nolock) ON oc.ShipmentDetailId = sd.ShipmentDetailId AND oc.Status = 1
            GROUP BY 
                t.ShipmentId, i.InvoiceDate, s.CustomerAtWarehouseDate, s.SellCurrencyId
            ) as x
      	    INNER JOIN Invoice  AS i with (nolock) ON i.ShipmentId = x.ShipmentId
            INNER JOIN Shipment AS s with (nolock) ON s.ShipmentId = x.ShipmentId and s.Status=1
            INNER JOIN Contract AS c with (nolock) ON c.ContractId = s.ContractId and c.Status=1
       WHERE
            (c.officeid @OfficeIdList)
            AND (@handlingOfficeId = -1 OR c.OfficeId <> 17 OR s.SalesForecastSpecialGroupId = @handlingOfficeId)
            AND (c.TradingAgencyId @TradingAgencyIdList)
            AND (s.TermOfPurchaseId @PurchaseTermIdList)
            AND (@CountryOfOriginId=-1 or s.CountryOfOriginId=@CountryOfOriginId)
            AND (@SeasonId = -1 or c.SeasonId = @SeasonId)
            
		SELECT 
			PackagingCost			= max(case when OtherCostTypeId = 1  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			ImportQuotaCharge		= max(case when OtherCostTypeId = 2  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			ExportQuotaCharge		= max(case when OtherCostTypeId = 3  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			RepairCost				= max(case when OtherCostTypeId = 4  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			OutsideLabTestCost		= max(case when OtherCostTypeId = 5  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			OtherFabricCost			= max(case when OtherCostTypeId = 6  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			SellingPrxDiscount		= max(case when OtherCostTypeId = 7  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FtyPrxDiscount			= max(case when OtherCostTypeId = 8  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			WashingPrintAndDevCost	= max(case when OtherCostTypeId = 9  then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FreightCost				= max(case when OtherCostTypeId = 10 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			DutyCost				= max(case when OtherCostTypeId = 11 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			TransportationCost		= max(case when OtherCostTypeId = 12 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FragranceCost			= max(case when OtherCostTypeId = 13 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			ToolingCost				= max(case when OtherCostTypeId = 14 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			DesignFee				= max(case when OtherCostTypeId = 15 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			AgencyCommission		= max(case when OtherCostTypeId = 16 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			iNetActualMarginDiff	= max(case when OtherCostTypeId = 17 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			ProvisionOfClaims		= max(case when OtherCostTypeId = 18 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FinanceCost				= max(case when OtherCostTypeId = 19 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			AirFreightCost			= max(case when OtherCostTypeId = 20 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			KitDevelopment			= max(case when OtherCostTypeId = 21 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FabricLiabProvision		= max(case when OtherCostTypeId = 22 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			RepeatDiscount			= max(case when OtherCostTypeId = 23 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			DevelopmentSampleCost	= max(case when OtherCostTypeId = 24 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			SampleLengthCost		= max(case when OtherCostTypeId = 25 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			FreightForBodycare		= max(case when OtherCostTypeId = 26 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			CourierCostsForSample	= max(case when OtherCostTypeId = 27 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			MarginDifference		= max(case when OtherCostTypeId = 28 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end), 
			RecoveryHomeAndHard		= max(case when OtherCostTypeId = 29 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			NTNRecovery				= max(case when OtherCostTypeId = 30 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			CoverForQuenbyFabric	= max(case when OtherCostTypeId = 31 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			ClaimRecovery			= max(case when OtherCostTypeId = 32 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			QCCentre				= max(case when OtherCostTypeId = 33 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			MailOrderBoxCost		= max(case when OtherCostTypeId = 34 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			ForwarderCharge			= max(case when OtherCostTypeId = 35 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			LicenceCost				= max(case when OtherCostTypeId = 36 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			TradingAirFreight		= max(case when OtherCostTypeId = 37 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			ClaimsRecovery			= max(case when OtherCostTypeId = 38 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			CoatingCost				= max(case when OtherCostTypeId = 39 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
			Slippage          = max(case when OtherCostTypeId = 42 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
      QCCenterMyanmar   = max(case when OtherCostTypeId = 40 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
      CMPHandling       = max(case when OtherCostTypeId = 43 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end),
      CMPQAComm         = max(case when OtherCostTypeId = 44 then ISNULL(Convert(Varchar,SunAccountCode),'') else '' end)
		from OtherCostType


       ]]>
        </commandText>
        <parameters>
          <param key="BaseCurrencyId" name="@BaseCurrencyId" type="int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="int" direction="Input" />
          <param key="CountryOfOriginId" name="@CountryOfOriginId" type="Int" direction="Input"/>
          <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input"/>
          <param key="PurchaseTermIdList" name="@PurchaseTermIdList" type="ArrayInt" direction="Input"/>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input"/>
          <param key="PeriodNoFrom" name="@PeriodNoFrom" type="int" direction="Input"/>
          <param key="PeriodNoTo" name="@PeriodNoTo" type="int" direction="Input"/>
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input"/>
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input"/>
          <param key="DeliveryDateFrom" name="@DeliveryDateFrom" type="DateTime" direction="Input"/>
          <param key="DeliveryDateTo" name="@DeliveryDateTo" type="DateTime" direction="Input"/>
          <param key="GetActual" name="@GetActual" type="int" direction="Input"/>
          <param key="GetAccrual" name="@GetAccrual" type="int" direction="Input"/>
          <param key="GetRealized" name="@GetRealized" type="int" direction="Input"/>
          <param key="GetNotYetCut" name="@GetNotYetCut" type="int" direction="Input"/>
          <param key="SeasonId" name="@SeasonId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OtherCostSummary" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ActualSalesSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetActualSalesSummaryReport" type="Text">
        <commandText>
          SELECT
          ProductTeamCode,
          ProductTeamDescription,
          Department = (SELECT Description FROM NSLDB..OfficeStructure WHERE OfficeStructureId = x.DepartmentId AND Status = 1),
          TotalShippedQty = SUM(TotalShippedQty),
          NoOfPieces = SUM(NoOfPieces),
          TotalShippedAmt = SUM(ROUND(TotalShippedAmt* InvoiceSellExchangeRate / ber.ExchangeRate,2)),
          TotalShippedSupplierGmtAmtAfterDiscount = SUM(ROUND(TotalShippedSupplierGmtAmtAfterDiscount * InvoiceSellExchangeRate / ber.ExchangeRate,2)),
          OfficeId
          FROM
          (
          SELECT
          ProductTeamCode = os.Code,
          ProductTeamDescription = os.Description,
          DepartmentId = os.ParentId,
          TotalShippedQty = s.TotalShippedQty,
          NoOfPieces = s.TotalShippedQty * c.PiecesPerPack,
          TotalShippedAmt = s.TotalShippedAmt ,
          TotalShippedSupplierGmtAmtAfterDiscount = s.TotalShippedSupplierGmtAmtAfterDiscount ,
          c.OfficeId, s.SellCurrencyId, i.InvoiceDate, i.InvoiceSellExchangeRate
          FROM Shipment AS s
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId AND i.Status = 1
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId AND c.Status = 1
          INNER JOIN NSLDB..OfficeStructure AS os ON os.OfficeStructureId = c.ProductTeamId AND os.Status = 1 AND (@departmentId = -1 OR os.ParentId = @departmentId)
          WHERE
          s.WorkflowStatusId = 8
          AND (@invoiceDateFrom IS NULL OR i.InvoiceDate BETWEEN @invoiceDateFrom AND @invoiceDateTo)
          AND (@invoiceUploadDateFrom IS NULL OR i.InvoiceUploadDate BETWEEN @invoiceUploadDateFrom AND DATEADD(d,1,@invoiceUploadDateTo))
          AND
          (@fiscalYear = -1 OR
          (@isActual = 1 AND (SELECT IsAccrual FROM CutoffSales WHERE ShipmentId = s.ShipmentId AND fiscalyear = @fiscalYear and Period BETWEEN @periodFrom and @periodTo) = 0)
          OR (@isRealized =1
          AND (SELECT IsAccrual FROM CutoffSales WHERE ShipmentId = s.ShipmentId) = 1 and
          EXISTS(SELECT * FROM NSLDB..AccountFinancialCalender WHERE Appid= 9   AND i.InvoiceUploadDate BETWEEN StartDate AND EndDate AND
          BudgetYear = @fiscalYear AND Period BETWEEN @periodFrom and @periodTo)))
          AND ((@officeId = -1 AND c.OfficeId @officeIdList) OR c.OfficeId = @officeId)
          AND c.ProductTeamId  @productTeamList
          AND (@seasonId = -1 OR c.SeasonId = @seasonId)
          AND (@countryOfOriginId = -1 OR s.CountryOfOriginId = @countryOfOriginId)
          AND (@shipmentPortId = -1 OR s.ShipmentPortId = @shipmentPortId)
          AND c.CustomerId  @customerIdList
          AND c.TradingAgencyId @tradingAgencyList
          AND (@termOfPurchaseId = -1 OR s.TermOfPurchaseId = @termOfPurchaseId)
          AND (@isSZOrder = -1 OR c.IsNextMfgOrder = @isSZOrder)
          --AND (@isUTOrder = -1 OR (@isUTOrder =1 AND s.CustomerDestinationId IN (4,5,28)) OR (@isUTOrder = 0 AND s.CustomerDestinationId NOT IN (4,5,28)))
          AND ((@isUTOrder IN (-1, 0) AND s.TermOfPurchaseId NOT IN (5)) OR (@isUTOrder =1 AND s.TermOfPurchaseId = 5))
          AND (@isOPROrder = -1 OR (@isOPROrder = 1 AND s.WithOPRFabric > 0) OR (@isOPROrder = 0 AND (s.WithOPRFabric = 0 OR s.WithOPRFabric IS NULL)))
          AND (@isLDPOrder = -1 OR c.IsLDPOrder = @isLDPOrder)
          ) as x
          --INNER JOIN ExchangeRate AS ser ON ser.CurrencyId = SellCurrencyId AND ser.ExchangeRateTypeId = 1 AND InvoiceDate BETWEEN ser.EffectiveDateFrom AND ser.EffectiveDateTo
          INNER JOIN ExchangeRate AS ber ON ber.CurrencyId = @baseCurrencyId AND ber.ExchangeRateTypeId = 1 AND InvoiceDate BETWEEN ber.EffectiveDateFrom AND ber.EffectiveDateTo

          GROUP BY ProductTeamCode, ProductTeamDescription, Departmentid, OfficeId
          ORDER BY Departmentid , ProductTeamCode
        </commandText>
        <parameters>
          <param key="invoiceDateFrom" name="@invoiceDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceDateTo" name="@invoiceDateTo" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateFrom" name="@invoiceUploadDateFrom" type="DateTime" direction="Input" />
          <param key="invoiceUploadDateTo" name="@invoiceUploadDateTo" type="DateTime" direction="Input" />
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="periodFrom" name="@periodFrom" type="int" direction="Input" />
          <param key="periodTo" name="@periodTo" type="int" direction="Input" />
          <param key="isActual" name="@isActual" type="int" direction="Input" />
          <param key="isRealized" name="@isRealized" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="departmentId" name="@departmentId" type="int" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="seasonId" name="@seasonId" type="int" direction="Input" />
          <param key="countryOfOriginId" name="@countryOfOriginId" type="int" direction="Input" />
          <param key="shipmentPortId" name="@shipmentPortId" type="int" direction="Input" />
          <param key="customerIdList" name="@customerIdList" type="ArrayInt" direction="Input" />
          <param key="tradingAgencyList" name="@tradingAgencyList" type="ArrayInt" direction="Input" />
          <param key="termOfPurchaseId" name="@termOfPurchaseId" type="int" direction="Input" />
          <param key="baseCurrencyId" name="@baseCurrencyId" type="int" direction="Input" />
          <param key="isSZOrder" name="@isSZOrder" type="int" direction="Input" />
          <param key="isUTOrder" name="@isUTOrder" type="int" direction="Input" />
          <param key="isOPROrder" name="@isOPROrder" type="int" direction="Input" />
          <param key="isLDPOrder" name="@isLDPOrder" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ActualSalesSummary" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AccrualArchiveApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetAccrualArchiveList" type="Text">
        <commandText>
          SELECT a.ShipmentId, b.OfficeCode, d.ContractNo AS NSLPONo, c.DeliveryNo, e.ItemNo, f.Code AS Season, h.Code AS ProductTeam, i.CurrencyCode AS Currency,
          ISNULL(a.ActualAtWarehouseDate, a.ILSActualAtWarehouseDate) AS ActualAtWarehouseDate,
          a.TotalShippedAmt, a.TotalShippedAmtInBaseCurrency, a.PiecesPerPack, a.TotalShippedQty,
          j.TermOfPurchaseDesc, a.TotalShippedSupplierGmtAmt, a.TotalShippedSupplierGmtAmtInBaseCurrency, k.Name AS Vendor, l.ShortName AS TradingAgency, co.Code AS CountryOfOrigin,
          dbo.fn_formatInvoiceNo(m.InvoicePrefix, m.InvoiceSeq, m.InvoiceYear) AS RealizedInvoiceNo,
          m.InvoiceDate AS RealizedInvoiceDate, c.TotalShippedAmt AS RealizedTotalShippedAmt
          FROM CutOffSales a
          INNER JOIN NSLDB..Office b ON a.OfficeId = b.OfficeId AND a.FiscalYear = @FiscalYear AND a.Period = @Period AND a.OfficeId = @OfficeId AND a.IsAccrual = 1
          INNER JOIN Shipment c ON a.ShipmentId = c.ShipmentId
          INNER JOIN Contract d ON c.ContractId = d.ContractId
          INNER JOIN Product e ON a.ProductId = e.ProductId
          INNER JOIN NSLDB..Season f ON a.SeasonId = f.SeasonId
          INNER JOIN NSLDB..OfficeStructure h ON a.ProductTeamId = h.OfficeStructureId
          INNER JOIN NSLDB..Currency i ON a.SellCurrencyId = i.CurrencyId
          INNER JOIN TermOfPurchase j ON a.TermOfPurchaseId = j.TermOfPurchaseId
          INNER JOIN NSLINDUSTRY..Vendor k ON a.VendorId = k.VendorId
          INNER JOIN TradingAgency l ON a.TradingAgencyId = l.TradingAgencyId
          INNER JOIN CountryOfOrigin co ON c.CountryOfOriginId = co.CountryOfOriginId
          INNER JOIN Invoice m ON a.ShipmentId = m.ShipmentId
          --INNER JOIN ExchangeRate o ON ExchangeRateTypeId = 1 AND o.CurrencyId = 3 AND ISNULL(m.InvoiceDate, ISNULL(m.ActualAtWarehouseDate, m.ILSActualAtWarehouseDate)) BETWEEN o.EffectiveDateFrom AND o.EffectiveDateTo
          --INNER JOIN ExchangeRate p ON ExchangeRateTypeId = 1 AND o.CurrencyId = c.SellCurrencyId AND ISNULL(m.ActualAtWarehouseDate, m.ILSActualAtWarehouseDate) BETWEEN o.EffectiveDateFrom AND o.EffectiveDateTo
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AccrualArchive"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SupplierOrderStatusReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSupplierOrderStatusReport" type="Text">
        <commandText>
          SELECT
          Office = (SELECT OfficeCode FROM Office WHERE OfficeId = x.OfficeId),
          ContractNo, DeliveryNo,
          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = x.ProductId),
          SupplierInvoiceNo,
          CountryOfOrigin = (SELECT [Name] FROM CountryOfOrigin WHERE CountryOfOriginId = x.CountryOfOriginId),
          Customer = (SELECT CustomerCode FROM Customer WHERE CustomerId = x.CustomerId),
          CustomerAtWarehouseDate,
          Currency = (Select CurrencyCode FROM Currency WHERE CurrencyId = x.BuyCurrencyId),
          TotalPOSupplierGmtAmtAfterDiscount, InvoiceNo, InvoiceAmt, TotalShippedSupplierAmt,
          WorkflowStatus = (SELECT [Description] FROM WorkflowStatus WHERE WorkflowStatusId = x.WorkflowStatusId AND RecordTypeId = 1),
          AccountDocReceiptDate, APDate,
          Supplier = (SELECT [Name] FROM NSLIndustry..Vendor WHERE VendorId = x.VendorId)
          FROM
          (
          SELECT c.OfficeId,
          ContractNo = CASE WHEN ss.SplitShipmentId IS NULL THEN c.ContractNo ELSE c.ContractNo + ss.SplitSuffix END,
          s.DeliveryNo,
          ProductId = CASE WHEN ss.SplitShipmentId IS NULL THEN c.ProductId ELSE ss.ProductId END,
          SupplierInvoiceNo = CASE WHEN ss.SplitShipmentId IS NULL THEN i.SupplierInvoiceNo ELSE ss.SupplierInvoiceNo END,
          CountryOfOriginId = CASE WHEN ss.SplitShipmentId IS NULL THEN s.CountryOfOriginId ELSE ss.CountryOfOriginId END,
          c.CustomerId,
          s.CustomerAtWarehousedate,
          BuyCurrencyId = CASE WHEN ss.SplitShipmentId IS NULL THEN s.BuyCurrencyId ELSE ss.BuyCurrencyId END,
          TotalPOSupplierGmtAmtAfterDiscount = CASE WHEN ss.SplitShipmentId IS NULL THEN s.TotalPOSupplierGmtAmtAfterDiscount ELSE ss.TotalPOSupplierGmtAmtAfterDiscount END,
          InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
          InvoiceAmt = CASE WHEN ss.SplitShipmentId IS NULL THEN s.TotalShippedAmt ELSE ss.TotalShippedAmt END,
          TotalShippedSupplierAmt = CASE WHEN ss.SplitShipmentId IS NULL THEN s.TotalShippedSupplierGmtAmtAfterDiscount ELSE ss.TotalShippedSupplierGmtAmtAfterDiscount END,
          s.WorkflowStatusId,
          AccountDocReceiptDate = CASE WHEN ss.SplitShipmentId IS NULL THEN i.AccountDocReceiptDate ELSE ss.AccountDocReceiptDate END,
          APDate = CASE WHEN ss.SplitShipmentId IS NULL THEN i.APDate ELSE ss.APDate END,
          VendorId = CASE WHEN ss.SplitShipmentId IS NULL THEN s.VendorId ELSE ss.VendorId END
          FROM Shipment AS s
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId AND c.Status = 1 AND c.OfficeId @officeIdList
          INNER JOIN Invoice AS i ON i.ShipmentId = s.ShipmentId AND c.Status = 1
          LEFT JOIN SplitShipment AS ss ON ss.ShipmentId = s.ShipmentId AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1
          WHERE
          (@customerAtWHDateFrom IS NULL OR s.CustomerAtWarehouseDate BETWEEN @customerAtWHDateFrom AND @customerAtWHDateTo)
          AND c.ProductTeamId @productTeamList
          AND (@vendorId = -1 OR (CASE WHEN ss.SplitShipmentId IS NULL THEN s.VendorId ELSE ss.VendorId END) = @vendorId)
          AND (@paymentTermId = -1 OR (CASE WHEN ss.SplitShipmentId IS NULL THEN s.PaymentTermId ELSE ss.PaymentTermId END) = @paymentTermId)
          ) AS x
          ORDER BY CustomerAtWarehouseDate, ContractNo, DeliveryNo
        </commandText>
        <parameters>
          <param key="customerAtWHDateFrom" name="@customerAtWHDateFrom" type="DateTime" direction="Input" />
          <param key="customerAtWHDateTo" name="@customerAtWHDateTo" type="DateTime" direction="Input" />
          <param key="officeIdList" name="@officeIdList" type="ArrayInt" direction="Input" />
          <param key="productTeamList" name="@productTeamList" type="ArrayInt" direction="Input" />
          <param key="vendorId" name="@vendorId" type="int" direction="Input" />
          <param key="paymentTermId" name="@paymentTermId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SupplierOrderStatus" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ReleaseLockSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getReleaseLockSummary" type="Text">
        <commandText>
          <![CDATA[
          SELECT z.* , ContractNo = h.ContractNo + ISNULL(SplitSuffix, ''), j.DeliveryNo,
		          SplitCount = j.SplitCount, IsVirtualSetSplit = j.IsVirtualSetSplit,
		          AP_Settled  = (CASE WHEN APDate IS NOT NULL THEN 'Y' ELSE 'N' END),
         	    AR_Settled = (CASE WHEN ARDate IS NOT NULL THEN 'Y' ELSE 'N' END),
              Reversing_Purchase = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL
		                THEN 'Y' ELSE 'N' END) ,
              Reversing_Purchase_Extract = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL THEN 
		                (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = z.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId = 5)
		                ELSE NULL END) ,
              DCNote_Purchase = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NOT NULL  
		                THEN 'Y' ELSE 'N' END) ,              
   		        PurchaseDCNoteNo = (CASE WHEN z.PurchaseAdjustmentDetailId = 0 THEN '' 
           			    ELSE (SELECT AdjustmentNoteNo FROM AdjustmentDetail ad INNER JOIN AdjustmentNote an ON an.AdjustmentNoteId = ad.AdjustmentNoteId AND ad.AdjustmentDetailId = z.PurchaseAdjustmentDetailId) END),
              Reversing_Sales = (CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL 		
		                THEN 'Y' ELSE 'N' END ) ,
              Reversing_Sales_Extract = (CASE WHEN SalesModified = 1  AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL
		                THEN (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = z.ShipmentId AND SunInterfaceTypeId = 1 AND CategoryId = 5)
		                ELSE NULL END ),
              DCNote_Sales = (CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL THEN 'Y' ELSE 'N' END ),
                        SalesDCNoteNo =(CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL THEN
				          (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = z.ShipmentId AND SunInterfaceTypeId = 20)
				          ELSE NULL END)

          FROM 
              (
              SELECT 	a.ReleaseLockRequestId, a.PurchaseAdjustmentDetailId, a.SalesAdjustmentDetailId,
                  b.ShipmentId, b.ContractId, SplitSuffix = NULL,     
                  OriginalInvoiceNo = b.InvoicePrefix + '/' + RIGHT('00000' + CONVERT( varchar, b.InvoiceSeq), 5) + '/' + CONVERT( varchar, b.InvoiceYear) ,
                  OriginalInvoiceDate = b.InvoiceDate ,
                  NewInvoiceNo = c.InvoicePrefix + '/' + RIGHT('00000' + CONVERT( varchar, c.InvoiceSeq), 5) + '/' + CONVERT( varchar, c.InvoiceYear),
                  NewInvoiceDate = c.InvoiceDate,
                  OriginalOffice = (SELECT OfficeCode FROM Office WHERE OfficeId = b.OfficeId),
                  NewOffice = (SELECT OfficeCode FROM Office WHERE OfficeId = c.OfficeId),
                  OriginalItemNo = (SELECT ItemNo FROM Product WHERE ProductId = b.ProductId),
                  NewItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
                  OriginalSeason = (SELECT Code FROM NSLDB..Season WHERE SeasonId = b.SeasonId),
                  NewSeason = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
                  OriginalProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = b.ProductTeamId),
                  NewProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
                  OriginalTermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = b.TermOfPurchaseId),
                  NewTermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = c.TermOfPurchaseId),
                  OriginalSupplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = b.VendorId),
                  NewSupplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = c.VendorId),
                  OriginalTotalShippedQty = b.TotalShippedQty, NewTotalShippedQty = c.TotalShippedQty,
                  OriginalCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = b.SellCurrencyId),
                  NewCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = c.SellCurrencyId),
                  OriginalInvoiceAmount = b.TotalShippedAmt, NewInvoiceAmount = c.TotalShippedAmt,
                  OriginalSalesComm = ROUND(b.TotalShippedAmt * b.NSLCommissionPercent / 100 , 2),
                  NewSalesComm = ROUND(c.TotalShippedAmt * c.NSLCommissionPercent / 100, 2),
                  OriginalSupplierInvoiceNo = b.SupplierInvoiceNo, NewSupplierInvoiceNo = c.SupplierInvoiceNo,
                  OriginalSupplierAmount = b.TotalShippedSupplierGmtAmtAfterDiscount,
                  NewSupplierAmount = c.TotalShippedSupplierGmtAmtAfterDiscount,
                  OriginalQAComm = ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.QACommissionPercent / 100, 2),
                  NewQAComm = ROUND(c.TotalShippedSupplierGmtAmtAfterDiscount * c.QACommissionPercent / 100, 2),
                  OriginalVendorDiscount = ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.VendorPaymentDiscountPercent / 100, 2),
                  NewVendorDiscount = ROUND(c.TotalShippedSupplierGmtAmtAfterDiscount * c.VendorPaymentDiscountPercent / 100, 2),
                  OriginalSupplierNetAmount = b.TotalShippedSupplierGmtAmtAfterDiscount - ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.QACommissionPercent / 100, 2)
                                                            - ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.VendorPaymentDiscountPercent / 100, 2),
                  NewSupplierNetAmount = c.TotalShippedSupplierGmtAmtAfterDiscount - ROUND(c.TotalShippedSupplierGmtAmtAfterDiscount * c.QACommissionPercent / 100, 2)
                                                            - ROUND(c.TotalShippedSupplierGmtAmtAfterDiscount * c.VendorPaymentDiscountPercent / 100, 2),
                  OriginalDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = b.CustomerDestinationId),
                  NewDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = c.CustomerDestinationId),
                  OriginalCO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = b.CountryOfOriginId),
                  NewCO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = c.CountryOfOriginId),
        		
                  --|| More column to be display on report
                  a.RequestedOn,
                  a.ReleasedOn,
                  a.ReLockedOn,		
        		
	                b.APDate, b.ARDate, b.AccountInterfacePurchaseExtractDate, b.AccountInterfaceSalesExtractDate,
		                PurchaseModified = CASE WHEN ( b.TotalShippedSupplierGmtAmtAfterDiscount <> c.TotalShippedSupplierGmtAmtAfterDiscount OR b.BuyCurrencyId <> c.BuyCurrencyId
		                OR b.VendorId <> c.VendorId OR b.QACommissionPercent <> c.QACommissionPercent OR b.CustomerDestinationId <> c.CustomerDestinationId
		                OR b.InvoiceDate <> c.InvoiceDate OR b.OfficeId <> c.OfficeId OR b.VendorPaymentDiscountPercent <> c.VendorPaymentDiscountPercent
		                OR b.ProductId <> c.ProductId OR b.TradingAgencyId <> c.TradingAgencyId OR b.ProductTeamId <> c.ProductTeamId
		                OR b.InvoicePrefix <> c.InvoicePrefix OR b.InvoiceSeq <> c.InvoiceSeq OR b.InvoiceYear <> c.InvoiceYear OR b.TotalShippedQty <> c.TotalShippedQty) 
		                THEN 1 ELSE 0 END,
	                SalesModified = CASE WHEN (b.TotalShippedAmt <> c.TotalShippedAmt OR b.SellCurrencyId <> c.SellCurrencyId OR b.CustomerDestinationId <> c.CustomerDestinationId
		                OR b.InvoiceDate <> c.InvoiceDate OR b.InvoicePrefix <> c.InvoicePrefix OR b.InvoiceSeq <> c.InvoiceSeq OR b.InvoiceYear <> c.InvoiceYear
		                OR b.ProductId <> c.ProductId OR b.OfficeId <> c.OfficeId OR b.ProductTeamId <> c.ProductTeamId OR b.TradingAgencyId <> c.TradingAgencyId
		                OR b.TermOfPurchaseId <> c.TermOfPurchaseId OR b.TotalShippedQty <> c.TotalShippedQty OR b.CustomerId <> c.CustomerId)
		                THEN 1 ELSE 0 END
                  
              FROM 	ReleaseLockRequest AS a
                  INNER JOIN ReleaseLockShipment AS b ON b.ReleaseLockRequestId = a.ReleaseLockRequestId AND b.IsNew = 0        
                  LEFT JOIN ReleaseLockShipment AS c ON c.ReleaseLockRequestId = a.ReleaseLockRequestId AND c.IsNew = 1
              ) AS z 
              INNER JOIN Contract AS h ON h.ContractId = z.ContractId
              INNER JOIN Shipment AS j ON j.ShipmentId = z.ShipmentId
          WHERE 
              --(@OfficeId = -1 OR h.OfficeId = @OfficeId)
              (h.OfficeId @OfficeIdList)
            AND (@handlingOfficeId = -1 OR h.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)              
              AND (@ReleaseLockDateFrom IS NULL OR ReleasedOn BETWEEN @ReleaseLockDateFrom AND DATEADD(d,1,@ReleaseLockDateTo))
              AND ((@isSampleOrder = -1)
	              OR (@isSampleOrder = 0 AND (j.IsMockShopSample<>1 AND j.IsPressSample<>1 AND j.IsStudioSample<>1))
	              OR (@isSampleOrder = 1 AND (j.IsMockShopSample=1 OR j.IsPressSample=1 OR j.IsStudioSample=1))
	              OR (@isSampleOrder = 2 AND (j.IsMockShopSample=1))
	              OR (@isSampleOrder = 3 AND (j.IsPressSample=1))
	              OR (@isSampleOrder = 4 AND (j.IsStudioSample=1))
	              )
      	      AND (h.CustomerId @CustomerIdList)
      	      AND (h.TradingAgencyId @TradingAgencyIdList)
              AND (@ReversingEntryRequired = 0 OR
                  ((PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL) OR 
                  (SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL)))
               AND (@DCNoteRequired = 0 OR (PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NOT NULL))
               AND (@ILSTempACRequired = 0 OR (SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL))
               
          UNION

          SELECT y.* , ContractNo = h.ContractNo + SplitSuffix, j.DeliveryNo,
		          SplitCount = NULL, IsVirtualSetSplit = NULL,
		          AP_Settled  = (CASE WHEN APDate IS NOT NULL THEN 'Y' ELSE 'N' END),
         	    AR_Settled = (CASE WHEN ARDate IS NOT NULL THEN 'Y' ELSE 'N' END),
              Reversing_Purchase = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL
		                THEN 'Y' ELSE 'N' END) ,
              Reversing_Purchase_Extract = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL THEN 
		                (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = y.ShipmentId AND SunInterfaceTypeId = 3 AND CategoryId = 5)
		                ELSE NULL END) ,
              DCNote_Purchase = (CASE WHEN PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NOT NULL  
		                THEN 'Y' ELSE 'N' END) ,              
   		        PurchaseDCNoteNo = (CASE WHEN y.PurchaseAdjustmentDetailId = 0 THEN '' 
           			    ELSE (SELECT AdjustmentNoteNo FROM AdjustmentDetail ad INNER JOIN AdjustmentNote an ON an.AdjustmentNoteId = ad.AdjustmentNoteId AND ad.AdjustmentDetailId = y.PurchaseAdjustmentDetailId) END),
              Reversing_Sales = (CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL 		
		                THEN 'Y' ELSE 'N' END ) ,
              Reversing_Sales_Extract = (CASE WHEN SalesModified = 1  AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL
		                THEN (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = y.ShipmentId AND SunInterfaceTypeId = 1 AND CategoryId = 5)
		                ELSE NULL END ),
              DCNote_Sales = (CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL THEN 'Y' ELSE 'N' END ),
                        SalesDCNoteNo =(CASE WHEN SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL THEN
				          (SELECT MIN(CreatedOn) FROM SunInterfaceLog WHERE ShipmentId = y.ShipmentId AND SunInterfaceTypeId = 20)
				          ELSE NULL END)
          FROM (

                SELECT 	r.ReleaseLockRequestId, r.PurchaseAdjustmentDetailId, r.SalesAdjustmentDetailId,
                    b.ShipmentId, b.ContractId, ss.SplitSuffix,
                    OriginalInvoiceNo = b.InvoicePrefix + '/' + RIGHT('00000' + CONVERT( varchar, b.InvoiceSeq), 5) + '/' + CONVERT( varchar, b.InvoiceYear),
                    OriginalInvoiceDate = b.InvoiceDate,
                    NewInvoiceNo = c.InvoicePrefix + '/' + RIGHT('00000' + CONVERT( varchar, c.InvoiceSeq), 5) + '/' + CONVERT( varchar, c.InvoiceYear),
                    NewInvoiceDate = c.InvoiceDate,
                    OriginalOffice = (SELECT OfficeCode FROM Office WHERE OfficeId = b.OfficeId),
                    NewOffice = (SELECT OfficeCode FROM Office WHERE OfficeId = c.OfficeId),
                    OriginalItemNo = (SELECT ItemNo FROM Product WHERE ProductId = k.ProductId),
                    NewItemNo = (SELECT ItemNo FROM Product WHERE ProductId = m.ProductId),
                    OriginalSeason = (SELECT Code FROM NSLDB..Season WHERE SeasonId = b.SeasonId),
                    NewSeason = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
                    OriginalProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = b.ProductTeamId),
                    NewProductTeam = (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId),
                    OriginalTermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = b.TermOfPurchaseId),
                    NewTermOfPurchase = (SELECT TermOfPurchaseDesc FROM TermOfPurchase WHERE TermOfPurchaseId = c.TermOfPurchaseId),
                    OriginalSupplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = k.VendorId),
                    NewSupplier = (SELECT Name FROM NSLIndustry..Vendor WHERE VendorId = m.VendorId),
                    OriginalTotalShippedQty = k.TotalShippedQty, NewTotalShippedQty = m.TotalShippedQty,
                    OriginalCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = k.SellCurrencyId),
                    NewCurrency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = m.SellCurrencyId),
                    OriginalInvoiceAmount = NULL, NewInvoiceAmount = NULL,
                    OriginalSalesComm = NULL,
                    NewSalesComm = NULL,
                    OriginalSupplierInvoiceNo = k.SupplierInvoiceNo, NewSupplierInvoiceNo = m.SupplierInvoiceNo,
                    OriginalSupplierAmount = k.TotalShippedSupplierGmtAmtAfterDiscount,
                    NewSupplierAmount = m.TotalShippedSupplierGmtAmtAfterDiscount,
                    OriginalQAComm = ROUND(k.TotalShippedSupplierGmtAmtAfterDiscount * k.QACommissionPercent / 100, 2),
                    NewQAComm = ROUND(m.TotalShippedSupplierGmtAmtAfterDiscount * m.QACommissionPercent / 100, 2),
                    OriginalVendorDiscount = ROUND(k.TotalShippedSupplierGmtAmtAfterDiscount * k.VendorPaymentDiscountPercent / 100, 2),
                    NewVendorDiscount = ROUND(m.TotalShippedSupplierGmtAmtAfterDiscount * m.VendorPaymentDiscountPercent / 100, 2),
                    OriginalSupplierNetAmount = k.TotalShippedSupplierGmtAmtAfterDiscount - ROUND(k.TotalShippedSupplierGmtAmtAfterDiscount * k.QACommissionPercent / 100, 2)
                                                          - ROUND(k.TotalShippedSupplierGmtAmtAfterDiscount * k.VendorPaymentDiscountPercent / 100, 2),
                    NewSupplierNetAmount = m.TotalShippedSupplierGmtAmtAfterDiscount - ROUND(m.TotalShippedSupplierGmtAmtAfterDiscount * m.QACommissionPercent / 100, 2)
                                                          - ROUND(m.TotalShippedSupplierGmtAmtAfterDiscount * m.VendorPaymentDiscountPercent / 100, 2),
                    OriginalDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = b.CustomerDestinationId),
                    NewDestination = (SELECT DestinationCode FROM CustomerDestination WHERE CustomerDestinationId = c.CustomerDestinationId),
                    OriginalCO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = k.CountryOfOriginId),
                    NewCO = (SELECT Code FROM CountryOfOrigin WHERE CountryOfOriginId = m.CountryOfOriginId),
          		
                    --|| More column to be display on report
                    r.RequestedOn,
                    r.ReleasedOn,
                    r.ReLockedOn,
          		
	                  k.APDate, ARDate = NULL, k.AccountInterfacePurchaseExtractDate, AccountInterfaceSalesExtractDate = NULL, 
 	                  PurchaseModified = CASE WHEN ( k.TotalShippedSupplierGmtAmtAfterDiscount <> m.TotalShippedSupplierGmtAmtAfterDiscount OR k.BuyCurrencyId <> m.BuyCurrencyId
		                  OR k.VendorId <> m.VendorId OR k.QACommissionPercent <> m.QACommissionPercent OR b.CustomerDestinationId <> c.CustomerDestinationId
		                  OR b.InvoiceDate <> c.InvoiceDate OR b.OfficeId <> c.OfficeId OR b.VendorPaymentDiscountPercent <> c.VendorPaymentDiscountPercent
		                  OR k.ProductId <> m.ProductId OR b.TradingAgencyId <> c.TradingAgencyId OR b.ProductTeamId <> c.ProductTeamId
		                  OR b.InvoicePrefix <> c.InvoicePrefix OR b.InvoiceSeq <> c.InvoiceSeq OR b.InvoiceYear <> c.InvoiceYear OR k.TotalShippedQty <> m.TotalShippedQty) 
		                  THEN 1 ELSE 0 END , SalesModified = 0
                      
                FROM 	ReleaseLockRequest AS r
                    INNER JOIN ReleaseLockShipment AS b ON b.ReleaseLockRequestId = r.ReleaseLockRequestId AND b.IsNew = 0
                    LEFT JOIN ReleaseLockShipment AS c ON c.ReleaseLockRequestId = r.ReleaseLockRequestId AND c.IsNew = 1
                    INNER JOIN ReleaseLockSplitShipment AS k ON k.ReleaseLockRequestId = r.ReleaseLockRequestId AND  k.IsNew = 0
                    LEFT JOIN ReleaseLockSplitShipment AS m ON m.ReleaseLockRequestId = r.ReleaseLockRequestId AND m.SplitShipmentId = k.SplitShipmentId AND m.IsNew = 1
                    INNER JOIN SplitShipment AS ss ON ss.SplitShipmentId = k.SplitShipmentId AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1            
                ) AS y
                INNER JOIN Contract AS h ON h.ContractId = y.ContractId
                INNER JOIN Shipment AS j ON j.ShipmentId = y.ShipmentId
            WHERE 
                -- (@OfficeId = -1 OR h.OfficeId = @OfficeId)
                (h.OfficeId @OfficeIdList)
                 AND (@handlingOfficeId = -1 OR h.OfficeId <> 17 OR SalesForecastSpecialGroupId = @handlingOfficeId)
                AND (@ReleaseLockDateFrom IS NULL OR ReleasedOn BETWEEN @ReleaseLockDateFrom AND DATEADD(d,1,@ReleaseLockDateTo))
                AND ((@isSampleOrder = -1)
	                OR (@isSampleOrder = 0 AND (j.IsMockShopSample <> 1 AND j.IsPressSample <> 1 AND j.IsStudioSample <> 1))
	                OR (@isSampleOrder = 1 AND (j.IsMockShopSample=1 OR j.IsPressSample=1 OR j.IsStudioSample=1))
	                OR (@isSampleOrder = 2 AND (j.IsMockShopSample=1))
	                OR (@isSampleOrder = 3 AND (j.IsPressSample=1))
	                OR (@isSampleOrder = 4 AND (j.IsStudioSample=1))
	                )
      	        AND (h.CustomerId @CustomerIdList)
      	        AND (h.TradingAgencyId @TradingAgencyIdList)
                AND (@ReversingEntryRequired = 0 OR
                  ((PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NULL) OR 
                  (SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NULL)))
               AND (@DCNoteRequired = 0 OR (PurchaseModified = 1 AND AccountInterfacePurchaseExtractDate IS NOT NULL AND APDate IS NOT NULL))
               AND (@ILSTempACRequired = 0 OR (SalesModified = 1 AND AccountInterfaceSalesExtractDate IS NOT NULL AND ARDate IS NOT NULL))
          ORDER BY OriginalInvoiceNo, ReleasedOn 
            ]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
          <param key="handlingOfficeId" name="@handlingOfficeId" type="int" direction="Input" />
          <param key="ReleaseLockDateFrom" name="@ReleaseLockDateFrom" type="datetime" direction="Input" />
          <param key="ReleaseLockDateTo" name="@ReleaseLockDateTo" type="datetime" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="CustomerIdList" name="@CustomerIdList" type="ArrayInt" direction="Input"/>
          <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input"/>
          <param key="ReversingEntryRequired" name="@ReversingEntryRequired" type="int" direction="Input" />
          <param key="DCNoteRequired" name="@DCNoteRequired" type="int" direction="Input" />
          <param key="ILSTempACRequired" name="@ILSTempACRequired" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ReleaseLock" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ReleaseLockReasonApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getReleaseLockReason" type="Text">
        <commandText>
          <![CDATA[
          select r.ReleaseLockRequestId, rls.ReleaseLockSectionDesc
          FROM 	ReleaseLockRequest AS r
          INNER JOIN ReleaseLockShipment rs ON rs.ReleaseLockRequestId = r.ReleaseLockRequestId AND IsNew = 0
          INNER JOIN Contract AS h ON h.ContractId = rs.ContractId
          INNER JOIN Shipment AS j ON j.ShipmentId = rs.ShipmentId
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail rd ON rd.ReleaseLockRequestId = r.ReleaseLockRequestId AND rd.Status = 1
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection rls ON rd.ReleaseLockSectionId = rls.ReleaseLockSectionId
          WHERE
          --(@OfficeId = -1 OR h.OfficeId = @OfficeId)
          (h.OfficeId @OfficeIdList)
          AND (@ReleaseLockDateFrom IS NULL OR ReleasedOn BETWEEN @ReleaseLockDateFrom AND DATEADD(d,1,@ReleaseLockDateTo))
          AND ((@isSampleOrder = -1)
              OR (@isSampleOrder = 0 AND (j.IsMockShopSample <> 1 AND j.IsPressSample <> 1 AND j.IsStudioSample <> 1))
              OR (@isSampleOrder = 1 AND (j.IsMockShopSample=1 OR j.IsPressSample=1 OR j.IsStudioSample=1))
              OR (@isSampleOrder = 2 AND (j.IsMockShopSample=1))
              OR (@isSampleOrder = 3 AND (j.IsPressSample=1))
              OR (@isSampleOrder = 4 AND (j.IsStudioSample=1))
              )
          AND (h.CustomerId @CustomerIdList)
          AND (h.TradingAgencyId @TradingAgencyIdList)
          ORDER BY  ReleasedOn
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
          <param key="ReleaseLockDateFrom" name="@ReleaseLockDateFrom" type="datetime" direction="Input" />
          <param key="ReleaseLockDateTo" name="@ReleaseLockDateTo" type="datetime" direction="Input" />
          <param key="isSampleOrder" name="@isSampleOrder" type="int" direction="Input" />
          <param key="CustomerIdList" name="@CustomerIdList" type="ArrayInt" direction="Input"/>
          <param key="TradingAgencyIdList" name="@TradingAgencyIdList" type="ArrayInt" direction="Input"/>
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ReleaseLockReason" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ActiveSupplierReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getActiveSupplierReport" type="Text">
        <commandText>
          <![CDATA[
          

SELECT  v3.[Name] AS Supplier,
	  ContractNo + s.SplitSuffix AS ContractNo,
	  s.DeliveryNo,
	  p.ItemNo,
	  OfficeCode,
	  Code AS ProductTeam,
	  s.SupplierAtWarehouseDate,
	  CASE WHEN s.WorkflowStatusId = 8 
		  THEN s.TotalShippedSupplierGmtAmtAfterDiscount
		  ELSE s.TotalSupplierGmtAmtAfterDiscount END AS SupplierAmount, 
	  ccy.CurrencyCode,
	  s.APDate,
	  v2.SupplierDeliveryCount	
FROM (
	    SELECT VendorId FROM Shipment s WITH (NOLOCK)
	    INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
	    WHERE s.SupplierAtWarehouseDate BETWEEN @PastDeliveryFrom AND @DeliveryDateTo
		      AND (s.SplitCount = 0 OR s.IsVirtualSetSplit = 1)
		      --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
          AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		      AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		      AND (@VendorId = -1 OR s.VendorID = @VendorId)
		      AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              OR (@OrderType = 2 AND (s.IsStudioSample = 1))
              )
		      AND c.CustomerId @CustomerIdList
          AND s.WorkflowStatusId IN (6,7,8)
	    UNION

	    SELECT ss.VendorId FROM SplitShipment ss WITH (NOLOCK)
	    INNER JOIN Shipment s WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId
	    INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
	    WHERE ss.SupplierAtWarehouseDate BETWEEN @PastDeliveryFrom AND @DeliveryDateTo
		      AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1
		      --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
          AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		      AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		      AND (@VendorId = -1 OR ss.VendorID = @VendorId)
		      AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              )
		      AND c.CustomerId @CustomerIdList
          AND s.WorkflowStatusId IN (6,7,8)
) AS v

LEFT JOIN 
(
	  SELECT VendorId, COUNT (VendorId) AS SupplierDeliveryCount
	  FROM 
	    (SELECT VendorId FROM Shipment s WITH (NOLOCK)
	      INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
	      WHERE s.SupplierAtWarehouseDate BETWEEN @DeliveryDateFrom AND @DeliveryDateTo
		        AND (s.SplitCount = 0 OR s.IsVirtualSetSplit = 1)
		        --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
            AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		        AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		        AND (@VendorId = -1 OR s.VendorID = @VendorId)
		        AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              OR (@OrderType = 2 AND (s.IsStudioSample = 1))
              )
		        AND c.CustomerId @CustomerIdList
		        AND s.WorkflowStatusId @WorkflowStatusIdList
  	    UNION ALL
    	
	    SELECT ss.VendorId FROM SplitShipment ss WITH (NOLOCK)
	      INNER JOIN Shipment s WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId
	      INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
	      WHERE ss.SupplierAtWarehouseDate BETWEEN @PastDeliveryFrom AND @DeliveryDateTo
		        AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1
		        --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
            AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		        AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		        AND (@VendorId = -1 OR ss.VendorID = @VendorId)
		        AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              )
		        AND c.CustomerId @CustomerIdList
		        AND s.WorkflowStatusId @WorkflowStatusIdList
	  ) AS v
	GROUP BY VendorId
) AS v2 ON v2.VendorId = v.VendorId
INNER JOIN NSLIndustry..Vendor v3 ON v3.VendorId = v.VendorId
LEFT JOIN
(
	select s.shipmentid, '' AS SplitSuffix, ContractNo, VendorId, DeliveryNo, c.ProductId, SupplierAtWarehouseDate, WorkflowStatusId,
		TotalSupplierGmtAmtAfterDiscount, TotalShippedSupplierGmtAmtAfterDiscount, BuyCurrencyId ,
		i.APDate, o.OfficeCode, os.Code
	FROM Shipment s WITH (NOLOCK)
	INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
  INNER JOIN Office o WITH (NOLOCK) ON o.OfficeId = c.OfficeId 
	INNER JOIN NSLDB..OfficeStructure os ON os.OfficeStructureId = c.ProductTeamId
	INNER JOIN Invoice i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
	WHERE s.SupplierAtWarehouseDate BETWEEN @DeliveryDateFrom AND @DeliveryDateTo
		  AND (s.SplitCount = 0 OR s.IsVirtualSetSplit = 1)
		  --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
      AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		  AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		  AND (@VendorId = -1 OR s.VendorID = @VendorId)
		  AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              )
		  AND c.CustomerId @CustomerIdList
		  AND s.WorkflowStatusId @WorkflowStatusIdList
	UNION

	select s.shipmentid, SplitSuffix, ContractNo, ss.VendorId, s.DeliveryNo, ss.ProductId, ss.SupplierAtWarehouseDate, s.WorkflowStatusId,
		ss.TotalSupplierGmtAmtAfterDiscount, ss.TotalShippedSupplierGmtAmtAfterDiscount,
		ss.BuyCurrencyId, ss.APDate,o.OfficeCode, os.Code
	From SplitShipment ss WITH (NOLOCK)
	INNER JOIN Shipment s WITH (NOLOCK) ON s.ShipmentId = ss.ShipmentId
	INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
	INNER JOIN Office o WITH (NOLOCK) ON o.OfficeId = c.OfficeId 
	INNER JOIN NSLDB..OfficeStructure os ON os.OfficeStructureId = c.ProductTeamId
	WHERE ss.SupplierAtWarehouseDate BETWEEN @PastDeliveryFrom AND @DeliveryDateTo
		  AND ss.IsVirtualSetSplit = 0 AND ss.Status = 1
		  --AND (@OfficeId = -1 OR c.OfficeId = @OfficeId)
      AND (@OfficeGroupId = -1 OR (c.OfficeId in (SELECT OfficeId FROM ReportOfficeGroupMapping WITH (NOLOCK) WHERE OfficeGroupId=@OfficeGroupId)))
		  AND (@ProductTeamId = -1 OR c.ProductTeamId = @ProductTeamId)
		  AND (@VendorId = -1 OR ss.VendorID = @VendorId)
		 AND (@OrderType = -1 
              OR (@OrderType = 0 AND (s.IsMockShopSample <> 1 AND s.IsPressSample <> 1 AND s.IsStudioSample <>1))
		          OR (@OrderType = 1 AND (s.IsMockShopSample = 1 OR s.IsPressSample = 1 OR s.IsStudioSample = 1))
              )
		  AND c.CustomerId @CustomerIdList
		  AND s.WorkflowStatusId @WorkflowStatusIdList

) AS s ON s.VendorId = v2.VendorId
LEFT JOIN Product p WITH (NOLOCK) ON p.ProductId = s.ProductId
LEFT JOIN NSLDB..Currency ccy WITH (NOLOCK) ON ccy.CurrencyId = s.BuyCurrencyId
WHERE SupplierDeliveryCount IS NULL OR SupplierDeliveryCount < @MinDelivery

ORDER BY v3.[Name], SupplierAtWarehouseDate


          ]]>
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="int" direction="Input" />
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input" />
          <param key="PastDeliveryFrom" name="@PastDeliveryFrom" type="datetime" direction="Input" />
          <param key="DeliveryDateFrom" name="@DeliveryDateFrom" type="datetime" direction="Input" />
          <param key="DeliveryDateTo" name="@DeliveryDateTo" type="datetime" direction="Input" />
          <param key="OrderType" name="@OrderType" type="int" direction="Input" />
          <param key="CustomerIdList" name="@CustomerIdList" type="ArrayInt" direction="Input"/>
          <param key="WorkflowStatusIdList" name="@WorkflowStatusIdList" type="ArrayInt" directon="Input" />
          <param key="MinDelivery" name="@MinDelivery" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ActiveSupplierReport" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="QADebitNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getQADebitNoteDetail" type="Text">
        <commandText>

          SELECT
          InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
          i.InvoiceDate, c.ContractNo,
          v.VendorId,
          v.Name, v.Addr1, v.Addr2, v.Addr3, v.Addr4,
          ItemNo = (SELECT ItemNo FROM Product WHERE ProductId = c.ProductId),
          i.SupplierInvoiceNo,
          Season = (SELECT Code FROM NSLDB..Season WHERE SeasonId = c.SeasonId),
          s.TotalShippedQty,
          s.TotalShippedSupplierGmtAmtAfterDiscount,
          s.QACommissionPercent,
          QACommissionAmount = ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2),
          Currency = (SELECT CurrencyCode FROM Currency WHERE CurrencyId = s.BuyCurrencyId)
          FROM Invoice AS i
          INNER JOIN Shipment AS s ON s.ShipmentId = i.ShipmentId
          INNER JOIN Contract AS c ON c.ContractId = s.ContractId
          INNER JOIN NSLIndustry..Vendor AS v ON v.VendorId = s.VendorId
          WHERE i.ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="shipmentId" name="@shipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="QADebitNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SAndBCommDebitNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="CommDebitNoteDetail" type="Text">
        <commandText>
          <![CDATA[
          SELECT InvoiceNo=dbo.fn_FormatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
              i.InvoiceDate,
              c.ContractNo, s.DeliveryNo,
              OfficeName = (SELECT RTRIM(REPLACE(Description,'Office','')) FROM Office WITH (NOLOCK) WHERE OfficeId=c.OfficeId),
              ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK)WHERE ProductId = c.ProductId),
              PackingUnit = (SELECT PackingUnitDesc FROM PackingUnit WHERE PackingUnitId=c.PackingUnitId),
              s.TotalShippedQty,
              s.TotalShippedAmt,
              CurrencyCode = (SELECT CurrencyCode FROM Currency WITH (NOLOCK) WHERE CurrencyId=s.SellCurrencyId),
              s.NSLCommissionPercent, i.NSLCommissionAmt,
              SupplierNo = sn.SupplierNo,
              AccountName=sbd.AccountName, sbd.SwiftCode, sbd.BankName, sbd.BankAddress, sbd.AccountNo
              , cust.CustomerId, cust.CustomerDesc, cust.Address1, cust.Address2, cust.Address3, cust.Address4 
          FROM Shipment AS s WITH (NOLOCK)
              INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId
              INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId=s.ShipmentId
              INNER JOIN Customer As cust WITH (NOLOCK) ON c.customerid = cust.customerid
              LEFT JOIN SettlementBankDetail AS sbd ON charindex(','+convert(varchar,c.OfficeId)+',', ','+sbd.OfficeId+',')>0
                      AND (sbd.CurrencyId=0 OR sbd.CurrencyId=s.SellCurrencyId)
                      AND (sbd.TradingAgencyId='0' OR charindex(','+convert(varchar,c.TradingAgencyId)+',', ','+sbd.TradingAgencyId+',')>0)
                      AND sbd.AccountId <> 13
              LEFT JOIN (SELECT OfficeId=1, CurrencyId=3, SupplierNo='21D15420', BankAccountNo='181402777201', SupplierName='NSL HONG KONG USD'
                            UNION SELECT 2, 3,  '21D21140', '502153745274', 'NSL SHANGHAI USD'
                            UNION SELECT 3, 3,  '21D16900', '502154131274', 'NSL SRI LANKA USD'
                            UNION SELECT 4, 2,  '21D41310', '41312446983',  'NSL THAILAND GBP'
                            UNION SELECT 4, 3,  '21D50130', '41310751177',  'NSL THAILAND PAYMENT ACCOUNT USD'
                            UNION SELECT 7, 3,  '21D85400', '502153745201', 'NSL BANGLEDESH PMT AC'
                            UNION SELECT 8, 2,  '21D29880', '502137094276', 'NSL INDIA GBP'
                            UNION SELECT 8, 3,  '21D74400', '181402777274', 'NSL INDIA USD'
                            UNION SELECT 9, 2,  '21D16910', '502154131276', 'NSL (TURKEY) GBP'
                            UNION SELECT 9, 3,  '21D61090', '502075419201', 'NSL (TURKEY) USD'
                            UNION SELECT 9, 12, '21D80460', '808451355220', 'NSL TURKEY PAYMENT EUR'
                            UNION SELECT 13, 2, '21D45510', '502137094276', 'NSL INDIA (DELHI) GBP'
                            UNION SELECT 13, 3, '21D65850', '502137094274', 'NEXT SOURCING LTD INDIA DEHLI'
                            UNION SELECT 14, 2, '21A66330', '808623086202', 'NSL PAKISTAN GBP'
                            UNION SELECT 14, 3, '21D68810', '808623086201', 'NSL PAKISTAN USD'
                            UNION SELECT 16, 3, '21D68740', '41310751134',  'NSL VIETNAM USD'
                            UNION SELECT 18, 2, '21D82850', '502154131276', 'NSL EGYPT FOB GBP'
                            UNION SELECT 18, 3, '21D85340', '502075419201', 'NSL EGYPT USD'
                            UNION SELECT 18, 12,'21D83050', '808451355220', 'NSL EGYPT FOB EUR'
                            UNION SELECT 3, 2, '21D38690', '502153745276', 'NSL SRI LANKA GBP'
                            UNION SELECT 19, 3, '21D14890', '41310751088', 'NSL CAMBODIA USD'
                      ) AS sn ON sn.OfficeId=c.OfficeId AND sn.CurrencyId=s.SellCurrencyId
          WHERE s.Status = 1
             AND s.ShipmentId = @ShipmentId

        ]]>
        </commandText>
        <parameters>
          <param key="shipmentId" name="@shipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SAndBCommissionDebitNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="AccountCurrencyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getOrderCurrencyList" type="Text">
        <commandText>
          SELECT DISTINCT CurrencyId, CurrencyCode, Name FROM Currency AS c
          INNER JOIN Shipment AS s ON s.BuyCurrencyId=c.CurrencyId
          ORDER BY c.CurrencyCode
        </commandText>
      </dataCommand>


      <dataCommand name="getBaseCurrencyList" type="Text">
        <commandText>
          SELECT DISTINCT CurrencyId, CurrencyCode, Name FROM Currency AS c
          INNER JOIN Shipment AS s ON s.BuyCurrencyId=c.CurrencyId
          WHERE c.CurrencyId in (1,2,3,4,12)
          ORDER BY c.CurrencyCode
        </commandText>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="CurrencyList"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="TransactionRefApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetTransactionRefByKey" type="Text">
        <commandText>
          SELECT * FROM TXRefParam WHERE ParamName = @paramName
        </commandText>
        <parameters>
          <param key="ParamName" name="@paramName" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="TXRefParam" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SunExcludeShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSunExcludeShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM SunExcludeShipment WHERE ShipmentId = @ShipmentId
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SunExcludeShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="SupplierPaymentStatusApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSupplierPaymentStatusByKey" type="Text">
        <commandText>
          SELECT * FROM SupplierPaymentStatus WHERE VendorId = @VendorId
        </commandText>
        <parameters>
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SupplierPaymentStatus" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="PaymentStatusEnquiryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="MarkDMSComplete" type="Text">
        <commandText>
          EXEC sp_dms_api_follow_up @OfficeId
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetPaymentStatusEnquiryList" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 500 * FROM (
          SELECT a.ShipmentId, 0 AS SplitShipmentId, b.VendorId, d.Name AS VendorName, c.ContractNo + '-' + CONVERT(VARCHAR, b.DeliveryNo) AS ContractNo, p.ItemNo, 
          dbo.fn_formatInvoiceNo(a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear) AS InvoiceNo, a.SupplierInvoiceNo,
          e.CurrencyCode,
          CASE WHEN c.CustomerId = 8 THEN
          a.ChoiceOrderTotalShippedSupplierGmtAmt -
          ROUND(a.ChoiceOrderTotalShippedSupplierGmtAmt * b.QACommissionPercent / 100, 2) -
          ROUND(a.ChoiceOrderTotalShippedSupplierGmtAmt * b.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(b.LabTestIncome * b.TotalShippedQty, 2)
          ELSE
          b.TotalShippedSupplierGmtAmtAfterDiscount -
          ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.QACommissionPercent / 100, 2) -
          ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(b.LabTestIncome * b.TotalShippedQty, 2) END AS NetAmt,
          CASE WHEN c.CustomerId = 8 THEN
          ROUND((a.ChoiceOrderTotalShippedSupplierGmtAmt -
          ROUND(a.ChoiceOrderTotalShippedSupplierGmtAmt * b.QACommissionPercent / 100, 2) -
          ROUND(a.ChoiceOrderTotalShippedSupplierGmtAmt * b.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(b.LabTestIncome * b.TotalShippedQty, 2)) * a.InvoiceBuyExchangeRate / g.ExchangeRate, 2)
          ELSE
          ROUND((b.TotalShippedSupplierGmtAmtAfterDiscount -
          ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.QACommissionPercent / 100, 2) -
          ROUND(b.TotalShippedSupplierGmtAmtAfterDiscount * b.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(b.LabTestIncome * b.TotalShippedQty, 2)) * a.InvoiceBuyExchangeRate / g.ExchangeRate, 2) END AS NetAmtInUSD,

          CASE WHEN EXISTS(SELECT a.* FROM NSLDB02.NSS.dbo.ReleaseLockRequest y
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS z ON y.ShipmentId = a.ShipmentId AND y.ReleaseLockRequestId = z.ReleaseLockRequestId
          WHERE
          ReleaseLockSectionId IN (31,131,231,331,28,128,228,328,6,106,206,306,30,130,230,330,33,133,233,333,3,103,203,303,
          24,124,224,324,9,109,209,309,4,104,204,304,15,115,215,315,39,139,239,339,19,119,219,319,2,102,202,302,
          29,129,229,329)
          AND WorkFlowCompletedOn IS NULL AND y.Status = 1) THEN 0 ELSE 1 END AS EditLock, j.SunAccountCode,

          /*
          CASE WHEN EXISTS(SELECT y.* FROM NSLDB02.NSS.dbo.ReleaseLockRequest y
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS z ON y.ReleaseLockRequestId = z.ReleaseLockRequestId
          INNER JOIN ReleaseLockShipment AS x ON x.ShipmentId = y.ShipmentId AND x.IsNew = 1 AND x.ReleaseLockRequestId = y.ReleaseLockRequestId
          INNER JOIN SunInterfaceLog w ON x.ShipmentId = w.ShipmentId AND w.CategoryId = 5 AND w.SunInterfaceTypeId = 3 AND w.SunInterfaceLogId = ISNULL(x.SunInterfaceLogId ,0)
          WHERE z.ReleaseLockSectionId IN (31,131,231,331,28,128,228,328,6,106,206,306,30,130,230,330,33,133,233,333,3,103,203,303,
          24,124,224,324,9,109,209,309,4,104,204,304,15,115,215,315,39,139,239,339,19,119,219,319,2,102,202,302,
          29,129,229,329)
          AND y.ShipmentId = a.ShipmentId) THEN 0 ELSE 1 END AS EditLock,
          */
          a.ShippingDocReceiptDate,
          a.APDate,
          CASE WHEN ISNULL(h.SunInterfaceLogId, 0) > 0 THEN 1 ELSE 0 END AS IsInterfaced, b.DMSWorkflowStatusId, ISNULL(i.IsHold, 0) AS IsPaymentHold,
          CASE WHEN b.DocReviewedBy IS NOT NULL THEN (SELECT DisplayName FROM NSLDB..UserInfo WHERE UserId = b.DocReviewedBy) ELSE CONVERT(varchar, NULL) END AS ReviewUser,
          b.DocReviewedOn AS ReviewDateTime, a.InvoiceDate, a.IsUploadDMSDocument, b.LabTestIncome, b.TotalShippedQty, b.IsChinaGBTestRequired, c.SeasonId, c.ProductId,
          os.Code AS ProductTeamCode, os.Description AS ProductTeamDesc,
          (select ISNULL(sum(ddn.amt * CONVERT(decimal(18,2), pdt.Factor)),0) from shipmentdeduction ddn WITH (NOLOCK) inner join paymentdeductiontype pdt WITH (NOLOCK) on ddn.deductiontype = pdt.deductiontypeid and ddn.status = 1 and ddn.shipmentid = b.shipmentid) as DeductionAmt,
          lg.LGDate
          FROM Invoice a WITH (NOLOCK)
          INNER JOIN Shipment b WITH (NOLOCK) ON 
          (@InvoiceDateFrom IS NULL OR a.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
          AND (b.DMSWorkflowStatusId @PaymentStatus)
          AND a.APDate IS NULL AND (@VendorId = -1 OR b.VendorId = @VendorId) AND a.InvoiceDate >= '2011-04-03' AND a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.WorkflowStatusId = 8 AND (b.SplitCount = 0 OR b.IsVirtualSetSplit = 1) 
          AND (@InvoicePrefix = '' OR ((a.InvoicePrefix = @InvoicePrefix)
          AND (a.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
          AND (a.InvoiceYear = @InvoiceYear)))
          AND (@PaymentTermId = -1 OR b.PaymentTermId = @PaymentTermId)
          INNER JOIN Contract c WITH (NOLOCK) ON b.ContractId = c.ContractId AND c.Status = 1 --AND c.OfficeId = 1
          AND (@OfficeId = -1 OR c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId)) AND (@TradingAgencyId = -1 OR c.TradingAgencyId = @TradingAgencyId)
          INNER JOIN Product p WITH (NOLOCK) ON c.ProductId = p.ProductId
          INNER JOIN Currency e WITH (NOLOCK) ON b.BuyCurrencyId = e.CurrencyId
          INNER JOIN NSLIndustry..Vendor d WITH (NOLOCK) ON b.VendorId = d.VendorId
          INNER JOIN ExchangeRate f WITH (NOLOCK) ON b.BuyCurrencyId = f.CurrencyId AND a.InvoiceDate BETWEEN f.EffectiveDateFrom AND f.EffectiveDateTo AND f.ExchangeRateTypeId = 1 AND f.Status = 1
          INNER JOIN ExchangeRate g WITH (NOLOCK) ON 3 = g.CurrencyId AND a.InvoiceDate BETWEEN g.EffectiveDateFrom AND g.EffectiveDateTo AND g.ExchangeRateTypeId = 1 AND g.Status = 1
          INNER JOIN SunInterfaceLog h WITH (NOLOCK) ON a.ShipmentId = h.ShipmentId AND h.SplitShipmentId = 0 AND h.CategoryId IN (1, 3, 4) AND h.SunInterfaceTypeId = 3 AND h.SplitShipmentId = 0
          INNER JOIN NSLDB..OfficeStructure os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId
          LEFT JOIN SupplierPaymentStatus i WITH (NOLOCK) ON i.VendorId = b.VendorId
          LEFT JOIN NSLIndustry..Vendor j WITH (NOLOCK) ON b.VendorId = j.VendorId          
		  LEFT JOIN LGDetail lgd WITH (NOLOCK) ON lgd.ShipmentId=a.ShipmentId AND lgd.status=1
		  LEFT JOIN LetterOfGuarantee lg WITH (NOLOCK) ON lg.LGId = lgd.LGId AND lg.status=1
          WHERE (@SubDocDateFrom IS NULL OR CONVERT(datetime, CONVERT(varchar, a.AccountDocReceiptDate, 112)) BETWEEN @SubDocDateFrom AND @SubDocDateTo)
          AND (@InterfaceDateFrom IS NULL OR h.CreatedON BETWEEN @InterfaceDateFrom AND @InterfaceDateTo)
          AND (@HandlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @HandlingOfficeId)
          AND (@ContractNo = '' OR (c.ContractNo = @ContractNo))
          
          UNION
          SELECT a.ShipmentId, s.SplitShipmentId, s.VendorId, d.Name AS VendorName, c.ContractNo + s.SplitSuffix + '-' + CONVERT(VARCHAR, b.DeliveryNo) AS ContractNo, p.ItemNo,
          dbo.fn_formatInvoiceNo(a.InvoicePrefix, a.InvoiceSeq, a.InvoiceYear) AS InvoiceNo, a.SupplierInvoiceNo,
          e.CurrencyCode,
          s.TotalShippedSupplierGmtAmtAfterDiscount -
          ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2) -
          ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(s.LabTestIncome * s.TotalShippedQty, 2) AS NetAmt,
          ROUND((s.TotalShippedSupplierGmtAmtAfterDiscount -
          ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2) -
          ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(s.LabTestIncome * s.TotalShippedQty, 2)) * s.InvoiceBuyExchangeRate / g.ExchangeRate, 2) AS NetAmtInUSD,

          CASE WHEN EXISTS(SELECT a.* FROM NSLDB02.NSS.dbo.ReleaseLockRequest y
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS z ON y.ShipmentId = a.ShipmentId AND y.ReleaseLockRequestId = z.ReleaseLockRequestId
          WHERE
          ReleaseLockSectionId IN (31,131,231,331,28,128,228,328,6,106,206,306,30,130,230,330,33,133,233,333,3,103,203,303,
          24,124,224,324,9,109,209,309,4,104,204,304,15,115,215,315,39,139,239,339,19,119,219,319,2,102,202,302,
          29,129,229,329)
          AND WorkFlowCompletedOn IS NULL) THEN 0 ELSE 1 END AS EditLock, j.SunAccountCode,

          /*
          CASE WHEN EXISTS(SELECT y.* FROM NSLDB02.NSS.dbo.ReleaseLockRequest y
          INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS z ON y.ReleaseLockRequestId = z.ReleaseLockRequestId
          INNER JOIN ReleaseLockShipment AS x ON x.ShipmentId = y.ShipmentId AND x.IsNew = 1 AND x.ReleaseLockRequestId = y.ReleaseLockRequestId
          INNER JOIN ReleaseLockSplitShipment AS v ON x.ReleaseLockShipmentId = v.ReleaseLockShipmentId AND x.IsNew = 1 AND v.ReleaseLockRequestId = y.ReleaseLockRequestId AND v.SplitShipmentId = s.SplitShipmentId
          INNER JOIN SunInterfaceLog w ON x.ShipmentId = w.ShipmentId AND w.SplitShipmentId = v.SplitShipmentId AND w.CategoryId = 5 AND w.SunInterfaceTypeId = 3 AND w.SunInterfaceLogId = ISNULL(x.SunInterfaceLogId ,0)
          WHERE z.ReleaseLockSectionId IN (31,131,231,331,28,128,228,328,6,106,206,306,30,130,230,330,33,133,233,333,3,103,203,303,
          24,124,224,324,9,109,209,309,4,104,204,304,15,115,215,315,39,139,239,339,19,119,219,319,2,102,202,302,
          29,129,229,329)
          AND y.ShipmentId = a.ShipmentId) THEN 0 ELSE 1 END AS EditLock,
          */
          s.ShippingDocReceiptDate,
          s.APDate,
          CASE WHEN ISNULL(h.SunInterfaceLogId, 0) > 0 THEN 1 ELSE 0 END AS IsInterfaced, s.DMSWorkflowStatusId, ISNULL(i.IsHold, 0) AS IsPaymentHold,
          CASE WHEN b.DocReviewedBy IS NOT NULL THEN (SELECT DisplayName FROM NSLDB..UserInfo WHERE UserId = b.DocReviewedBy) ELSE CONVERT(varchar, NULL) END AS ReviewUser,
          b.DocReviewedOn AS ReviewDateTime, a.InvoiceDate, a.IsUploadDMSDocument, s.LabTestIncome, s.TotalShippedQty, b.IsChinaGBTestRequired, c.SeasonId, c.ProductId,
          os.Code AS ProductTeamCode, os.Description AS ProductTeamDesc, 0 AS DeductionAmt,
		  lg.LGDate
          FROM Invoice a WITH (NOLOCK)
          INNER JOIN SplitShipment s WITH (NOLOCK) ON 
          (@InvoiceDateFrom IS NULL OR a.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo)
          AND (s.DMSWorkflowStatusId @PaymentStatus)
          AND s.APDate IS NULL AND (@VendorId = -1 OR s.VendorId = @VendorId) AND a.ShipmentId = s.ShipmentId AND s.Status = 1 AND s.IsVirtualSetSplit = 0 
          AND (@PaymentTermId = -1 OR s.PaymentTermId = @PaymentTermId)          
          INNER JOIN Shipment b WITH (NOLOCK) ON a.ShipmentId = b.ShipmentId AND b.Status = 1 AND b.WorkflowStatusId = 8 AND NOT (b.SplitCount = 0 OR b.IsVirtualSetSplit = 1) AND a.InvoiceDate >= '2011-04-03'
          AND (@InvoicePrefix = '' OR ((a.InvoicePrefix = @InvoicePrefix)
          AND (a.InvoiceSeq BETWEEN @InvoiceSeqFrom AND  @InvoiceSeqTo)
          AND (a.InvoiceYear = @InvoiceYear)))
          INNER JOIN Contract c WITH (NOLOCK) ON b.ContractId = c.ContractId AND c.Status = 1 --AND c.OfficeId = 1
          AND (@OfficeId = -1 OR c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId)) AND (@TradingAgencyId = -1 OR c.TradingAgencyId = @TradingAgencyId)
          INNER JOIN Product p WITH (NOLOCK) ON c.ProductId = p.ProductId
          INNER JOIN Currency e WITH (NOLOCK) ON s.BuyCurrencyId = e.CurrencyId
          INNER JOIN NSLIndustry..Vendor d WITH (NOLOCK) ON s.VendorId = d.VendorId
          INNER JOIN ExchangeRate f WITH (NOLOCK) ON s.BuyCurrencyId = f.CurrencyId AND a.InvoiceDate BETWEEN f.EffectiveDateFrom AND f.EffectiveDateTo AND f.ExchangeRateTypeId = 1 AND f.Status = 1
          INNER JOIN ExchangeRate g WITH (NOLOCK) ON 3 = g.CurrencyId AND a.InvoiceDate BETWEEN g.EffectiveDateFrom AND g.EffectiveDateTo AND g.ExchangeRateTypeId = 1 AND g.Status = 1
          INNER JOIN SunInterfaceLog h WITH (NOLOCK) ON a.ShipmentId = h.ShipmentId AND h.SplitShipmentId = s.SplitShipmentId AND h.CategoryId IN (1, 3, 4) AND h.SunInterfaceTypeId = 3 AND s.SplitShipmentId = h.SplitShipmentId
          INNER JOIN NSLDB..OfficeStructure os WITH (NOLOCK) ON os.OfficeStructureId = c.ProductTeamId
          LEFT JOIN SupplierPaymentStatus i WITH (NOLOCK) ON i.VendorId = s.VendorId
          LEFT JOIN NSLIndustry..Vendor j WITH (NOLOCK) ON s.VendorId = j.VendorId
		  LEFT JOIN LGDetail lgd WITH (NOLOCK) ON lgd.SplitShipmentId=s.SplitShipmentId AND lgd.status=1
		  LEFT JOIN LetterOfGuarantee lg WITH (NOLOCK) ON lg.LGId = lgd.LGId AND lg.status=1
          WHERE (@SubDocDateFrom IS NULL OR CONVERT(datetime, CONVERT(varchar, s.AccountDocReceiptDate, 112)) BETWEEN @SubDocDateFrom AND @SubDocDateTo)
          AND (@InterfaceDateFrom IS NULL OR h.CreatedON BETWEEN @InterfaceDateFrom AND @InterfaceDateTo)
          AND (@HandlingOfficeId = -1 OR c.OfficeId <> 17 OR SalesForecastSpecialGroupId = @HandlingOfficeId)
          AND (@ContractNo = '' OR (c.ContractNo = @ContractNo))) AS UResult
          ]]>
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="SubDocDateFrom" name="@SubDocDateFrom" type="DateTime" direction="Input" />
          <param key="SubDocDateTo" name="@SubDocDateTo" type="DateTime" direction="Input" />
          <param key="InterfaceDateFrom" name="@InterfaceDateFrom" type="DateTime" direction="Input" />
          <param key="InterfaceDateTo" name="@InterfaceDateTo" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="int" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="int" direction="Input" />
          <param key="PaymentTermId" name="@PaymentTermId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="ArrayInt" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <selectCommand>
      <dataCommand name="GetPaymentStatusEnquiryEpicorList" type="Text">
        <commandText>
          <![CDATA[
		  
		    SELECT *, 
				    SupplierInvoiceNo = (CASE WHEN DATALENGTH(SupplierInvoiceNo_temp) > 20 
											THEN LEFT(SupplierInvoiceNo_temp,17) + RIGHT(SupplierInvoiceNo_temp,3) 
											ELSE SupplierInvoiceNo_temp END), 
            CNT = (Select Count(*) FROM Shipment As ts
						INNER JOIN NSLDB..AccountFinancialCalender b ON b.AppId = 13 AND b.Status = 1 AND CONVERT(datetime,convert(varchar, dateadd(d,-30,getdate()) , 102)) between b.startdate and b.enddate
						LEFT JOIN splitShipment AS ss1 WITH (NOLOCK) ON ss1.ShipmentId=ts.ShipmentId AND (ts.IsVirtualSetSplit=0 AND ss1.IsVirtualSetSplit=0 AND ss1.Status=1)
						inner join Currency AS ccy1 WITH (NOLOCK) ON ccy1.CurrencyId = isnull(ss1.BuyCurrencyId,ts.BuyCurrencyId)
						where (ts.VendorId = SupplierID or ss1.vendorid = SupplierID) and ts.status = 1 and ts.WorkflowStatusId in (1,2,4,6,7) and ts.IsMockShopSample = 0 AND ts.IsStudioSample = 0
						and ts.CustomerAtWarehouseDate > b.startdate),
            CNTByOffice = (Select Count(*) from shipment As ts
						inner join nsldb..accountfinancialcalender b on b.appid = 13 and b.status = 1 and convert(datetime,convert(varchar, dateadd(d,-30,getdate()) , 102)) between b.startdate and b.enddate
						LEFT JOIN splitShipment AS ss1 WITH (NOLOCK) ON ss1.ShipmentId=ts.ShipmentId AND (ts.IsVirtualSetSplit=0 AND ss1.IsVirtualSetSplit=0 AND ss1.Status=1)
						inner join Currency AS ccy1 WITH (NOLOCK) ON ccy1.CurrencyId = isnull(ss1.BuyCurrencyId,ts.BuyCurrencyId)
            inner join contract c on c.ContractId = ts.ContractId and (c.officeid in (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId =  @officeId) or @officeid = -1)
						where (ts.VendorId = SupplierID or ss1.vendorid = SupplierID) and ts.status = 1 and ts.WorkflowStatusId in (1,2,4,6,7) and ts.IsMockShopSample = 0 AND ts.IsStudioSample = 0
						and ts.CustomerAtWarehouseDate > b.startdate),
            dbo.fn_getVendorNSLDocCount(VendorId) AS VendorDocCnt,
            dbo.fn_getOSAdvancePaymentInstalments(VendorId) AS OSAdvPaymentInstalments,
            dbo.fn_OSUKClaim(VendorId, @OfficeId) AS OSUKClaim,
            dbo.fn_OSUKClaim(VendorId, -1) AS OSUKClaimAllOffice
		  from 
		  (
				SELECT
						cm.EpicorCompanyId,
						GroupId = convert(varchar(10),''),
						BankAccount = '',
						PaymentMethod = 11,
						v.EpicorSupplierId,
						PaymentDate = convert(datetime,null),
						PaymentNo = convert(varchar(10),'0'),
						SupplierInvoiceNo_temp = ltrim(rtrim(


												ISNULL((SELECT TOP 1 ISNULL(DCNoteNo,SupplierInvoiceNo) 
															FROM SUNInterfaceLog WITH (NOLOCK) 
															WHERE ShipmentId = s.ShipmentId and SplitShipmentId=isnull(ss.SplitShipmentId,0)
																AND SUNInterfaceTypeId = 3 AND CategoryId <> 2
															ORDER BY SunInterfaceLogId DESC) 
														+ (SELECT (case when Count(*)>1 then '-'+convert(varchar,COUNT(*)-1) else '' end) 
															FROM SUNInterfaceLog WITH (NOLOCK) 
															WHERE ShipmentId = s.ShipmentId and SplitShipmentId=isnull(ss.SplitShipmentId,0)
																AND SUNInterfaceTypeId = 3 AND CategoryId <> 2),
												ISNULL((CASE WHEN ss.SplitShipmentId IS NOT NULL THEN ss.SupplierInvoiceNo ELSE i.SupplierInvoiceNo END),''))
												)), 
						BankCharge = 0.00,
						LCBillRefNo = NULL,
						AutoPost = 0,
						Source = 'ISAM',
						InvoiceDate = i.InvoiceDate,
						SupplierName = v.Name,
						InvoiceNo = dbo.fn_formatInvoiceNo( i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
						ContractNo = c.ContractNo + ISNULL(ss.SplitSuffix,'') + '-' + convert(varchar,s.DeliveryNo),
						p.ItemNo,

						ccy.CurrencyCode,
						NetAmount = (CASE WHEN c.CustomerId=8 THEN ChoiceOrderTotalShippedSupplierGmtAmt -
          ROUND(i.ChoiceOrderTotalShippedSupplierGmtAmt * s.QACommissionPercent / 100, 2) -
          ROUND(i.ChoiceOrderTotalShippedSupplierGmtAmt * s.VendorPaymentDiscountPercent / 100, 2) -
          ROUND(s.LabTestIncome * s.TotalShippedQty, 2)
            
                     ELSE
										(CASE WHEN ss.SplitShipmentId IS NOT NULL 
											THEN ss.TotalShippedSupplierGmtAmtAfterDiscount 
													- ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.QACommissionPercent / 100, 2)
													- ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.VendorPaymentDiscountPercent / 100, 2)
													- ROUND(ss.LabTestIncome * ss.TotalShippedQty, 2) 
											ELSE s.TotalShippedSupplierGmtAmtAfterDiscount 
													- ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2)
													- ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
													- ROUND(s.LabTestIncome * s.TotalShippedQty, 2) 
											END)
										END),
						NetAmount_USD = CONVERT( numeric(18,2), 
											(CASE WHEN c.CustomerId=8 THEN ChoiceOrderTotalShippedSupplierGmtAmt  -
                     ROUND(i.ChoiceOrderTotalShippedSupplierGmtAmt * s.QACommissionPercent / 100, 2) -
                     ROUND(i.ChoiceOrderTotalShippedSupplierGmtAmt * s.VendorPaymentDiscountPercent / 100, 2) -
                     ROUND(s.LabTestIncome * s.TotalShippedQty, 2)
                      
                      ELSE
												(CASE WHEN ss.SplitShipmentId IS NOT NULL 
													THEN ss.TotalShippedSupplierGmtAmtAfterDiscount 
														  - ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.QACommissionPercent / 100, 2)
														  - ROUND(ss.TotalShippedSupplierGmtAmtAfterDiscount * ss.VendorPaymentDiscountPercent / 100, 2)
														  - ROUND(ss.LabTestIncome * ss.TotalShippedQty, 2) 
													ELSE s.TotalShippedSupplierGmtAmtAfterDiscount 
														  - ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.QACommissionPercent / 100, 2)
														  - ROUND(s.TotalShippedSupplierGmtAmtAfterDiscount * s.VendorPaymentDiscountPercent / 100, 2)
														  - ROUND(s.LabTestIncome * s.TotalShippedQty, 2) 
													END)
												END)
											* (exb.ExchangeRate / exu.ExchangeRate )),
						WorkflowStatus = wk.Description,
						ReviewedBy = u.DisplayName,
						ReviewedOn = s.DocReviewedOn,
						HoldPayment = ISNULL(sp.IsHold , 0),
						ReleaseLock = (CASE WHEN EXISTS(
													SELECT * 
														FROM NSLDB02.NSS.dbo.ReleaseLockRequest as r
															INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS rd ON r.ShipmentId = s.ShipmentId AND rd.ReleaseLockRequestId = r.ReleaseLockRequestId
														WHERE
															WorkFlowCompletedOn IS NULL AND r.Status = 1
															and	ReleaseLockSectionId IN (31,131,231,331,28,128,228,328,6,106,206,306,30,130,230,330,33,133,233,333,3,103,203,303,
																	24,124,224,324,9,109,209,309,4,104,204,304,15,115,215,315,39,139,239,339,19,119,219,319,2,102,202,302,
																	29,129,229,329))
													THEN 1 ELSE 0 END),
						s.IsChinaGBTestRequired, GBTestResult = -1,
						p.ProductId, SupplierID = v.VendorID,
						ProductTeamCode = os.Code,
						ProductTeamDescription = os.Description,
            CASE WHEN ss.SplitShipmentId IS NULL THEN (select ISNULL(sum(ddn.amt * pdt.Factor),0) from shipmentdeduction ddn WITH (NOLOCK) inner join paymentdeductiontype pdt WITH (NOLOCK) on ddn.deductiontype = pdt.deductiontypeid and ddn.status = 1 and ddn.shipmentid = s.shipmentid) ELSE 0 END as DeductionAmt,
            v.VendorId,
			      CASE WHEN lg.LGDate IS NOT NULL AND i.InvoiceDATE IS NOT NULL THEN DATEADD(d, 60, i.InvoiceDate) ELSE NULL END AS LGDate
					FROM Shipment AS s WITH (NOLOCK)
						INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId
							AND i.APDate IS NULL
							AND i.status = 1
						INNER JOIN WorkflowStatus AS wk WITH (NOLOCK) ON wk.WorkflowStatusId = s.DMSWorkflowstatusId 
							AND wk.RecordTypeId = 4
							AND s.DMSWorkflowStatusId = 4
							AND s.status = 1 
						LEFT JOIN splitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.IsVirtualSetSplit=0 AND ss.IsVirtualSetSplit=0 AND ss.Status=1)
						INNER JOIN Currency AS ccy WITH (NOLOCK) ON ccy.CurrencyId = isnull(ss.BuyCurrencyId,s.BuyCurrencyId)
						INNER JOIN ExchangeRate AS exb WITH (NOLOCK) ON exb.CurrencyId = ccy.CurrencyId
								AND exb.ExchangeRateTypeId = 1
								AND exb.status = 1
								AND i.InvoiceDate BETWEEN exb.EffectiveDateFrom AND exb.EffectiveDateTo
						INNER JOIN ExchangeRate AS exu WITH (NOLOCK) ON exu.CurrencyId = 3
								AND exu.ExchangeRateTypeId = 1
								AND exu.status = 1
								AND i.InvoiceDate BETWEEN exu.EffectiveDateFrom AND exu.EffectiveDateTo
						INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId and c.Status=1
            INNER JOIN NSLDB..OfficeStructure AS os ON os.OfficeStructureId = c.ProductTeamId
						LEFT JOIN SunInterfaceLog AS il WITH (NOLOCK) ON il.ShipmentId = i.ShipmentId AND il.SplitShipmentId = ISNULL(ss.SplitShipmentId,0) AND il.CategoryId IN (1, 3, 4) AND il.SunInterfaceTypeId = 3  and il.QueueId<>-1
						LEFT JOIN NSLIndustry..Vendor AS v WITH (NOLOCK) ON v.VendorId = isnull(ss.VendorId,s.VendorId)
						LEFT JOIN Product AS p WITH (NOLOCK) ON p.ProductId = isnull(ss.ProductId,c.ProductId)
						LEFT JOIN NSLDB.dbo.CompanyOfficeMapping AS cm WITH (NOLOCK) ON cm.OfficeId = c.OfficeId AND cm.ReportingDatabaseId = 1 AND cm.status = 1
						LEFT JOIN NSLDB.dbo.UserInfo AS u WITH (NOLOCK) ON u.UserId = s.DocReviewedBy			
						LEFT JOIN SupplierPaymentStatus AS sp WITH (NOLOCK) ON sp.VendorId = isnull(ss.VendorId,s.VendorId) AND sp.IsHold = 1 
						LEFT JOIN LGDetail lgd WITH (NOLOCK) ON (lgd.ShipmentId=s.ShipmentId AND ISNULL(ss.SplitShipmentId,0)=lgd.SplitShipmentId) AND lgd.status=1
						LEFT JOIN LetterOfGuarantee lg WITH (NOLOCK) ON lg.LGId = lgd.LGId AND lg.status=1
					WHERE
						(@InvoicePrefix = '' OR (i.InvoicePrefix = @InvoicePrefix AND i.InvoiceSeq BETWEEN @InvoiceSeqFrom AND @InvoiceSeqTo AND i.InvoiceYear = @InvoiceYear))
						AND (@InvoiceDateFrom IS NULL OR (i.InvoiceDate BETWEEN @InvoiceDateFrom AND @InvoiceDateTo))
						AND (@SubDocDateFrom IS NULL OR (i.AccountDocReceiptDate > @SubDocDateFrom AND i.AccountDocReceiptDate < @SubDocDateTo+1))
						AND (@InterfaceDateFrom IS NULL OR il.CreatedON BETWEEN @InterfaceDateFrom AND @InterfaceDateTo)
						AND (@OfficeId = -1 OR c.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId)) 
						AND (@HandlingOfficeId = -1 OR c.OfficeId <> 17 OR s.SalesForecastSpecialGroupId = @HandlingOfficeId)
						AND (@TradingAgencyId = -1 OR c.TradingAgencyId = @TradingAgencyId)
						AND (@PaymentTermId = -1 OR s.PaymentTermId = @PaymentTermId)
						AND (@VendorId = -1 OR v.VendorId = @VendorId)
						AND (s.DMSWorkflowStatusId @PaymentStatus)
						AND (@ContractNo = '' OR c.ContractNo = @ContractNo)
			  ) as x
        ORDER BY SupplierName, CurrencyCode, InvoiceDate
				]]>
        </commandText>
        <parameters>
          <param key="InvoicePrefix" name="@InvoicePrefix" type="varchar" direction="Input" />
          <param key="InvoiceSeqFrom" name="@InvoiceSeqFrom" type="int" direction="Input" />
          <param key="InvoiceSeqTo" name="@InvoiceSeqTo" type="int" direction="Input" />
          <param key="InvoiceYear" name="@InvoiceYear" type="int" direction="Input" />
          <param key="InvoiceDateFrom" name="@InvoiceDateFrom" type="DateTime" direction="Input" />
          <param key="InvoiceDateTo" name="@InvoiceDateTo" type="DateTime" direction="Input" />
          <param key="SubDocDateFrom" name="@SubDocDateFrom" type="DateTime" direction="Input" />
          <param key="SubDocDateTo" name="@SubDocDateTo" type="DateTime" direction="Input" />
          <param key="InterfaceDateFrom" name="@InterfaceDateFrom" type="DateTime" direction="Input" />
          <param key="InterfaceDateTo" name="@InterfaceDateTo" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="int" direction="Input" />
          <param key="TradingAgencyId" name="@TradingAgencyId" type="int" direction="Input" />
          <param key="PaymentTermId" name="@PaymentTermId" type="int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="int" direction="Input" />
          <param key="PaymentStatus" name="@PaymentStatus" type="ArrayInt" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="PaymentStatusEnquiry" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="DebitNoteToNUKParamApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetBeneficiaryAccountNoList" type="Text">
        <commandText>
          SELECT BeneficiaryAccountNo FROM DebitNoteToNUKParam
          WHERE OfficeId = @officeId
          AND CurrencyId = @currencyId
        </commandText>
        <parameters>
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetDebitNoteToNUKParamByKey" type="Text">
        <commandText>
          SELECT * FROM DebitNoteToNUKParam WHERE OfficeId = @officeId
          AND CurrencyId = @currencyId
        </commandText>
        <parameters>
          <param key="OfficeId" name="@officeId" type="int" direction="Input" />
          <param key="CurrencyId" name="@currencyId" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="DebitNoteToNUKParam" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ReleaseLockStatisticApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetReleaseLockStatistic" type="Text">
        <commandText>
          <![CDATA[
          

SELECT ReleaseLockSectionDesc,
	-- UK Discount, Reason, Discount Price
	SUM(CASE WHEN o.OfficeCode = 'BD' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS DB,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND (( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount)) THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLocKSectionId IN ( 33, 133, 233, 333 )	-- UK Discount, Reason, Discount Price
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1		
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE 					
	(( RA.TotalShippedAmtAfterDiscount <> RB.TotalShippedAmtAfterDiscount ) OR ( RA.TotalShippedSupplierGmtAmtAfterDiscount <> RB.TotalShippedSupplierGmtAmtAfterDiscount))		
GROUP BY	
	ReleaseLockSectionDesc		

UNION

SELECT ReleaseLockSectionDesc,
-- FOB Price
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS VN,		
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END ) AS DG,		
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.TotalShippedNetFOBAmt - RB.TotalShippedNetFOBAmt ) <> 0 THEN 1 ELSE 0 END )	 AS EG	
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLockSectionId IN ( 9, 109, 209, 309 )	-- FOB Price
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1			
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.TotalShippedNetFOBAmt <> RB.TotalShippedNetFOBAmt) --|| FOB Price	
GROUP BY	
	ReleaseLockSectionDesc	

UNION

SELECT ReleaseLockSectionDesc,

-- Other Cost
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.TotalShippedOtherCost - RB.TotalShippedOtherCost ) <> 0 THEN 1 ELSE 0 END )	 AS EG	

FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLockSectionId IN ( 15, 115, 215, 315 ) 	-- Other Cost
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.TotalShippedOtherCost <> RB.TotalShippedOtherCost) --|| Other Cost		
GROUP BY	
	ReleaseLockSectionDesc		

UNION

SELECT ReleaseLockSectionDesc,
-- QA Commission
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS PK, 		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.QACommissionPercent <> RB.QACommissionPercent ) THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLocKSectionId IN ( 39, 139, 239, 339 )	-- QA Commission %
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.QACommissionPercent <> RB.QACommissionPercent )	--|| QA Commission Percent
GROUP BY	
	ReleaseLockSectionDesc	

UNION


SELECT ReleaseLockSectionDesc,

-- Selling Price
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS LK, 		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.TotalShippedAmt - RB.TotalShippedAmt ) <> 0 THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLockSectionId IN ( 24, 124, 224, 324 )	-- Selling Price
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.TotalShippedAmt <> RB.TotalShippedAmt )		--|| Selling Price
GROUP BY	
	ReleaseLockSectionDesc		



UNION


SELECT ReleaseLockSectionDesc,

-- Shipped Qty		
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.TotalShippedQty - RB.TotalShippedQty ) <> 0 THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLockSectionId IN ( 2, 102, 202, 302 )	-- Shipped Qty
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.TotalShippedQty <> RB.TotalShippedQty) 		--|| Shipped Qty
GROUP BY	
	ReleaseLockSectionDesc		

UNION

SELECT ReleaseLockSectionDesc,
-- Settlement Discount %
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS IN,		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLocKSectionId IN ( 37, 137, 237, 337 )	-- Settlement Discount %
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.VendorPaymentDiscountPercent <> RB.VendorPaymentDiscountPercent ) --|| Vendor Payment Discount (Settlment Discount)		
GROUP BY	
	ReleaseLockSectionDesc		

UNION

SELECT ReleaseLockSectionDesc,
-- Vendor
	SUM(CASE WHEN o.OfficeCode = 'BD' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS BD,		
	SUM(CASE WHEN o.OfficeCode = 'HK' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS HK,		
	SUM(CASE WHEN o.OfficeCode = 'IN' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS IN, 		
	SUM(CASE WHEN o.OfficeCode = 'LK' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS LK,		
	SUM(CASE WHEN o.OfficeCode = 'ND' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS ND,		
	SUM(CASE WHEN o.OfficeCode = 'PK' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS PK,		
	SUM(CASE WHEN o.OfficeCode = 'SH' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS SH,		
	SUM(CASE WHEN o.OfficeCode = 'TH' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS TH,		
	SUM(CASE WHEN o.OfficeCode = 'TR' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS TR,
	SUM(CASE WHEN o.OfficeCode = 'VN' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS VN,
	SUM(CASE WHEN o.OfficeCode = 'DG' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS DG,
	SUM(CASE WHEN o.OfficeCode = 'EG' AND ( RA.VendorId <> RB.VendorId ) THEN 1 ELSE 0 END ) AS EG
FROM	NSLDB02.NSS.dbo.ReleaseLockRequest AS RR WITH (NOLOCK)		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockRequestDetail AS RD WITH (NOLOCK) ON RR.ReleaseLockRequestId = RD.ReleaseLockRequestId		
	INNER JOIN NSLDB02.NSS.dbo.ReleaseLockSection AS RS WITH (NOLOCK) ON RS.ReleaseLockSectionId = RD.ReleaseLockSectionId		
		AND RS.ReleaseLockParties IN ( 4 )	
		AND (@ReleaseDateFrom IS NULL OR  RR.ReleasedOn BETWEEN @ReleaseDateFrom AND @ReleaseDateTo)
		AND RS.ReleaseLocKSectionId IN ( 28, 128, 228, 328 )	-- Change Vendor
	INNER JOIN Shipment AS S WITH (NOLOCK) ON S.ShipmentId = RR.ShipmentId		
	INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId AND s.status = 1 AND c.status = 1	
	INNER JOIN Office AS o WITH (NOLOCK) ON o.OfficeId = c.OfficeId		
	INNER JOIN ReleaseLockShipment AS RB ON RB.ReleaseLockRequestid = RR.ReleaseLockRequestId		
		AND RB.ShipmentId = RR.ShipmentId	
		AND RB.IsNew = 0	
	INNER JOIN ReleaseLockShipment AS RA on RA.ReleaseLockRequestId = RB.ReleaseLockRequestId		
		AND RA.ShipmentId = RR.ShipmentId	
		AND RA.IsNew = 1	
	INNER JOIN CutOffSales AS cosales ON cosales.ShipmentId = s.ShipmentId AND (@FiscalYear = -1 OR (FiscalYear = @FiscalYear AND Period BETWEEN @PeriodFrom AND @PeriodTo))
WHERE
	( RA.VendorId <> RB.VendorID ) --|| Vendor 		
GROUP BY	
	ReleaseLockSectionDesc		

          
          ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="int" direction="Input" />
          <param key="ReleaseDateFrom" name="@ReleaseDateFrom" type="DateTime" direction="Input" />
          <param key="ReleaseDateTo" name="@ReleaseDateTo" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ReleaseLockStatistic" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="TallyUploadHistoryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetTallyUploadHistory" type="Text">
        <commandText>
          SELECT * FROM TallyUploadHistory order by TallyUploadHistoryId desc
        </commandText>
      </dataCommand>

      <dataCommand name="GetRecentTallyUploadHistory" type="Text">
        <commandText>
          SELECT TOP 50 * FROM TallyUploadHistory ORDER BY TallyUploadHistoryId DESC
        </commandText>
      </dataCommand>

      <dataCommand name="GetTallyUploadHistoryByKey" type="Text">
        <commandText>
          SELECT * FROM TallyUploadHistory WHERE TallyUploadHistoryId = @TallyUploadHistoryId
        </commandText>
        <parameters>
          <param key="TallyUploadHistoryId" name="@TallyUploadHistoryId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxTallyUploadHistoryId" type="Text">
        <commandText>
          SELECT MAX(TallyUploadHistoryId) FROM TallyUploadHistory
        </commandText>
      </dataCommand>

      <dataCommand name="GetMaxTallyUploadSequenceNo" type="Text">
        <commandText>
          SELECT ISNULL(MAX(SequenceNoEnd),0) FROM TallyUploadHistory
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="TallyUploadHistory" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="CutoffSalesDiscrepancyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetCutoffSalesDiscrepancyReport" type="Text">
        <commandText>
          <![CDATA[ 
						SELECT  
								Office = (SELECT OfficeCode FROM Office WITH (NOLOCK) WHERE OfficeId=x.OfficeId),
								ProductTeam = (SELECT Description FROM NSLDB..OfficeStructure WITH (NOLOCK) WHERE OfficeStructureId=x.ProductTeamId),
								Customer = (SELECT CustomerCode FROM Customer WITH (NOLOCK) WHERE CustomerId=x.CustomerId),
								ContractNo, DeliveryNo,
								ItemNo = (SELECT ItemNo FROM Product WITH (NOLOCK) WHERE ProductId=x.ProductId),
								InvoiceNo = dbo.fn_formatinvoiceno(invoicePrefix,invoiceseq,invoiceYear),
								InvoiceDate = InvoiceDate,
								ActualAtWarehouseDate,
								ILSActualAtWarehouseDate,
								Currency = (SELECT CurrencyCode FROM Currency WITH (NOLOCK) WHERE CurrencyId=x.SellCurrencyId),
								SalesAmount = TotalShippedAmt,
								SalesAmountUSD = ISNULL(Convert(varchar,ROUND(TotalShippedAmt * (CASE WHEN x.WorkflowStatusId=8 THEN x.InvoiceSellExchangeRate / ri.ExchangeRate ELSE r.ExchangeRate / ru.ExchangeRate END) ,2)), ''),
								InCutoffSales = (CASE WHEN InCutoffSales=1 THEN 1 ELSE 0 END), 
								InSalesReport = (CASE WHEN InSalesReport=1 THEN 1 ELSE 0 END),
								Remark = (CASE WHEN InSalesReport=0 THEN 'Missing in Sales Report' + (CASE WHEN NOT(x.StwDate BETWEEN @DateFrom AND @DateTo) THEN ' : STW Date out of the period' ELSE '' END)  
												WHEN InCutoffSales=0 THEN (CASE WHEN SunExcludedShipment=1 THEN 'Excluded in Cutoff Sales : ' + x.ExcludeRemark  ELSE 'Missing in Cutoff Sales' END)
												ELSE '' END)
						 FROM (
								SELECT s.ShipmentId, c.OfficeId, c.ProductTeamId, c.CustomerId, c.ProductId,
									c.ContractNo, s.DeliveryNo, 
									i.invoicePrefix,i.invoiceseq,i.invoiceYear,	i.InvoiceDate, i.InvoiceUploadDate, 
									i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate,
									StwDate = isnull(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate),
									s.SellCurrencyId, i.InvoiceSellExchangeRate,
									TotalShippedAmt = (CASE WHEN c.CustomerId = 8 THEN i.ChoiceOrderTotalShippedAmt ELSE s.TotalShippedAmt END),
									InCutoffSales = (CASE WHEN ( (s.WorkflowStatusId IN (8) 
																	AND i.InvoiceDate <= @DateTo AND i.InvoiceUploadDate >= ( convert(datetime,@DateFrom) - 180 ) 
																	AND NOT (c.CustomerId = 8 AND c.OfficeId = 1)
																 )
																 OR 
																 (s.WorkflowStatusId IN (2,4,6,7) 
																	AND ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN @DateFrom AND @DateTo 
																	AND c.CustomerId IN (1, 2, 5, 6, 7)	
																	AND (s.CustomerDestinationId IN (1, 2, 3, 6, 7, 69, 70) AND s.TermOfPurchaseId NOT IN (5))
																  ) 
																)
																AND	(s.IsMockShopSample = 0 AND s.IsStudioSample=0)
																AND i.IsSelfBilledOrder = 1
			 													AND cs.ShipmentId is null
			 													AND es.ShipmentId is null
															THEN 1 ELSE 0 END),
									InSalesReport = (CASE WHEN s.WorkflowStatusId IN (2,4,6,7,8) 
																AND ISNULL(i.ActualAtWarehouseDate,i.ILSActualAtWarehouseDate) BETWEEN @DateFrom AND @DateTo
																AND c.CustomerId in (1,2,5,6,7)
																AND (s.IsMockShopSample=0 AND s.IsPressSample=0 AND s.IsStudioSample=0)
																AND i.IsSelfBilledOrder = 1
															THEN 1 ELSE 0 END),
									SunExcludedShipment = (CASE WHEN es.ShipmentId IS NOT NULL THEN 1 ELSE 0 END),
									ExcludeRemark = es.Remark,
									s.WorkflowStatusId						
								FROM Shipment AS s WITH (NOLOCK) 
									INNER JOIN Contract AS c WITH (NOLOCK) ON s.ContractId = c.ContractId AND c.Status = 1 AND c.OfficeId = @OfficeId
									INNER JOIN Invoice AS i WITH (NOLOCK) ON s.ShipmentId = i.ShipmentId AND s.Status = 1 
									LEFT JOIN CutoffSales AS cs WITH (NOLOCK) ON cs.ShipmentId=s.ShipmentId
									LEFT JOIN SunExcludeShipment AS es WITH (NOLOCK) ON es.ShipmentId=s.ShipmentId
								WHERE		 
									 ( --CutoffSales
										( (s.WorkflowStatusId IN (8) 
											AND i.InvoiceDate <= @DateTo AND i.InvoiceUploadDate >= (convert(datetime,@DateFrom) - 180) 
											AND NOT (c.CustomerId = 8 AND c.OfficeId = 1)
										  )	-- Actual
										  OR
										  (s.WorkflowStatusId IN (2,4,6,7) 
												AND ISNULL(i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) BETWEEN @DateFrom AND @DateTo 
												AND c.CustomerId IN (1, 2, 5, 6, 7)	AND (s.CustomerDestinationId  IN (1, 2, 3, 6, 7, 69, 70) AND s.TermOfPurchaseId NOT IN (5))
										  )	-- Accrual
										)
										AND	s.IsMockShopSample = 0
										AND cs.ShipmentId is null
										AND es.ShipmentId is null
									 )
									 OR 
									 ( -- Sales Report
										s.WorkflowStatusId IN (2,4,6,7,8) 
										AND ISNULL(i.ActualAtWarehouseDate,i.ILSActualAtWarehouseDate) BETWEEN @DateFrom AND @DateTo
										AND c.CustomerId in (1,2,5,6,7)
										AND (s.IsMockShopSample=0 AND s.IsPressSample=0)
									 )
							) as x 
							LEFT JOIN ExchangeRate r  WITH (NOLOCK) ON r.CurrencyId = x.SellCurrencyId  AND r.ExchangeRateTypeId = 1 AND x.StwDate BETWEEN r.EffectiveDateFrom AND r.EffectiveDateTo
							LEFT JOIN ExchangeRate ru WITH (NOLOCK) ON ru.CurrencyId = 3 AND ru.ExchangeRateTypeId = 1 AND x.StwDate BETWEEN ru.EffectiveDateFrom AND ru.EffectiveDateTo
							LEFT JOIN ExchangeRate ri WITH (NOLOCK) ON ri.CurrencyId = 3 AND ri.ExchangeRateTypeId = 1 AND x.InvoiceDate BETWEEN ri.EffectiveDateFrom AND ri.EffectiveDateTo
							where 
								InCutoffSales<>InSalesReport
								AND x.CustomerId in (1,2,5,6,7)
							ORDER BY InvoiceNo
				]]>
        </commandText>
        <parameters>
          <param key="DateFrom" name="@DateFrom" type="DateTime" direction="Input" />
          <param key="DateTo" name="@DateTo" type="DateTime" direction="Input" />
          <param key="officeId" name="@officeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="CutoffSalesDiscrepancy" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="MonthEndShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetMonthEndSlippageReport" type="Text">
        <commandText>
          <![CDATA[ 
					SELECT	
						FiscalYear = @FiscalYear,
						Period = @Period,
						ShipmentId,
						Office=(SELECT OfficeCode FROM Office WHERE OfficeId=cs.OfficeId),
						ContractNo, DeliveryNo,
						InvoiceNo,
						InvoiceDate,
						SupplierInvoiceNo,
						Vendor=(SELECT Name FROM NslIndustry..Vendor WHERE vendorId=cs.VendorId),
						QACommissionPercent, 
						VendorPaymentDiscountPercent,
						TotalShippedQty, 
						Currency = (select CurrencyCode from Currency where CurrencyId=cs.CurrencyId),
						SalesAmount, 
						SalesAmountUSD = round(SalesAmount * InvoiceSellExchangeRate / ru.ExchangeRate,2),
						NSLCommission,
						NSLCommissionUSD = round(NSLCommission * InvoiceSellExchangeRate / ru.ExchangeRate,2),
						IsAccrual, InvoiceDate,
						ActualAtWarehouseDate,
						ILSActualAtWarehouseDate,
						AmendInvoiceDate,
						AmendAtWarehouseDate,
						AmendFiscalYear = afc.BudgetYear,
						AmendPeriod = afc.Period
					FROM
						--(select * from dbo.fn_SalesCutoffExcludeDetail(@FiscalYear, @Period, @OfficeCode) ) as x
						CutoffSlippage as cs 
						left join ExchangeRate as ru with (nolock) on ru.currencyId = 3 and ExchangeRateTypeId=1 and cs.InvoiceDate between ru.EffectiveDateFrom and ru.EffectiveDateTo and ru.status=1				
						left join nsldb..AccountFinancialCalender as afc with (nolock) on afc.AppId=13 and afc.Status=1 and isnull(AmendInvoiceDate,AmendAtWarehouseDate) between afc.StartDate and afc.EndDate
					WHERE cs.FiscalYear=@FiscalYear
						AND cs.Period=@Period
						AND cs.OfficeId=(Select OfficeId from Office WHERE OfficeCode=@OfficeCode AND Status=1)
					]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="MonthEndShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="MonthEndCutoffApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="SalesCutoff" type="Text">
        <commandText>
          EXEC sp_SalesCutoff 'S', @FiscalYear, @Period, @OfficeCode
        </commandText>
        <parameters>
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GenerateCutoffSlippage" type="Text">
        <commandText>
          EXEC sp_generateCutoffSlippage @FiscalYear, @Period, @OfficeCode
        </commandText>
        <parameters>
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="MoveSlippageShipmentToNextPeriod" type="Text">
        <commandText>
          EXEC sp_MoveSlippageShipmentToNextPeriod @FiscalYear, @Period, @OfficeCode
        </commandText>
        <parameters>
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="UpdateSlippageShipmentAWHDateInNSS" type="Text">
        <commandText>
          EXEC sp_UpdateSlippageShipmentAWHDateInNSS @FiscalYear, @Period, @OfficeCode
        </commandText>
        <parameters>
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="SalesCutOffCaptureTemporaryPayment" type="Text">
        <commandText>
          EXEC sp_SalesCutOffCaptureTemporaryPayment @FiscalYear, @Period, @OfficeCode
        </commandText>
        <parameters>
          <param key="OfficeCode" name="@OfficeCode" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SalesCutoff" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NUKSalesApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="CaptureNUKSales" type="Text">
        <commandText>
          EXEC sp_GetMonthEndShipment @FiscalYear, @Period
        </commandText>
        <parameters>

          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NUKSales" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NUKSalesCutOffSummaryApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetNUKSalesCutOffSummary" type="Text">
        <commandText>
          SELECT ms.ContractNo, ms.DeliveryNo, ms.InvoiceNo AS NSLInvoiceNo, null AS Units, null AS Currency, null AS NSLValue, null AS [Description],
          null AS CustomerCode, null AS ProductTeamCode
          FROM ILSMonthEndShipment ms WITH (NOLOCK)
          INNER JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.OrderRefId = ms.OrderRefId
          LEFT JOIN Shipment s WITH (NOLOCK) ON s.ShipmentId = ir.ShipmentId
          --LEFT JOIN CustomerDestination cd WITH (NOLOCK) ON cd.CustomerDestinationId = s.CustomerDestinationId  and UTurnOrder = 0
          LEFT JOIN CustomerDestination cd WITH (NOLOCK) ON cd.CustomerDestinationId = s.CustomerDestinationId  AND s.TermOfPurchaseId NOT IN (5)
          LEFT JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId
          WHERE
          (SELECT STATUS FROM ILSMonthEndLog WITH (NOLOCK) WHERE OrderRefid = ir.OrderRefId AND  FileNo =
          (SELECT MAX(FileNo) FROM ILSMonthEndLog WITH (NOLOCK) WHERE OrderRefId = ir.OrderRefId and CONVERT(datetime, CONVERT(varchar, NUKExtractDate, 112)) BETWEEN @PeriodStartDate AND @PeriodEndDate)) IN (25,26)
          AND NOT EXISTS(SELECT ShipmentId FROM NukSales WHERE ShipmentId = ir.ShipmentId)

          UNION

          SELECT ns.ContractNo, ns.DeliveryNo,
          NSLInvoiceNo = CASE WHEN ns.NSLInvoiceNo IS NULL OR ns.NSLInvoiceNo = ''
          THEN (SELECT InvoiceNo FROM ILSInvoice ii INNER JOIN ILSOrderRef ir on ir.OrderRefId = ii.OrderRefId WHERE ir.ShipmentId = ns.ShipmentId)
          ELSE ns.NSLInvoiceNo END,
          s.TotalShippedQty AS Units, ns.Currency, s.TotalShippedAmt AS NSLValue, ws.[Description],
          d.CustomerCode, e.Code AS ProductTeamCode
          FROM NUKSales ns
          INNER JOIN Shipment s ON s.ShipmentId = ns.ShipmentId
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Customer d ON d.CustomerId = c.CustomerId
          INNER JOIN NSLDB..OfficeStructure e ON e.OfficeStructureId = c.ProductTeamId
          INNER JOIN WorkflowStatus ws ON ws.WorkflowStatusId = s.WorkflowStatusId AND RecordTypeId = 1
          WHERE FiscalYear = @FiscalYear AND Period = @Period
          ORDER BY 3,1,2
        </commandText>
        <parameters>

          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="PeriodStartDate" name="@PeriodStartDate" type="DateTime" direction="Input" />
          <param key="PeriodEndDate" name="@PeriodEndDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NUKSalesCutOffSummary" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NUKSalesShippingReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetNUKSalesShippingReport" type="Text">
        <commandText>
          <![CDATA[
          SELECT
          FiscalYear = @FiscalYear,
          Period = @Period,
          (SELECT OfficeCode FROM Office WHERE OfficeId=c.OfficeId) AS [Office],
          c.ContractNo AS [ContractNo],
          s.DeliveryNo  AS [DeliveryNo],
          dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear)  AS InvoiceNo,
           i.InvoiceDate AS InvoiceDate,
           i.SupplierInvoiceNo,
          (SELECT Code FROM NSLDB..OfficeStructure WHERE OfficeStructureId = c.ProductTeamId) AS ProductTeam,
          (SELECT Name FROM NslIndustry..Vendor WHERE vendorId=s.VendorId) AS Vendor,
          TotalShippedQty,
          (select CurrencyCode from Currency where CurrencyId=s.SellCurrencyId) AS Currency,
          ILSActualAtWarehouseDate
          FROM ILSMonthEndShipment ms WITH (NOLOCK)
          INNER JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.orderrefid = ms.orderrefid
          INNER JOIN shipment s WITH (NOLOCK) ON s.shipmentid = ir.shipmentid
          --INNER JOIN customerdestination cd WITH (NOLOCK) ON cd.customerdestinationid = s.customerdestinationid  and uturnorder = 0
          INNER JOIN customerdestination cd WITH (NOLOCK) ON cd.customerdestinationid = s.customerdestinationid  and s.TermOfPurchaseId NOT IN (5)
          INNER JOIN contract c WITH (NOLOCK) ON c.contractid = s.contractid
          INNER JOIN invoice i WITH (NOLOCK) ON i.shipmentid = s.shipmentid
          WHERE
          ((c.OfficeId @OfficeIdList AND ILSActualAtWarehouseDate BETWEEN @ILSActualAWHDateFrom AND @ILSActualAWHDateTo) OR c.OfficeId IS NULL) AND
          (SELECT STATUS FROM ILSMonthEndLog WITH (NOLOCK) WHERE orderrefid = ir.OrderRefId AND  fileno =
          (SELECT MAX(fileno) FROM ILSMonthEndLog WITH (NOLOCK) WHERE orderrefid = ir.OrderRefId AND CONVERT(datetime, CONVERT(varchar, NUKExtractDate, 112)) BETWEEN  @PeriodStartDate and @PeriodEndDate )) IN (25,26)
          AND EXISTS(SELECT ShipmentId FROM NukSales WITH (NOLOCK) WHERE ShipmentId = ir.ShipmentId AND (FiscalYear = @FiscalYear AND Period = @Period))	

UNION

          SELECT
          FiscalYear = @FiscalYear,
          Period = @Period,
           (SELECT OfficeCode FROM Office WHERE OfficeId=c.OfficeId) AS [Office],
           ms.ContractNo AS [ContractNo],
          ms.DeliveryNo  AS [DeliveryNo],
           ''  AS InvoiceNo,
           NULL  AS InvoiceDate, 
           '' AS SupplierInvoiceNo,
           ''  AS ProductTeam,
           ''  AS Vendor,
          0 AS TotalShippedQty,
           ''  AS Currency,
          NULL AS ILSActualAtWarehouseDate
          FROM ILSMonthEndShipment ms WITH (NOLOCK)
          INNER JOIN ILSOrderRef ir WITH (NOLOCK) ON ir.orderrefid = ms.orderrefid AND ir.ShipmentId IS NULL          
	        LEFT JOIN Contract c WITH (NOLOCK) ON c.ContractNo = ir.ContractNo 
          WHERE
	        (c.OfficeId @OfficeIdList OR c.OfficeId IS NULL) AND          
          (SELECT STATUS FROM ILSMonthEndLog WITH (NOLOCK) WHERE orderrefid = ir.OrderRefId AND  fileno =
          (SELECT MAX(fileno) FROM ILSMonthENdLog WITH (NOLOCK) WHERE orderrefid = ir.OrderRefId AND CONVERT(datetime, CONVERT(varchar, NUKExtractDate, 112)) BETWEEN  @PeriodStartDate and @PeriodEndDate )) IN (25,26)
          AND EXISTS(SELECT ShipmentId FROM NukSales WITH (NOLOCK) WHERE ShipmentId = ir.ShipmentId AND (FiscalYear = @FiscalYear AND Period = @Period))	
ORDER BY 3, 4
]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="Period" name="@Period" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="ILSActualAWHDateFrom" name="@ILSActualAWHDateFrom" type="DateTime" direction="Input" />
          <param key="ILSActualAWHDateTo" name="@ILSActualAWHDateTo" type="DateTime" direction="Input" />
          <param key="PeriodStartDate" name="@PeriodStartDate" type="DateTime" direction="Input" />
          <param key="PeriodEndDate" name="@PeriodEndDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NUKSalesShippingReport" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="EpicorInterfaceLogReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="getEpicorInterfaceLogReport" type="Text">
        <commandText>
          <![CDATA[
		
						SELECT		
								GroupId = 'IS'+convert(varchar,ll.QueueId),
								ll.TransactionId, 
								TransactionType = (SELECT Description FROM SunInterfaceType where SunInterfaceTypeId=sl.SunInterfaceTypeId),
								TransactionCategory = (SELECT Description FROM SunInterfaceCategory where CategoryId=sl.CategoryId),
								IsPrevTransaction = (case when ll.PrevAdjustmentLogId = ll.SunInterfaceLogId then 1 else 0 end),
								TransactionTime = lq.CompletedTime,
								ll.FiscalYear, ll.Period,
								
								ll.SunInterfaceLogId, ll.SunInterfaceTypeId, ll.CategoryId, 
								ll.ShipmentId, ll.OfficeId, ll.SeasonId, ll.CurrencyId, ll.VendorId,
								ll.PackingUnitId, ll.CountryOfOriginId, ll.TermOfPurchaseId, ll.TradingAgencyId, ll.WithOPRFabric,
								TotalQty = ll.qty,	
								TotalPcs = ll.qty * ll.PiecesPerpack,	
								InvoiceNo = dbo.fn_formatInvoiceNo(ll.InvoicePrefix, ll.InvoiceSeq, ll.InvoiceYear), 	
								SupplierInvoiceNo = ISNULL(ll.SupplierInvoiceNo,''),	

								SalesOtherAmt = (case when ll.SunInterfaceTypeId=1 then isnull(ll.OtherAmount,0) else 0 end),	
								SalesBaseAmt  = (case when ll.SunInterfaceTypeId=1 then isnull(ll.BaseAmount,0) else 0 end),	

								NSLCommissionPercent =  (case when ll.SunInterfaceTypeId=2 and ll.TotalShippedAmt<>0 then convert(decimal(18,2),round(isnull(ll.OtherAmount/ll.TotalShippedAmt * 100,0), 2)) else 0 end),
								SalesCommOtherAmt = (case when ll.SunInterfaceTypeId=2 then ISNULL(ll.OtherAmount,0) else 0 end),
								SalesCommBaseAmt = (case when ll.SunInterfaceTypeId=2 then ISNULL(ll.BaseAmount,0) else 0 end),

								PurchaseOtherAmt = (case when ll.SunInterfaceTypeId=3 then ISNULL(ll.OtherAmount,0) else 0 end),
								PurchaseBaseAmt = (case when ll.SunInterfaceTypeId=3 then ISNULL(ll.BaseAmount, 0) else 0 end),

								QACommissionPercent = ISNULL(ll.QACommissionPercent, 0),
								QACommOtherAmount = (CASE WHEN ll.SunInterfaceTypeId=3 and ISNULL(ll.QACommissionPercent,0) <> 0 THEN ROUND(ll.OtherAmount * ll.QACommissionPercent / 100, 2) else 0.00 END),
								QACommBaseAmount = (CASE WHEN ll.SunInterfaceTypeId=3 and ISNULL(ll.QACommissionPercent,0) <> 0 THEN ROUND(ll.BaseAmount * ll.QACommissionPercent / 100, 2) ELSE 0.00 END),

								VendorPaymentDiscountPercent = ISNULL(ll.VendorPaymentDiscountPercent, 0),
								PaymentDiscountOtherAmount = (CASE WHEN ll.SunInterfaceTypeId=3 THEN ROUND(ll.OtherAmount * ll.VendorPaymentDiscountPercent / 100 , 2) ELSE 0.00 END),
								PaymentDiscountBaseAmount = (CASE WHEN ll.SunInterfaceTypeId=3 THEN ROUND(ll.BaseAmount * ll.VendorPaymentDiscountPercent / 100 , 2) ELSE 0.00 END),

								LabTestIncome = ISNULL(ll.LabTestIncome,0),
								LabTestIncomeOtherAmount = ll.LabTestIncome * ll.Qty,
								LabTestIncomeBaseAmount = (case when ll.SunInterfaceTypeId=3 and ll.OtherAmount<>0 then ROUND(ll.LabTestIncome * ll.Qty * ll.BaseAmount / ll.OtherAmount, 2) else 0.00 end),

								AnySalesAdjustment = (case when ll.SunInterfaceTypeId=1 then 1 else 0 end),
								AnyPurchaseAdjustment = (case when ll.SunInterfaceTypeId=3 then 1 else 0 end),
								AnyCommAdjustment =  (case when ll.SunInterfaceTypeId=2 then 1 else 0 end),

								SequenceNo = i.SequenceNo,	
								InvoiceDate = i.InvoiceDate,	
								VendorName = v.Name,
								p.ItemNo,	
								ProductTeamCode = pt.code, 	
								c.ContractNo, s.DeliveryNo, 	
								pu.PackingUnitDesc, 	
								cy.CurrencyCode, 	
								SeasonCode = sn.code,
								CountryOfOrigin = co.code,
								OfficeCode = o.OfficeCode,
								TermOfPurchaseDesc = tp.TermOfPurchaseDesc,
								oft.OPRFabricTypeName,
								TradingAgencyName = ta.ShortName,
								CategoryDesc = ic.Description,
								SunInterfaceType = it.Description 
						FROM (
							SELECT
								l.*,
								OtherAmount = l.OtherAmt,
								BaseAmount = (case when l.CurrencyId=3 then l.OtherAmt else l.BaseAmt end),
								TransactionId = x.SunInterfaceLogId,
								--TransactionTypeId = x.SunInterfaceTypeId, 
								x.PrevAdjustmentLogId
 							FROM (
								SELECT 
									il.Shipmentid, il.SunInterfaceTypeId, il.SunInterfaceLogId,
									PrevAdjustmentLogId = (case when il.CategoryId=5 then max(case when sl.SunInterfaceTypeId=il.SunInterfaceTypeId then sl.SunInterfaceLogId else null end) else NULL end)	
								FROM SunInterfaceLog as il WITH (NOLOCK)
									inner join SunInterfacequeue as iq with (nolock) on iq.queueId=il.queueId
									left join SunInterfaceLog as sl with (nolock) on sl.ShipmentId=il.ShipmentId and sl.SunInterfaceLogId<il.SunInterfaceLogId and sl.SunInterfaceTypeId=il.SunInterfaceTypeId
									WHERE 
										il.SunInterfaceTypeId IN (1,2,3) -- Sales, NSL Commission & Purchase
										AND (iq.CompletedTime >= @InterfaceDateFrom AND iq.CompletedTime<(convert(datetime, @InterfaceDateTo)+1)) 
										AND (il.OfficeId @OfficeIdList)
										AND iq.status = 1
										AND il.QueueId > 0
									group by il.ShipmentId, il.SunInterfaceLogId, il.SunInterfaceTypeId, il.CategoryId
								) AS x
								inner join sunInterfacelog as l with (nolock) on l.shipmentid=x.shipmentid and (l.SunInterfaceLogId=x.SunInterfaceLogId or l.SunInterfaceLogId=x.PrevAdjustmentLogId)
							) as ll
							inner join sunInterfacelog as sl with (nolock) on sl.SunInterfaceLogId = ll.TransactionId	-- ll.SunInterfaceLogId
							inner join sunInterfaceQueue as lq with (nolock) on lq.QueueId=ll.QueueId and lq.status = 1 and lq.queueId>0
							INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = ll.ShipmentId
							INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId
							INNER JOIN Invoice  AS i WITH (NOLOCK) ON i.ShipmentId = ll.ShipmentId
							INNER JOIN Product AS p WITH (NOLOCK) ON p.ProductId = c.ProductId and p.status=1	
							INNER JOIN nsldb..OfficeStructure as pt WITH (NOLOCK) ON pt.OfficeStructureId=c.ProductTeamId and pt.Status=1	
							INNER JOIN SunInterfaceCategory as ic with (nolock) on ic.CategoryId=ll.CategoryId and ic.status=1	
							INNER JOIN PackingUnit as pu with (nolock) on pu.PackingUnitId=ll.PackingUnitId and pu.status=1	
							INNER JOIN Currency as cy with (nolock) on cy.CurrencyId=ll.currencyid 	
							INNER JOIN Office as o with (nolock) on o.OfficeId=ll.OfficeId and o.status=1	
							INNER JOIN nsldb..Season as sn with (nolock) on sn.seasonId=ll.seasonId and sn.status=1	
							INNER JOIN CountryOfOrigin as co with (nolock) on co.CountryOfOriginId=ll.CountryOfOriginId	
							INNER JOIN TermOfPurchase as tp with (nolock) on tp.TermOfPurchaseId=ll.TermOfPurchaseId and tp.status=1	
							INNER JOIN TradingAgency as ta with (nolock) on ta.TradingAgencyId=ll.TradingAgencyId	
							INNER JOIN OPRFabricType as oft with (nolock) on oft.OPRFabricTypeId = ll.WithOPRFabric and oft.status=1	
							INNER JOIN nslindustry..Vendor AS v with (nolock) on v.VendorId=s.VendorId	
							INNER JOIN SunInterfaceType AS it with (nolock) on it.SunInterfaceTypeId=ll.SunInterfaceTypeId and it.status=1
						order by 
							s.shipmentid, TransactionId, IsPrevTransaction desc
					
					]]>
        </commandText>
        <parameters>
          <param key="InterfaceDateFrom" name="@InterfaceDateFrom" type="DateTime" direction="Input" />
          <param key="InterfaceDateTo" name="@InterfaceDateTo" type="DateTime" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="EpicorInterfaceLogReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="EpicorGLJournalExtractLogApt" populateCommands="false">
    <dataCommand name="GetEpicorGLExtractLog" type="Text">
      <commandText>
        <![CDATA[
				SELECT Company, FiscalYear, FiscalPeriod, RecordId, CreatedBy, CreatedOn
				FROM EpicorGLExtractLog 
				WHERE Company = 'TKTK'
					AND FiscalYear = @FiscalYear 
          AND FiscalPeriod = @FiscalPeriod
				]]>
      </commandText>
      <parameters>
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="FiscalPeriod" name="@FiscalPeriod" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="EpicorGLExtractLog" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="LogoInterfaceRequestApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetLogoInterfaceRequestList" type="Text">
        <commandText>
          SELECT a.* FROM LogoInterfaceRequest a
          WHERE a.Status = 1
          ORDER BY RequestId DESC
        </commandText>
      </dataCommand>

      <dataCommand name="GetLogoInterfaceRequestByKey" type="Text">
        <commandText>
          SELECT * FROM LogoInterfaceRequest WHERE RequestId = @RequestId
        </commandText>
        <parameters>
          <param key="RequestId" name="@RequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxRequestId" type="Text">
        <commandText>
          SELECT MAX(RequestId) FROM LogoInterfaceRequest
        </commandText>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="LogoInterfaceRequest" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLedSalesApt">
    <selectCommand>
      <dataCommand name="GetNSLedSales" type="Text">
        <commandText>
          SELECT sal.*
          FROM NSLedSales sal JOIN NSLedImportFile fil ON sal.FileId = fil.FileId
          WHERE (@InvoiceNo = '' OR fil.InvoiceNo = @InvoiceNo)
          AND (@FiscalYear = -1 OR fil.FiscalYear = @FiscalYear)
          AND (@OfficeId = -1 OR fil.OfficeId = @OfficeId)
          AND (@FiscalWeek = -1 OR fil.FiscalWeek = @FiscalWeek)
          AND (@ItemNo = '' OR sal.ItemNo = @ItemNo)
          AND (@CountryOfSale = 'ALL' OR sal.CountryOfSale = @CountryOfSale)
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="InvoiceNo" name="@InvoiceNo" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="FiscalWeek" name="@FiscalWeek" type="Int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="CountryOfSale" name="@CountryOfSale" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedSalesDetail" type="Text">
        <commandText>
          SELECT *
          FROM NSLedSales WHERE FileId = @FileId
        </commandText>
        <parameters>
          <param key="FileId" name="@FileId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedSalesCountry" type="Text">
        <commandText>
          SELECT DISTINCT CountryOfSale
          FROM NSLedSales
          ORDER BY CountryOfSale
        </commandText>
      </dataCommand>

      <dataCommand name="GetNSLedSalesByKey" type="Text">
        <commandText>
          SELECT *
          FROM NSLedSales
          WHERE FileId = @FileId AND DetailId = @DetailId
        </commandText>
        <parameters>
          <param key="FileId" name="@FileId" type="int" direction="Input" />
          <param key="DetailId" name="@DetailId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxNSLedSalesId" type="Text">
        <commandText>
          SELECT MAX(DetailId) FROM NSLedSales
        </commandText>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLedSales"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLedImportFileApt">
    <selectCommand>
      <dataCommand name="GetMaxNSLedImportFileId" type="Text">
        <commandText>
          SELECT FileId=MAX(FileId) FROM NSLedImportFile WITH (NOLOCK)
        </commandText>
      </dataCommand>

      <dataCommand name="GetNSLedImportFileByKey" type="Text">
        <commandText>
          SELECT *
          FROM NSLedImportFile
          WHERE FileId = @FileId
        </commandText>
        <parameters>
          <param key="FileId" name="@FileId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedImportFileByInvoiceNo" type="Text">
        <commandText>
          SELECT *
          FROM NSLedImportFile
          WHERE InvoiceNo = @InvoiceNo
        </commandText>
        <parameters>
          <param key="InvoiceNo" name="@InvoiceNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedImportFileByCriteria" type="Text">
        <commandText>
          <![CDATA[
				SELECT TOP 100 *
				FROM NSLedImportFile
				WHERE (@CreatedBy = -1 OR CreatedBy = @CreatedBy)
					AND (@StartDate IS NULL OR CreatedOn >= @StartDate)
					AND (@EndDate IS NULL OR CreatedOn <= @EndDate)
        ORDER BY CreatedOn DESC
				]]>
        </commandText>
        <parameters>
          <param key="CreatedBy" name="@CreatedBy" type="Int" direction="Input" />
          <param key="StartDate" name="@StartDate" type="DateTime" direction="Input" />
          <param key="EndDate" name="@EndDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedImportFileByCriteriaForChecking" type="Text">
        <commandText>
          SELECT *
          FROM NSLedImportFile
          WHERE (@InvoiceNo = '' OR InvoiceNo = @InvoiceNo)
          AND (@InvoiceDate IS NULL OR InvoiceDate = @InvoiceDate)
          AND (@OfficeId = -1 OR OfficeId = @OfficeId)
        </commandText>
        <parameters>
          <param key="InvoiceNo" name="@InvoiceNo" type="Varchar" direction="Input" />
          <param key="InvoiceDate" name="@InvoiceDate" type="DateTime" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedFiscalWeekList" type="Text">
        <commandText>
          SELECT DISTINCT FiscalWeek FROM NSLedImportFile
          WHERE FiscalYear = @Year
          ORDER BY FiscalWeek DESC
        </commandText>
        <parameters>
          <param key="Year" name="@Year" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNSLedFiscalYearList" type="Text">
        <commandText>
          SELECT DISTINCT FiscalYear FROM NSLedImportFile
          ORDER BY FiscalYear DESC
        </commandText>
      </dataCommand>

      <dataCommand name="GetNSLedImportFileList" type="Text">
        <commandText>
          SELECT *
          FROM NSLedImportFile
          WHERE OfficeId = @OfficeId AND FiscalYear = @FiscalYear AND FiscalWeek = @FiscalWeek AND IsDutiable = 0
          ORDER BY FileId
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="FiscalWeek" name="@FiscalWeek" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLedImportFile"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLedSelfBilledSupplierCodeApt" populateCommands="false">
    <dataCommand name="GetNSLedSelfBilledSupplierCodeList" type="Text">
      <commandText>
        SELECT UKSupplierCode FROM NSLedSelfBilledSupplierCode WHERE Status=1
      </commandText>
    </dataCommand>

    <dataCommand name="GetNSLedSelfBilledSupplierCodeByCriteria" type="Text">
      <commandText>
        <![CDATA[
				SELECT * FROM NSLedSelfBilledSupplierCode
				WHERE (@OfficeId = -1 OR OfficeId = @OfficeId)
					AND (@UKSupplierCode = '' OR UKSupplierCode = @UKSupplierCode)
          AND Status = 1
				]]>
      </commandText>
      <parameters>
        <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        <param key="UKSupplierCode" name="@UKSupplierCode" type="Varchar" direction="Input" />
      </parameters>
    </dataCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLedSelfBilledSupplierCode" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLedProfitabilitiesApt">
    <dataCommand name="GetNSLedProfitabilities" type="Text">
      <commandText>
        <![CDATA[
          SELECT *, 
          CASE OfficeId WHEN 1 THEN 1
                        WHEN 19 THEN 2
                        WHEN 2 THEN 3
                        WHEN 16 THEN 4
                        WHEN 7 THEN 5
                        WHEN 9 THEN 6
                        WHEN 3 THEN 7
                        WHEN 8 THEN 8
                        WHEN 13 THEN 9
                        ELSE 99 END AS OfficeSortId
          FROM (
          SELECT s.ItemNo, f.OfficeId,
          CASE WHEN SUM((CASE WHEN CommPercent = 40 AND DespatchQty > 0 THEN 1 ELSE 0 END)) > 0 THEN 1 ELSE 0 END AS IsEndOfLife,
                 
          --This is the update for ultimate week count from the start of the product sell to selected week.
          CASE 
            WHEN @FiscalYear != MIN(f.FiscalYear) THEN 
			      (MIN(f.FiscalYear) * 100 + 52)
			      - CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT) + 1
			      + 
				  CAST(CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2) AS INT)
			      - (@FiscalYear * 100 + 1) + 1
				    + (@FiscalYear - MIN(f.FiscalYear) - 1) * 52
			      ELSE
			      CAST(CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2) AS INT)
			      -
			      CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT)
			      + 1 
          END AS WeekCount,

          
          CASE 
            WHEN ISNULL(md.FiscalYear, @FiscalYear) != MIN(f.FiscalYear) THEN 
			      (MIN(f.FiscalYear) * 100 + 52)
			      - CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT) + 1
			      + 
				  CAST(ISNULL(md.WeekStr, CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2)) AS INT)
			      - (ISNULL(md.FiscalYear, @FiscalYear)  * 100 + 1) + 1  
				    + (ISNULL(md.FiscalYear, @FiscalYear) - MIN(f.FiscalYear) - 1) * 52
			      ELSE
			      CAST(ISNULL(md.WeekStr, CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2)) AS INT)
			      -
			      CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT)
            + 1 
			    END AS FPWeekCount,

          
          SUM(NetQty) AS QtySold,
          SUM(CASE WHEN CommPercent = 50 THEN NetQty ELSE 0 END) AS FPQty,
          SUM(CASE WHEN CountryOfSale IN ('UNITED KINGDOM', 'GB') THEN NetQty ELSE 0 END) AS UKQty,
          SUM(NSCommAmtInUSD) AS TotalNSCommissionAmt,
          CONVERT(varchar(6), MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2))) AS InitialSaleWeek,
          
          1 AS SeasonCount,
          rp.SeasonId AS SeasonId, 
 
          CONVERT(bit,MIN(CONVERT(int, f.IsDutiable))) AS HasDuty,
          MIN(f.FiscalYear) AS LaunchYear,
          CONVERT(int, RIGHT(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)), 2)) AS LaunchWeek
      
          FROM [NSLedSales] s
          INNER JOIN (
                SELECT DISTINCT ItemNo 
                FROM [NSLedSales] s
                JOIN [NSLedImportFile] f ON s.FileId = f.FileId 
                WHERE (f.OfficeId @OfficeId)  -- AND s.ItemNo = '643807' AND f.FiscalYear = @FiscalYear AND f.FiscalWeek = @FiscalWeek 
                ) temp ON temp.ItemNo = s.ItemNo AND (s.DespatchQty <> 0 OR s.ReturnQty <> 0)
          INNER JOIN [NSLedImportFile] f ON s.FileId = f.FileId AND (f.FiscalYear * 100 + f.FiscalWeek) <= (@FiscalYear * 100 + @FiscalWeek)
          AND (NOT EXISTS(SELECT * FROM NSLedRepeatItemParam WHERE ItemNo = s.ItemNo) OR (f.FiscalYear * 100 + f.FiscalWeek) < dbo.fn_GetNSLedRepeatItemMinFiscalWeek(s.ItemNo))
          INNER JOIN [NS-LED]..RangePlan rp ON rp.ItemNo = s.ItemNo AND rp.Status = 1 AND rp.IsRepeatItem = 0
          AND [NS-LED].dbo.fn_getNSLedPhaseId(rp.ActualSaleSeasonId, rp.ActualSaleSeasonSplitId) @PhaseId
          INNER JOIN [NS-LED]..RangePlanLatestVersionId rpv ON rp.RangePlanId = rpv.RangePlanId AND rp.VersionId = rpv.VersionId
          
          LEFT JOIN NSLedFirstMDWeek md ON md.ItemNo = s.ItemNo AND f.OfficeId = md.OfficeId AND md.Seasonid = rp.SeasonId 

          GROUP BY s.ItemNo, f.OfficeId, md.WeekStr, rp.SeasonId, md.FiscalYear
          --HAVING s.ItemNo = '478941'


          UNION ALL
          
          SELECT s.ItemNo, f.OfficeId,
          CASE WHEN SUM((CASE WHEN CommPercent = 40 AND DespatchQty > 0 THEN 1 ELSE 0 END)) > 0 THEN 1 ELSE 0 END AS IsEndOfLife,
                 
          --This is the update for ultimate week count from the start of the product sell to selected week.
          CASE 
            WHEN @FiscalYear != MIN(f.FiscalYear) THEN 
			      (MIN(f.FiscalYear) * 100 + 52)
			      - CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT) + 1
			      + 
				  CAST(CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2) AS INT)
			      - (@FiscalYear * 100 + 1) + 1
				    + (@FiscalYear - MIN(f.FiscalYear) - 1) * 52
			      ELSE
			      CAST(CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2) AS INT)
			      -
			      CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT)
			      + 1 
          END AS WeekCount,

          
          CASE 
            WHEN ISNULL(md.FiscalYear, @FiscalYear) != MIN(f.FiscalYear) THEN 
			      (MIN(f.FiscalYear) * 100 + 52)
			      - CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT) + 1
			      + 
				  CAST(ISNULL(md.WeekStr, CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2)) AS INT)
			      - (ISNULL(md.FiscalYear, @FiscalYear)  * 100 + 1) + 1  
				    + (ISNULL(md.FiscalYear, @FiscalYear) - MIN(f.FiscalYear) - 1) * 52
			      ELSE
			      CAST(ISNULL(md.WeekStr, CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2)) AS INT)
			      -
			      CAST(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)) AS INT)
            + 1 
			    END AS FPWeekCount,

          
          SUM(NetQty) AS QtySold,
          SUM(CASE WHEN CommPercent = 50 THEN NetQty ELSE 0 END) AS FPQty,
          SUM(CASE WHEN CountryOfSale IN ('UNITED KINGDOM', 'GB') THEN NetQty ELSE 0 END) AS UKQty,
          SUM(NSCommAmtInUSD) AS TotalNSCommissionAmt,
          CONVERT(varchar(6), MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2))) AS InitialSaleWeek,
          
          2 AS SeasonCount,
          rp.SeasonId AS SeasonId, 
 
          CONVERT(bit,MIN(CONVERT(int, f.IsDutiable))) AS HasDuty,
          MIN(f.FiscalYear) AS LaunchYear,
          CONVERT(int, RIGHT(MIN(CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2)), 2)) AS LaunchWeek
      
          FROM [NSLedSales] s
          JOIN (
                SELECT DISTINCT s.ItemNo 
                FROM [NSLedSales] s
                JOIN [NSLedImportFile] f ON s.FileId = f.FileId 
                INNER JOIN NSLedRepeatItemParam w ON s.ItemNo = w.ItemNo
                WHERE (f.OfficeId @OfficeId)  
                ) temp ON temp.ItemNo = s.ItemNo AND (s.DespatchQty <> 0 OR s.ReturnQty <> 0)
          INNER JOIN [NSLedImportFile] f ON s.FileId = f.FileId AND (f.FiscalYear * 100 + f.FiscalWeek) <= (@FiscalYear * 100 + @FiscalWeek)
          INNER JOIN [NS-LED]..RangePlan rp ON rp.ItemNo = s.ItemNo AND rp.Status = 1 AND rp.IsRepeatItem = 1
          AND [NS-LED].dbo.fn_getNSLedPhaseId(rp.ActualSaleSeasonId, rp.ActualSaleSeasonSplitId) @PhaseId
          INNER JOIN [NS-LED]..RangePlanLatestVersionId rpv ON rp.RangePlanId = rpv.RangePlanId AND rp.VersionId = rpv.VersionId
          INNER JOIN NSLedRepeatItemParam rip ON rip.ItemNo = s.ItemNo AND rip.SeasonId = rp.SeasonId AND (f.FiscalYear * 100 + f.FiscalWeek) >= (rip.FiscalYear * 100 + rip.FiscalWeek) 
          LEFT JOIN NSLedFirstMDWeek md ON md.ItemNo = s.ItemNo AND f.OfficeId = md.OfficeId AND md.Seasonid = rp.SeasonId 

          GROUP BY s.ItemNo, f.OfficeId, md.WeekStr, rp.SeasonId, md.FiscalYear


          UNION ALL
          SELECT DISTINCT c.ItemNo, a.OfficeId, 0 AS IsEndOfLife, 0 AS WeekCount, 0 AS FPWeekCount, 0 AS QtySold, 0 AS FPQty, 0 AS UKQty, 0 AS TotalNSCommissionAmt, 0 AS InitialSaleWeek, 0 AS SeasonCount, 0 AS SeasonId, 
                          0 AS HasDuty, 0 AS LaunchYear, 0 AS LaunchWeek
          FROM Contract a INNER JOIN Shipment b ON a.ContractId = b.ContractId AND a.Status = 1 AND b.Status = 1 AND b.WorkflowStatusid = 8 AND a.CustomerId = 27
          AND (a.OfficeId @OfficeId)
          INNER JOIN Product c ON a.ProductId = c.ProductId
          LEFT JOIN NSLedSalesSummary d ON c.ItemNo = d.ItemNo 
         
          WHERE (d.ItemNo IS NULL OR 
                 NOT EXISTS(SELECT * FROM NSLedSalesSummary y WHERE ItemNo = c.ItemNo AND y.[Week] <= (@FiscalYear * 100 + @FiscalWeek)))

          UNION ALL
          SELECT DISTINCT c.ItemNo, a.OfficeId, 0 AS IsEndOfLife, 0 AS WeekCount, 0 AS FPWeekCount, 0 AS QtySold, 0 AS FPQty, 0 AS UKQty, 0 AS TotalNSCommissionAmt, 0 AS InitialSaleWeek, 2 AS SeasonCount, r.SeasonId AS SeasonId, 
                          0 AS HasDuty, 0 AS LaunchYear, 0 AS LaunchWeek
          FROM NSLedRepeatItemParam r INNER JOIN Product c ON r.ItemNo = c.ItemNo 
		      INNER JOIN Contract a ON a.ProductId = c.ProductId
		      INNER JOIN Shipment b ON a.ContractId = b.ContractId AND a.Status = 1 AND b.Status = 1 AND b.WorkflowStatusid = 8 AND a.CustomerId = 27
          LEFT JOIN NSLedSalesSummary d ON c.ItemNo = d.ItemNo 
         
          WHERE (d.ItemNo IS NULL OR 
                 NOT EXISTS(SELECT * FROM NSLedSalesSummary y WHERE ItemNo = c.ItemNo AND y.[Week] <= (@FiscalYear * 100 + @FiscalWeek) AND y.[Week] >= (r.FiscalYear * 100 + r.FiscalWeek)))

          ) z     
          --WHERE z.ItemNo IN ('848657') 
          ORDER BY OfficeSortId, IsEndOfLife DESC, WeekCount DESC, ItemNo
          
        ]]>
      </commandText>
      <parameters>
        <param key="OfficeId" name="@OfficeId" type="ArrayInt" direction="Input" />
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="FiscalWeek" name="@FiscalWeek" type="Int" direction="Input" />
        <param key="PhaseId" name="@PhaseId" type="ArrayInt" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetNSLedRangePlanSeasonIdByFiscalWeek" type="Text">
      <commandText>
        <![CDATA[
        SELECT TOP 1 SeasonId, FiscalYear, FiscalWeek FROM NSLedRepeatItemParam WHERE ItemNo = @ItemNo AND (FiscalYear * 100 + FiscalWeek) <= (@FiscalYear * 100 + @FiscalWeek)
        ORDER BY FiscalYear, FiscalWeek
        ]]>
      </commandText>
      <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="FiscalWeek" name="@FiscalWeek" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <dataCommand name="GetNSLedRangePlanSeasonIdByDeliveryDate" type="Text">
      <commandText>
        <![CDATA[
        SELECT TOP 1 SeasonId, DeliveryDate FROM NSLedRepeatItemParam WHERE ItemNo = @ItemNo AND DeliveryDate <= @DeliveryDate
        ORDER BY DeliveryDate
        ]]>
      </commandText>
      <parameters>
        <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        <param key="DeliveryDate" name="@DeliveryDate" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLedProfitabilities" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="NSLedSalesInfoApt">
    <dataCommand name="GetNSLedSalesInfo" type="Text">
      <commandText>
        <![CDATA[
            SELECT ItemNo, f.OfficeId, f.FiscalYear,f.FiscalWeek, f.Period,
            SUM(DespatchQty) AS DespatchQty, SUM(ReturnQty) AS ReturnQty, SUM(NetQty) AS NetQty,
            SUM(NSCommAmtInUSD) AS NSCommAmtInUSD, SUM(CASE WHEN CommPercent = 40 THEN NetQty ELSE 0 END) AS MDQty,
            CONVERT(bit,MIN(CONVERT(int, f.IsDutiable))) AS HasDuty
            FROM [NSLedSales] s
            JOIN [NSLedImportFile] f ON f.FileId = s.FileId
              AND CAST(f.FiscalYear AS varchar) + RIGHT('0' + CAST(f.FiscalWeek AS varchar),2) <= CAST(@FiscalYear AS varchar) + RIGHT('0' + CAST(@FiscalWeek AS varchar),2)
            GROUP BY ItemNo, f.OfficeId, f.FiscalYear, f.FiscalWeek, f.Period
            ORDER BY f.OfficeId, ItemNo, FiscalYear, FiscalWeek
        ]]>
      </commandText>
      <parameters>
        <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
        <param key="FiscalWeek" name="@FiscalWeek" type="Int" direction="Input" />
      </parameters>
    </dataCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="NSLedSalesInfo" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="LGDetailApt">
    <selectCommand>
      <dataCommand name="GetLGDetail" type="Text">
        <commandText>
          SELECT * FROM LGDetail
          WHERE (ShipmentId = @ShipmentId OR @ShipmentId = -1)
          AND (SplitShipmentId = @SplitShipmentId OR @SplitShipmentId = -1)
        </commandText>
        <parameters>
          <param key="ShipmentId" name="@ShipmentId" type="Int" direction="Input" />
          <param key="SplitShipmentId" name="@SplitShipmentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetLGDetailByLGId" type="Text">
        <commandText>
          SELECT * FROM LGDetail a WHERE LGId = @LGId AND Status = 1
        </commandText>
        <parameters>
          <param key="LGId" name="@LGId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="LGDetail"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="LetterOfGuaranteeApt">
    <selectCommand>
      <dataCommand name="GetLetterOfGuaranteeByKey" type="Text">
        <commandText>
          SELECT * FROM LetterOfGuarantee WHERE LGId = @LGId
        </commandText>
        <parameters>
          <param key="LGId" name="@LGId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="LetterOfGuarantee"/>
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="LGHoldPaymentApt">
    <selectCommand>
      <dataCommand name="GetLGHoldPaymentList" type="Text">
        <commandText>
          SELECT
          b.OfficeCode, a.LGNo, c.Name, d.DisplayName, a.SubmittedBy,      a.SubmittedDate, h.ItemNo, g.ContractNo, f.DeliveryNo, i.Description,
          dbo.fn_formatInvoiceNo(j.InvoicePrefix, j.InvoiceSeq, j.InvoiceYear) as InvoiceNo,
          case when f.WorkflowStatusId = 8 then j.InvoiceDate else f.CustomerAtWarehouseDate end as DeliveryDate,
          k.PaymentTermDesc, l.CurrencyCode AS Currency,
          case when f.WorkflowStatusId = 8 then f.TotalShippedSupplierGmtAmtAfterDiscount else f.TotalPOSupplierGmtAmtAfterDiscount end as AmountOnHold,
          DATEADD(d,60,j.InvoiceDate) as DueDate, j.APDate as ReleaseDate, a.Remark
          FROM LetterOfGuarantee a inner join NSLDB..Office b on a.OfficeId = b.OfficeId
          INNER JOIN NSLINDUSTRY..Vendor c on a.VendorId = c.VendorId
          INNER JOIN NSLDB..UserInfo d on a.SubmittedBy = d.UserId
          INNER JOIN LGDetail e on a.LGId = e.LGId
          INNER JOIN Shipment f on f.ShipmentId = e.ShipmentId
          INNER JOIN Contract g on g.ContractId = f.ContractId
          INNER JOIN Product h on h.ProductId = g.ProductId
          INNER JOIN WorkflowStatus i on i.WorkflowStatusId = f.WorkflowStatusId and i.RecordTypeId = 1
          INNER JOIN Invoice j on j.ShipmentId = f.ShipmentId
          INNER JOIN PaymentTerm k on f.PaymentTermId = k.PaymentTermId
          INNER JOIN NSLDB..Currency l on l.CurrencyId = f.BuyCurrencyId
          WHERE (b.OfficeId = @OfficeId OR @OfficeId = -1)
          AND (a.LGNo = @LGNo OR @LGNo = '')
          AND (c.VendorId = @VendorId OR @VendorId = -1)
          AND (h.ItemNo = @ItemNo OR @ItemNo = '')
          AND (g.ContractNo = @ContractNo OR @ContractNo = '')
          AND ((@PaymentStatusId = 1)
          OR (@PaymentStatusId = 2 AND j.APDate IS NOT NULL)
          OR (@PaymentStatusId = 3 AND j.APDate IS NULL))
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="LGNo" name="@LGNo" type="Varchar" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="Varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="Varchar" direction="Input" />
          <param key="PaymentStatusId" name="@PaymentStatusId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="LGHoldPayment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="POListByOfficeSupplierApt">
    <selectCommand>
      <dataCommand name="GetPOListByOfficeSupplier" type="Text">
        <commandText>
          SELECT d.OfficeCode, e.Name AS SupplierName, f.CurrencyCode,

          MIN(CASE WHEN g.SeqId = 1 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P1_Period,
          SUM(CASE WHEN g.SeqId = 1 THEN b.TotalOrderQty ELSE 0 END) AS P1_Qty,
          SUM(CASE WHEN g.SeqId = 1 THEN b.TotalOrderAmt ELSE 0 END) AS P1_Amt,

          MIN(CASE WHEN g.SeqId = 2 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P2_Period,
          SUM(CASE WHEN g.SeqId = 2 THEN b.TotalOrderQty ELSE 0 END) AS P2_Qty,
          SUM(CASE WHEN g.SeqId = 2 THEN b.TotalOrderAmt ELSE 0 END) AS P2_Amt,

          MIN(CASE WHEN g.SeqId = 3 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P3_Period,
          SUM(CASE WHEN g.SeqId = 3 THEN b.TotalOrderQty ELSE 0 END) AS P3_Qty,
          SUM(CASE WHEN g.SeqId = 3 THEN b.TotalOrderAmt ELSE 0 END) AS P3_Amt,

          MIN(CASE WHEN g.SeqId = 4 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P4_Period,
          SUM(CASE WHEN g.SeqId = 4 THEN b.TotalOrderQty ELSE 0 END) AS P4_Qty,
          SUM(CASE WHEN g.SeqId = 4 THEN b.TotalOrderAmt ELSE 0 END) AS P4_Amt,

          MIN(CASE WHEN g.SeqId = 5 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P5_Period,
          SUM(CASE WHEN g.SeqId = 5 THEN b.TotalOrderQty ELSE 0 END) AS P5_Qty,
          SUM(CASE WHEN g.SeqId = 5 THEN b.TotalOrderAmt ELSE 0 END) AS P5_Amt,

          MIN(CASE WHEN g.SeqId = 6 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P6_Period,
          SUM(CASE WHEN g.SeqId = 6 THEN b.TotalOrderQty ELSE 0 END) AS P6_Qty,
          SUM(CASE WHEN g.SeqId = 6 THEN b.TotalOrderAmt ELSE 0 END) AS P6_Amt,

          MIN(CASE WHEN g.SeqId = 7 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P7_Period,
          SUM(CASE WHEN g.SeqId = 7 THEN b.TotalOrderQty ELSE 0 END) AS P7_Qty,
          SUM(CASE WHEN g.SeqId = 7 THEN b.TotalOrderAmt ELSE 0 END) AS P7_Amt,

          MIN(CASE WHEN g.SeqId = 8 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P8_Period,
          SUM(CASE WHEN g.SeqId = 8 THEN b.TotalOrderQty ELSE 0 END) AS P8_Qty,
          SUM(CASE WHEN g.SeqId = 8 THEN b.TotalOrderAmt ELSE 0 END) AS P8_Amt,

          MIN(CASE WHEN g.SeqId = 9 THEN CONVERT(varchar, g.BudgetYear) + '/P' + CONVERT(varchar, g.Period) ELSE 'N/A' END) AS P9_period,
          SUM(CASE WHEN g.SeqId = 9 THEN b.TotalOrderQty ELSE 0 END) AS P9_Qty,
          SUM(CASE WHEN g.SeqId = 9 THEN b.TotalOrderAmt ELSE 0 END) AS P9_Amt

          FROM
          (SELECT RANK() OVER (ORDER BY BudgetYear, Period) AS SeqId, BudgetYear, Period, Startdate, Enddate
          FROM NSLDB..AccountFinancialCalender WHERE AppId = 13 AND Status = 1
          AND ((BudgetYear = @FiscalYear AND Period BETWEEN @FiscalPeriod AND CASE WHEN @FiscalPeriod + 8 >= 12 THEN 12 ELSE @FiscalPeriod + 8 END)
          OR (BudgetYear = CASE WHEN @FiscalPeriod + 9 > 12 THEN @FiscalYear + 1 else -9999 END AND Period BETWEEN 1 AND (9 - (12 - @FiscalPeriod + 1))))) g
          LEFT JOIN Shipment b ON b.CustomerAtWarehouseDate BETWEEN g.StartDate AND g.EndDate
          AND b.Status = 1 AND b.WorkflowStatusId NOT IN (3, 5, 9) AND IsMockShopSample = 0 AND IsPressSample = 0 AND IsStudioSample = 0
          LEFT JOIN Invoice c ON b.ShipmentId = c.ShipmentId AND c.IsUploadDMSDocument = 0
          LEFT JOIN Contract a ON a.ContractId = b.ContractId AND a.Status = 1
          AND (@OfficeId = -1 OR a.Officeid IS NULL OR a.OfficeId = @OfficeId )
          LEFT JOIN NSLDB..Office d ON a.OfficeId = d.OfficeId
          LEFT JOIN NSLIndustry..Vendor e ON b.VendorId = e.VendorId
          LEFT JOIN NSLDB..Currency f ON b.BuyCurrencyId = f.CurrencyId
          WHERE (@OfficeId = -1 OR a.OfficeId = @OfficeId OR d.Officeid IS NULL)
          AND (@CurrencyId = -1 OR b.BuyCurrencyId = @CurrencyId)
          AND (@VendorId = -1 OR e.VendorId = @VendorId)
          AND (b.WorkflowStatusId @WorkflowStatusIdList OR d.OfficeId IS NULL)
          GROUP BY d.OfficeCode, e.Name, f.CurrencyCode
          ORDER BY 1, 2 ,3
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="FiscalPeriod" name="@FiscalPeriod" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="WorkflowStatusIdList" name="@WorkflowStatusIdList" type="ArrayInt" direction="Input" />
          <!--<param key="WorkflowStatusId" name="@WorkflowStatusId" type="Int" direction="Input" />-->
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="POListByOfficeSupplierReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="FutureOrderSummaryBySupplierApt">
    <selectCommand>
      <dataCommand name="GetFutureOrderSummaryBySupplier" type="Text">
        <commandText>
          <![CDATA[
			SELECT f.OfficeId, a.VendorId, v.Name AS VendorName, f.ContractNo, a.DeliveryNo, a.SupplierAtWarehouseDate, a.BuyCurrencyId AS CurrencyId,
					  CONVERT(decimal(18,2),a.TotalSupplierGmtAmtAfterDiscount * (CONVERT(decimal(18,2),100) - a.QACommissionPercent - a.VendorPaymentDiscountPercent) / 100.0) AS SupplierNetAmt,
					  CONVERT(decimal(18,2),a.TotalSupplierGmtAmtAfterDiscount * (CONVERT(decimal(18,2),100) - a.QACommissionPercent - a.VendorPaymentDiscountPercent) / 100.0 * 0.05) AS SupplierNetAmt_5_Pct,
					  a.WorkflowStatusId,
					  CONVERT(decimal(18,2),ISNULL((SELECT SUM(aa.Amt * bb.Factor) FROM ShipmentDeduction aa INNER JOIN PaymentDeductionType bb ON aa.DeductionType = bb.DeductionTypeId AND aa.Status = 1 AND bb.DeductionTypeId <> 6 AND a.ShipmentId = aa.ShipmentId), 0)) AS DeductionAmt
					  ,SplitSuffix
			FROM (
				SELECT a.ShipmentId, a.ContractId, a.DeliveryNo, a.WorkflowStatusId, SplitSuffix = '',
					a.VendorId, a.BuyCurrencyId, a.SupplierAtWarehouseDate, a.TotalSupplierGmtAmtAfterDiscount, a.QACommissionPercent, a.VendorPaymentDiscountPercent
				FROM Shipment a
					  INNER JOIN Contract f ON f.ContractId = a.ContractId AND a.Status = 1 AND f.Status = 1 AND a.IsMockShopSample = 0 AND a.IsPressSample = 0 AND a.IsStudioSample = 0
						AND a.WorkflowStatusId NOT IN (3,5,8,9) AND (f.OfficeId = @OfficeId OR @OfficeId = -1)
						AND (a.VendorId = @VendorId OR @VendorId = -1)
						AND a.CustomerAtWarehouseDate BETWEEN @DateFrom AND @DateTo
						AND f.CustomerId NOT IN (20, 24)
						AND (a.splitcount = 0 or a.IsVirtualSetSplit = 1)
				UNION 
				SELECT b.ShipmentId, b.ContractId, b.DeliveryNo, b.WorkflowStatusId, ss.SplitSuffix,	
					ss.VendorId, ss.BuyCurrencyId, ss.SupplierAtWarehouseDate, ss.TotalSupplierGmtAmtAfterDiscount, ss.QACommissionPercent, ss.VendorPaymentDiscountPercent
 				FROM Shipment b
					  INNER JOIN SplitShipment ss ON ss.ShipmentId = b.ShipmentId and ss.status = 1 and ss.IsVirtualSetSplit = 0
					  INNER JOIN Contract g ON g.ContractId = b.ContractId AND b.Status = 1 AND g.Status = 1 AND b.IsMockShopSample = 0 AND b.IsPressSample = 0 AND b.IsStudioSample = 0
						AND b.WorkflowStatusId NOT IN (3,5,8,9) AND (g.OfficeId = @OfficeId OR @OfficeId = -1)
						AND (b.VendorId = @VendorId OR @VendorId = -1)
						AND b.CustomerAtWarehouseDate BETWEEN @DateFrom AND @DateTo
						AND g.CustomerId NOT IN (20, 24)
				) AS a
				INNER JOIN Contract f ON f.ContractId = a.ContractId
				INNER JOIN NSLIndustry..Vendor v ON v.VendorId = a.VendorId
				ORDER BY f.OfficeId, v.Name, a.SupplierAtWarehouseDate, f.ContractNo, a.DeliveryNo, a.SplitSuffix
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="DateFrom" name="@DateFrom" type="DateTime" direction="Input" />
          <param key="DateTo" name="@DateTo" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="FutureOrderSummaryBySupplierReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ILSDiffDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingILSDiffList" type="Text">
        <commandText>
          SELECT * FROM ILSDiffDCNote
          WHERE FiscalYear = @fiscalYear
          AND Period = @period
          AND OfficeId = @officeId
          AND status = 1
          ORDER BY DCNoteId
        </commandText>
        <parameters>
          <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
          <param key="period" name="@period" type="int" direction="Input" />
          <param key="officeId" name="@officeId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetILSDiffDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM ILSDiffDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteId" type="Text">
        <commandText>
          SELECT Max(DCNoteId) FROM ILSDiffDCNote
        </commandText>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteNo" type="Text">
        <commandText>
          SELECT SUBSTRING(Max(DCNoteNo),7,3) FROM ILSDiffDCNote WHERE DCNoteNo LIKE '%' + @DCNoteNo + '%'
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ILSDiffDCNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ILSDiffDCNoteShipmentApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingILSDiffShipmentList" type="Text">
        <commandText>
          SELECT DCNoteShipmentId, FiscalYear, Period, ILSType, ShipmentId,
          OfficeId, DeptId, ProductTeamId, ContractId, ProductId, CurrencyId,
          NSSAmt, ReceivedAmt, ILSDiffAmt, COALESCE(DCNoteId, -1) DCNoteId,
          Status, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn
          FROM ILSDiffDCNoteShipment
          WHERE FiscalYear = @fiscalYear
          AND Period = @period
          AND OfficeId = @officeId
          AND DCNoteId IS NULL
          AND status = 1
          ORDER BY CurrencyId
        </commandText>
        <parameters>
          <parameters>
            <param key="fiscalYear" name="@fiscalYear" type="int" direction="Input" />
            <param key="period" name="@period" type="int" direction="Input" />
            <param key="officeId" name="@officeId" type="int" direction="Input" />
          </parameters>
        </parameters>
      </dataCommand>

      <dataCommand name="GetILSDiffDCNoteShipmentByKey" type="Text">
        <commandText>
          SELECT * FROM ILSDiffDCNoteShipment WHERE DCNoteShipmentId = @DCNoteShipmentId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteShipmentId" name="@DCNoteShipmentId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDebitNoteShipmentId" type="Text">
        <commandText>
          SELECT Max(DCNoteShipmentId) FROM ILSDiffDCNoteShipment
        </commandText>
      </dataCommand>

      <dataCommand name="DeleteOutstandingILSDiffDCNoteShipment" type="Text">
        <commandText>
          DELETE ILSDiffDCNoteShipment WHERE FiscalYear = @FiscalYear AND Period = @Period
          AND OfficeId = @OfficeId
          AND ILSType = @ILSType
          AND DCNoteId IS NULL
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input" />
          <param key="Period" name="@Period" type="int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="int" direction="Input" />
          <param key="ILSType" name="@ILSType" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ILSDiffDCNoteShipment" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="ARCustomerApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetARCustomerByCode" type="Text">
        <commandText>
          SELECT * FROM ARCustomer
          WHERE EpicorCode = @EpicorCode
          AND Status = 1
        </commandText>
        <parameters>
          <param key="EpicorCode" name="@EpicorCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="ARCustomer" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="GenericDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetGenericDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM GenericDCNote
          WHERE DCNoteId = @DCNoteId
          AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetGenericDCNoteByNoteNo" type="Text">
        <commandText>
          SELECT * FROM GenericDCNote
          WHERE DCNoteNo = @DCNoteNo
          AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxGenericDCNoteId" type="Text">
        <commandText>
          SELECT MAX(DCNoteId) FROM GenericDCNote
        </commandText>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="GenericDCNote" />
    </tableMappings>
  </dataSetAdapter>

</dataOperations>
