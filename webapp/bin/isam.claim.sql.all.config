<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">
  <dataSetAdapter name="UKClaimApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE ClaimId = @ClaimId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxClaimId" type="Text">
        <commandText>
          SELECT MAX(ClaimId) FROM UKClaim
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimListByCriteria" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE (UKDebitNoteNo = @UKDebitNoteNo OR @UKDebitNoteNo = '')
          AND (ItemNo = @ItemNo OR @ItemNo = '')
          AND (ContractNo = @ContractNo OR @ContractNo = '')
          AND (DebitNoteNo = @DebitNoteNo OR @DebitNoteNo = '')
          AND (VendorId = @VendorId OR @VendorId = -1)
          AND (OfficeId = @OfficeId OR @OfficeId = -1)
          AND (HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND (WorkflowStatusId @WorkflowStatusList)
          AND (ClaimTypeId = @ClaimTypeId OR @ClaimTypeId = -1)
          AND (TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          AND ISNULL(UKDebitNoteDate, '1900-01-01') BETWEEN @FromDate AND @ToDate
          AND ISNULL(UKDebitNoteReceivedDate, '1900-01-01') BETWEEN @FromReceivedDate AND @ToReceivedDate
          AND Status = 1
        </commandText>
        <parameters>
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />
          <param key="DebitNoteNo" name="@DebitNoteNo" type="varchar" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
          <param key="FromReceivedDate" name="@FromReceivedDate" type="DateTime" direction="Input" />
          <param key="ToReceivedDate" name="@ToReceivedDate" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
          <param key="WorkflowStatusList" name="@WorkflowStatusList" type="ArrayInt" direction="Input" />
          <param key="ClaimTypeId" name="@ClaimTypeId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimDiscrepancyList" type="Text">
        <commandText>
          <![CDATA[
          SELECT a.* FROM UKClaim a INNER JOIN [NS-DB01].QCIS.dbo.ClaimRequest b 
          ON a.ClaimRequestId = b.RequestId AND a.Status = 1 AND b.Status = 1 
          AND (a.VendorId <> b.VendorId OR a.ItemNo <> b.ItemNo OR a.ClaimTypeId <> b.ClaimTypeId)
          ]]>
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimEarlyArrivalList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim
          WHERE ClaimRequestId IS NULL AND Status = 1 AND ClaimTypeId In (1,2,3,4,5,7,8,10,11,13) AND HasUKDN = 1
          AND (OfficeId @OfficeIds OR -1 @OfficeIds)
          AND DATEDIFF(hh, CreatedOn, GETDATE()) > 2
          --AND OfficeId IN (1)
          --AND VendorId NOT IN (1375)
          --AND ((OfficeId = 1 AND TermOfPurchaseId = 1) OR OfficeId NOT IN (1))
          --AND VendorId = 5617
          --AND ClaimId IN (31978)
        </commandText>
        <parameters>
          <param key="OfficeIds" name="@OfficeIds" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimDebugList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim
          WHERE ClaimId IN (420)
        </commandText>
      </dataCommand>

      <dataCommand name="GetUKClaimListByBIAId" type="Text">
        <commandText>
          SELECT b.*
          FROM UKClaimBIAMapping a INNER JOIN UKClaim b ON a.ClaimId = b.ClaimId AND a.Status = 1 AND b.Status = 1 AND a.ParentId = @ParentId
        </commandText>
        <parameters>
          <param key="ParentId" name="@ParentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimApprovalList" type="Text">
        <commandText>
          SELECT a.*
          FROM UKClaim a INNER JOIN [NS-DB01].QCIS.dbo.ClaimRequest b ON a.ClaimRequestId = b.RequestId AND a.Status = 1 AND b.Status = 1
          AND a.WorkflowStatusId = 1 AND b.NSRechargePercent > 0
          AND a.OfficeId @OfficeIds
        </commandText>
        <parameters>
          <param key="OfficeIds" name="@OfficeIds" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimCOOApprovalList" type="Text">
        <commandText>
          SELECT a.*
          FROM UKClaim a LEFT JOIN [NS-DB01].QCIS.dbo.ClaimRequest b ON a.ClaimRequestId = b.RequestId AND b.Status = 1 AND b.NSRechargePercent > 0
          WHERE
          a.VendorId = @VendorId
          AND a.OfficeId @OfficeIds AND a.Status = 1
          AND ((b.NSRechargePercent > 0 AND a.WorkflowStatusId = 3) OR (a.SettlementOptionId = 1 AND a.WorkflowStatusId IN (1, 3)))
        </commandText>
        <parameters>
          <param key="OfficeIds" name="@OfficeIds" type="ArrayInt" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimListByTypeMapping" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE Status = 1
          AND (ItemNo = @ItemNo OR @ItemNo = '')
          AND ((ClaimTypeId = @ClaimTypeId AND UKDebitNoteNo = @UKDebitNoteNo AND ClaimTypeId NOT IN (3)) OR
          --(ClaimTypeId = @ClaimTypeId AND ClaimMonth = @UKDebitNoteNo AND ClaimTypeId = 3) OR
          (ClaimTypeId = @ClaimTypeId AND UKDebitNoteNo = @UKDebitNoteNo AND ClaimTypeId = 3) OR
          (ClaimTypeId = @ClaimTypeId AND ClaimTypeId = 5))
          AND (WorkflowStatusId IN (WorkflowStatusId) OR ClaimId = @ClaimId)
          AND VendorId = @VendorId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />
          <param key="ClaimTypeId" name="@ClaimTypeId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="Qty" name="@Qty" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimListByTypeMappingByQty" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE Status = 1
          AND (ItemNo = @ItemNo OR @ItemNo = '')
          AND ((ClaimTypeId = @ClaimTypeId AND UKDebitNoteNo = @UKDebitNoteNo AND ClaimTypeId NOT IN (1,2,3)) OR
          --(ClaimTypeId = @ClaimTypeId AND ClaimMonth = @UKDebitNoteNo AND ClaimTypeId = 3) OR
          (ClaimTypeId = @ClaimTypeId AND UKDebitNoteNo = @UKDebitNoteNo AND ClaimTypeId = 3) OR
          (ClaimTypeId = @ClaimTypeId AND UKDebitNoteNo = @UKDebitNoteNo AND ClaimTypeId IN (1,2) AND Qty = @Qty) OR
          (ClaimTypeId = @ClaimTypeId AND ClaimTypeId = 5))
          AND (WorkflowStatusId IN (WorkflowStatusId) OR ClaimId = @ClaimId)
          AND VendorId = @VendorId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />
          <param key="ClaimTypeId" name="@ClaimTypeId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="Qty" name="@Qty" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetNotYetMappedBIAUKClaimByClaimRequestId" type="Text">
        <commandText>
          SELECT * FROM UKClaim WHERE ClaimTypeId = 9 and Status = 1 AND CONVERT(int, DebitNoteNo) = @ClaimRequestId
          WHERE ClaimId NOT IN (SELECT ParentId FROM UKClaimBIAMapping)
        </commandText>
        <parameters>
          <param key="ClaimRequestId" name="@ClaimRequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetToBeCancelledUKClaimList" type="Text">
        <commandText>
          SELECT * FROM UKClaim WHERE ClaimId IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)
          AND OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND (ClaimId = @ClaimId OR @ClaimId = -1)
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOutstandingUKClaimList" type="Text">
        <commandText>
          <![CDATA[
          
          SELECT a.ClaimId, a.Amount INTO #WithoutUKDNCancelled
          FROM UKClaim a INNER JOIN UKClaimRefund b ON a.ClaimId = b.ClaimId And a.Status = 1 AND b.Status = 1 AND a.HasUKDN = 0 AND a.VendorId NOT IN (3933)
          INNER JOIN UKClaimDCNoteDetail c ON b.ClaimId = c.ClaimId AND b.ClaimRefundId = c.ClaimRefundId AND c.Status = 1  
          INNER JOIN UKClaimDCNote d ON c.DCNoteId = d.DCNoteId AND d.Status = 1 AND d.DCNoteNo IS NOT NULL AND d.DCNoteDate <= @CutOffDate
          INNER JOIN UKClaimDCNoteDetail e ON a.ClaimId = e.ClaimId AND e.ClaimRefundId = 0 AND e.Status = 1  
          INNER JOIN UKClaimDCNote f ON e.DCNoteId = f.DCNoteId AND f.Status = 1 AND f.DCNoteNo IS NOT NULL AND f.DCNoteDate <= @CutOffDate
          GROUP BY a.ClaimId, a.Amount
          HAVING a.Amount = SUM(b.Amount)  

          SELECT * FROM
          (
          SELECT DISTINCT a.ClaimId AS ClaimId, a.ClaimTypeId, a.ClaimMonth, a.ItemNo, a.ContractNo, a.OfficeId, a.HandlingOfficeId, a.VendorId, a.SZVendorId, a.ProductTeamId, a.TermOfPurchaseId, a.Qty, a.CurrencyId, a.Amount AS Amount, a.HasUKDN,
                 a.UKDebitNoteNo, a.UKDebitNoteDate, a.UKDebitNoteReceivedDate, a.Remark, a.ClaimRequestId, a.DebitNoteNo, a.DebitNoteDate, a.DebitNoteAmt, a.IsInterfaced,
                 a.IsRechargeInterfaced, a.WorkflowStatusId, LEFT(v.Name, 100) AS GUId, a.IsReadyForSettlement, a.SettlementOptionId,
                 CASE WHEN bm.ParentId IS NULL THEN CONVERT(VARCHAR, a.ClaimId) ELSE CONVERT(varchar, bm.ParentId) + '-' END AS PnLAccountCode, a.PaymentOfficeId,
                 a.Status, a.CreatedOn, a.CreatedBy, a.ModifiedOn, a.ModifiedBy
          FROM UKClaim a 
          INNER JOIN NSLIndustry..Vendor v ON a.VendorId = v.VendorId AND a.VendorId NOT IN (3933)
          LEFT JOIN UKClaimDCNoteDetail b ON a.ClaimId = b.ClaimId AND b.ClaimRefundId = 0 AND b.Status = 1 
          LEFT JOIN UKClaimDCNote c ON b.DCNoteId = c.DCNoteId AND c.Status = 1 AND a.WorkflowStatusId IN (5, 9)
          LEFT JOIN UKClaimBIAMapping bm ON a.ClaimId = bm.ClaimId AND bm.Status = 1
		      LEFT JOIN [NS-DB01].QCIS.DBO.ClaimRequest as q ON q.RequestId=a.ClaimRequestId
          WHERE (@CutOffDate >= ISNULL(CASE WHEN a.ClaimTypeId = 9 THEN CONVERT(DATETIME, CONVERT(VARCHAR, a.CreatedOn, 112)) ELSE a.UKDebitNoteReceivedDate END, '1990-01-01') AND (c.DCNoteDate IS NULL OR c.DCNoteDate > @CutOffDate OR (a.HasUKDN = 0 AND NOT EXISTS(SELECT * FROM UKClaimBIADiscrepancy WHERE ClaimId = a.ClaimId AND IsLocked = 1 AND Status = 1)) OR EXISTS(SELECT * FROM UKClaimBIADiscrepancy ad INNER JOIN UKClaimBIAMapping am ON ad.ClaimId = am.ParentId WHERE am.ClaimId = a.ClaimId AND ad.IsLocked = 0 AND ad.Status = 1 AND am.Status = 1)))
          AND (a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId) OR @OfficeId = -1)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          AND (@HandlingOfficeId = -1 OR a.OfficeId <> 17 OR a.HandlingOfficeId = @HandlingOfficeId)
          AND (a.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          --AND ISNULL(c.IsInterfaced, 0) = 0
          --AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_FullUKClaimRefund_OSRpt)
          --AND a.WorkflowStatusId NOT IN (9)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM #WithoutUKDNCancelled)
          AND a.Status = 1
          --AND a.ProductTeamId IN (SELECT OfficeStructureId FROM vw_HomeProductTeamId)
          AND (@NCOptionId IN (-1,1))
		      AND (q.WorkflowStatusId IS NULL OR q.WorkflowStatusId @WFSExcludingList)		  

          UNION ALL
          
          SELECT DISTINCT a.ClaimRefundId * -1 AS ClaimId, b.ClaimTypeId, b.ClaimMonth, b.ItemNo, b.ContractNo, b.OfficeId, b.HandlingOfficeId, b.VendorId, b.SZVendorId, b.ProductTeamId, b.TermOfPurchaseId, b.Qty, b.CurrencyId, a.Amount * -1 AS Amount, b.HasUKDN,
                 b.UKDebitNoteNo, b.UKDebitNoteDate, CASE WHEN b.UKDebitNoteReceivedDate IS NULL THEN NULL ELSE a.ReceivedDate END AS UKDebitNoteReceivedDate, a.Remark, b.ClaimRequestId, b.DebitNoteNo, b.DebitNoteDate, b.DebitNoteAmt, b.IsInterfaced,
                 b.IsRechargeInterfaced, b.WorkflowStatusId, LEFT(v.Name, 100) AS GUId, a.IsReadyForSettlement, a.SettlementOptionId, CONVERT(VARCHAR, a.ClaimId) + '-' AS PnLAccountCode, b.PaymentOfficeId, b.Status, a.CreatedOn, a.CreatedBy, a.ModifiedOn, a.ModifiedBy
          FROM UKClaimRefund a INNER JOIN UKClaim b ON a.ClaimId = b.ClaimId AND a.Status = 1 AND b.Status = 1 AND b.VendorId NOT IN (3933)
          INNER JOIN NSLIndustry..Vendor v ON b.VendorId = v.VendorId
          LEFT JOIN UKClaimDCNoteDetail z ON a.ClaimId = z.ClaimId AND z.ClaimRefundId = a.ClaimRefundId AND z.Status = 1
          LEFT JOIN UKClaimDCNote c ON z.DCNoteId = c.DCNoteId AND c.Status = 1 AND b.WorkflowStatusId IN (5, 9)
		      LEFT JOIN [NS-DB01].QCIS.DBO.ClaimRequest as q ON q.RequestId=b.ClaimRequestId
          WHERE (b.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId) OR @OfficeId = -1)
          AND (@HandlingOfficeId = -1 OR b.OfficeId <> 17 OR b.HandlingOfficeId = @HandlingOfficeId)
          AND (@VendorId = -1 OR b.VendorId = @VendorId)
          AND (b.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          AND (@CutOffDate >= ISNULL(CASE WHEN CASE WHEN b.ClaimTypeId = 9 THEN CONVERT(DATETIME, CONVERT(VARCHAR, b.CreatedOn, 112)) ELSE b.UKDebitNoteReceivedDate END IS NULL THEN NULL ELSE a.ReceivedDate END, '1990-01-01') AND (c.DCNoteDate IS NULL OR c.DCNoteDate > @CutOffDate OR (b.HasUKDN = 0 AND NOT EXISTS(SELECT * FROM UKClaimBIADiscrepancy WHERE ClaimId = a.ClaimId AND IsLocked = 1 AND Status = 1)) OR EXISTS(SELECT * FROM UKClaimBIADiscrepancy ad INNER JOIN UKClaimBIAMapping am ON ad.ClaimId = am.ParentId WHERE am.ClaimId = a.ClaimId AND ad.IsLocked = 0 AND ad.Status = 1 AND am.Status = 1)))
          --AND ISNULL(c.IsInterfaced, 0) = 0
          --AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_FullUKClaimRefund_OSRpt)
          --AND b.WorkflowStatusId NOT IN (9)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM #WithoutUKDNCancelled)
          --AND b.ProductTeamId IN (SELECT OfficeStructureId FROM vw_HomeProductTeamId)
          AND (@NCOptionId IN (-1,2))
		      AND (q.WorkflowStatusId IS NULL OR q.WorkflowStatusId @WFSExcludingList)		  
          ) AS x
          
          ORDER BY OfficeId, GUId, PnLAccountCode, UKDebitNoteDate, ClaimTypeId, UKDebitNoteNo, ClaimId DESC
          
          DROP TABLE #WithoutUKDNCancelled
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
          <param key="CutOffDate" name="@CutOffDate" type="DateTime" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
          <param key="NCOptionId" name="@NCOptionId" type="Int" direction="Input" />
          <param key="WFSExcludingList" name="@WFSExcludingList" type="ArrayInt" direction="Input"/>
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimReviewList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim a WHERE a.Status = 1
          AND a.WorkflowStatusId = @WorkflowStatusId
          AND a.OfficeId @OfficeIds
        </commandText>
        <parameters>
          <param key="OfficeIds" name="@OfficeIds" type="ArrayInt" direction="Input" />
          <param key="WorkflowStatusId" name="@WorkflowStatusId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimByGuid" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE Guid = @Guid
        </commandText>
        <parameters>
          <param key="Guid" name="@Guid" type="Varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimByClaimRequestId" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE ClaimRequestId = @ClaimRequestId AND Status = 1
          AND ClaimId NOT IN (SELECT ClaimId FROM UKClaimUnavailbleList WHERE Status = 1)
        </commandText>
        <parameters>
          <param key="ClaimRequestId" name="@ClaimRequestId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetBIAUKClaimByClaimRequestId" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WITH (NOLOCK)
          WHERE DebitNoteNo = @ClaimRequestId AND Status = 1
          UNION
          SELECT * FROM UKClaim WHERE Status = 1 AND ClaimId IN (
          SELECT a.ParentId FROM UKClaimBIAMapping a INNER JOIN UKClaim b ON a.ClaimId = b.ClaimId AND b.Status = 1 AND CONVERT(varchar,b.ClaimRequestId) = @ClaimRequestId)
        </commandText>
        <parameters>
          <param key="ClaimRequestId" name="@ClaimRequestId" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetNotYetMappedUKClaimList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WHERE WorkflowStatusId = 0 AND Status = 1 AND ClaimRequestId IS NULL AND ClaimTypeId NOT IN (6, 9, 12, 14)
          --AND ((OfficeId = 1 AND TermOfPurchaseId = 1) OR OfficeId NOT IN (1))
        </commandText>
      </dataCommand>
      <dataCommand name="GetNewlyMappedUKClaimList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaim WHERE WorkflowStatusId = 0 AND Status = 1 AND ClaimRequestId IS NOT NULL AND ClaimTypeId NOT IN (6, 9, 12, 14)
          AND ClaimId NOT IN  (SELECT ClaimId FROM UKClaimUnavailbleList)
          --AND ((OfficeId = 1 AND TermOfPurchaseId = 1) OR OfficeId NOT IN (1))
        </commandText>
      </dataCommand>
      <dataCommand name="GetHomeAndBeautyProductTeam" type="Text">
        <commandText>
          SELECT * FROM vw_HomeProductTeamId WHERE OfficeStructureId = @ProductTeamId
          UNION ALL
          SELECT * FROM vw_BeautyProductTeamId WHERE OfficeStructureId = @ProductTeamId
        </commandText>
        <parameters>
          <param key="ProductTeamId" name="@ProductTeamId" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaim" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimSummaryReport" type="Text">
        <commandText>
          <![CDATA[
            SELECT *,
                OfficeName = (SELECT RTRIM(REPLACE(Description,'Office','')) FROM Office AS o WHERE o.OfficeId=c.OfficeId),
                ProductTeam = (SELECT Description FROM NSLDB..OfficeStructure WHERE OfficeStructureId=c.ProductTeamId),
                CurrencyCode = (SELECT CurrencyCode FROM Currency WHERE CurrencyId=c.CurrencyId),
                USDExchangeRate = (CASE WHEN c.CurrencyId=3 THEN 1 ELSE 
				                                (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId=c.CurrencyId AND ExchangeRateTypeId=2 AND (EffectiveTypeId=0 OR (c.UKDebitNoteReceivedDate BETWEEN EffectiveDateFrom AND EffectiveDateTo)) ORDER BY EffectiveTypeId DESC)
				                                / (SELECT TOP 1 ExchangeRate FROM ExchangeRate WHERE CurrencyId=3 AND ExchangeRateTypeId=2 AND (EffectiveTypeId=0 OR (c.UKDebitNoteReceivedDate BETWEEN EffectiveDateFrom AND EffectiveDateTo)) ORDER BY EffectiveTypeId DESC)
				                                END), 
                VendorName = (SELECT Name FROM NSLINDUSTRY..Vendor WHERE VendorId=c.VendorId)
            FROM UKClaim AS c WITH (NOLOCK)
                LEFT JOIN nsldb..accountfinancialcalender AS afc ON c.UKDebitNoteReceivedDate BETWEEN afc.StartDate and afc.EndDate and afc.AppId = 9
                LEFT JOIN [NS-DB01].qcis.dbo.ClaimRequest AS cr ON cr.RequestId = c.ClaimRequestId
            WHERE c.Status=1
              AND (@UKDNDateFrom IS NULL OR UKDebitNoteReceivedDate>=@UKDNDateFrom)
              AND (@UKDNDateTo IS NULL OR UKDebitNoteReceivedDate<=@UKDNDateTo)
              AND (@FiscalYear = -1 OR (afc.BudgetYear=@FiscalYear AND afc.Period BETWEEN @PeriodFrom AND @PeriodTo))
              AND (@VendorId=-1 OR c.VendorId=@VendorId)
              AND (@ProductTeamId=-1 OR ProductTeamId=@ProductTeamId)
              --AND (@ClaimTypeId=-1 OR ClaimTypeId=@ClaimTypeId)
              AND (c.ClaimTypeId @ClaimTypeIdList)
              --AND (FaultReasonId @ClaimReasonIdList)
              AND (@ClaimReasonId = -1 OR FaultReasonId = @ClaimReasonId)
              AND (OfficeId @OfficeIdList)
              --AND c.ClaimId <> 31963 -- Requested By Rosaline 2019-01-30
          ]]>
        </commandText>
        <parameters>
          <param key="UKDNDateFrom" name="@UKDNDateFrom" type="datetime" direction="Input"/>
          <param key="UKDNDateTo" name="@UKDNDateTo" type="datetime" direction="Input"/>
          <param key="FiscalYear" name="@FiscalYear" type="int" direction="Input"/>
          <param key="PeriodFRom" name="@PeriodFrom" type="int" direction="Input"/>
          <param key="PeriodTo" name="@PeriodTo" type="int" direction="Input"/>
          <param key="VendorId" name="@VendorId" type="int" direction="Input"/>
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input"/>
          <param key="ClaimTypeIdList" name="@ClaimTypeIdList" type="ArrayInt" direction="Input"/>
          <param key="ClaimReasonId" name="@ClaimReasonId" type="Int" direction="Input"/>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimReport" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="OutstandingUKClaimReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUKClaimReport" type="Text">
        <commandText>
          <![CDATA[
          select b.OfficeCode, d.Name AS VendorName, a.UKDebitNoteNo, a.UKDebitNoteDate, a.UKDebitNoteReceivedDate,  c.CurrencyCode, a.Amount, ROUND(a.Amount * e.ExchangeRate / f.ExchangeRate ,2) AS BaseAmt,
          CASE WHEN a.ClaimTypeId = 1 THEN 'Rework' 
               WHEN a.ClaimTypeId = 2 THEN 'Reject' 
               WHEN a.ClaimTypeId = 3 THEN 'MFRN'  
               WHEN a.ClaimTypeId = 4 THEN 'CFS'  
               WHEN a.ClaimTypeId = 5 THEN 'Safety Issue' 
               WHEN a.ClaimTypeId = 6 THEN 'Audit Fee' 
               WHEN a.ClaimTypeId = 7 THEN 'Fabric Test' 
               WHEN a.ClaimTypeId = 8 THEN 'Penalty' 
               WHEN a.ClaimTypeId = 9 THEN 'Bill In Advance' 
               WHEN a.ClaimTypeId = 10 THEN 'QCC' 
               WHEN a.ClaimTypeId = 11 THEN 'CHB' 
               WHEN a.ClaimTypeId = 12 THEN 'GB Testing Charge'
               WHEN a.ClaimTypeId = 13 THEN 'FIRA Charge'
               WHEN a.ClaimTypeId = 14 THEN 'Others'
               END AS ClaimType,
          a.ItemNo, a.ContractNo, g.Code AS DeptCode
          FROM UKClaim a
          inner join NSLDB..Office b ON a.OfficeId = b.OfficeId AND a.Status = 1
          INNER JOIN NSLDB..Currency c ON a.CurrencyId = c.CurrencyId
          INNER JOIN NSLIndustry..Vendor d ON a.VendorId = d.VendorId
          INNER JOIN ExchangeRate e ON a.CurrencyId = e.CurrencyId AND e.ExchangeRateTypeId = 1 AND a.UKDebitNoteReceivedDate between e.EffectiveDateFrom and e.EffectiveDateTo
          INNER JOIN ExchangeRate f ON 3 = f.CurrencyId AND e.ExchangeRateTypeId = 1 AND a.UKDebitNoteReceivedDate between f.EffectiveDateFrom and f.EffectiveDateTo
          INNER JOIN NSLDB..OfficeStructure g ON a.ProductTeamId = g.OfficeStructureId
          WHERE a.WorkflowStatusId = 5 AND a.UKDebitNoteReceivedDate <= @CutOffDate
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="CutOffDate" name="@CutOffDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OutStandingUKClaimReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimLogApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimLogByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimLog WITH (NOLOCK)
          WHERE LogId = @LogId
        </commandText>
        <parameters>
          <param key="LogId" name="@LogId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxClaimLogId" type="Text">
        <commandText>
          SELECT MAX(LogId) FROM UKClaimLog
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimLogListByClaimId" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimLog WITH (NOLOCK)
          WHERE ClaimId = @ClaimId ORDER BY LogDate DESC
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetRefundSupportingUploadLog" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimLog WITH (NOLOCK)
          WHERE ClaimId = @ClaimId AND LogText LIKE 'Add Attachment _Next Claim Refund Supporting Doc_%'
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimLog" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimBIAMappingApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimBIAMappingByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimBIAMapping WITH (NOLOCK)
          WHERE ClaimId = @ClaimId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimBIAMappingList" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimBIAMapping WITH (NOLOCK)
          WHERE ParentId = @ParentId AND Status = 1
        </commandText>
        <parameters>
          <param key="ParentId" name="@ParentId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimBIAMapping" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimBIADiscrepancyApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimBIADiscrepancyByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimBIADiscrepancy WITH (NOLOCK)
          WHERE ClaimId = @ClaimId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimBIADiscrepancyByChildId" type="Text">
        <commandText>
          SELECT a.*
          FROM UKClaimBIADiscrepancy a WITH (NOLOCK) INNER JOIN UKClaimBIAMapping b on a.ClaimId = b.ParentId AND b.ClaimId = @ChildId
          WHERE a.Status = 1 AND b.Status = 1
        </commandText>
        <parameters>
          <param key="ChildId" name="@ChildId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimBIADiscrepancy" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimPhasingApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimPhasingReport" type="Text">
        <commandText>
          <![CDATA[
				select a.OfficeId, a.VendorId, c.Name, a.CurrencyId,
					ClaimTypeId = (case when @GroupByReason=1 then -1 else a.ClaimTypeId end),
					ClaimReason = (case when @GroupByReason=1 
										then Upper(CASE WHEN cr.ReasonDesc IS NOT NULL 
														THEN cr.ReasonDesc 
														ELSE (CASE a.ClaimTypeId WHEN 6 THEN 'Audit Fee' WHEN 7 THEN 'Fabric Test'WHEN 8 THEN 'Penalty Charge' WHEN 12 THEN 'GB Test' WHEN 14 THEN 'Others' ELSE 'Others' END) END) 
										else '' end),
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.amount else 0 end,0))  P01Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.amount else 0 end,0))  P02Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.amount else 0 end,0))  P03Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.amount else 0 end,0))  P04Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.amount else 0 end,0))  P05Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.amount else 0 end,0))  P06Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.amount else 0 end,0))  P07Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.amount else 0 end,0))  P08Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.amount else 0 end,0))  P09Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.amount else 0 end,0))  P10Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.amount else 0 end,0))  P11Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.amount else 0 end,0))  P12Amt,
					sum(round(case when b.budgetyear = @FiscalYear then a.amount else 0 end,0))  TotalAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.NSAmt else 0 end,0))  P01NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.NSAmt else 0 end,0))  P02NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.NSAmt else 0 end,0))  P03NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.NSAmt else 0 end,0))  P04NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.NSAmt else 0 end,0))  P05NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.NSAmt else 0 end,0))  P06NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.NSAmt else 0 end,0))  P07NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.NSAmt else 0 end,0))  P08NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.NSAmt else 0 end,0))  P09NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.NSAmt else 0 end,0))  P10NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.NSAmt else 0 end,0))  P11NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.NSAmt else 0 end,0))  P12NSAmt,
					sum(round(case when b.budgetyear = @FiscalYear then a.NSAmt else 0 end,0))  TotalNSAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.VendorAmt else 0 end,0))  P01VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.VendorAmt else 0 end,0))  P02VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.VendorAmt else 0 end,0))  P03VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.VendorAmt else 0 end,0))  P04VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.VendorAmt else 0 end,0))  P05VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.VendorAmt else 0 end,0))  P06VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.VendorAmt else 0 end,0))  P07VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.VendorAmt else 0 end,0))  P08VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.VendorAmt else 0 end,0))  P09VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.VendorAmt else 0 end,0))  P10VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.VendorAmt else 0 end,0))  P11VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.VendorAmt else 0 end,0))  P12VendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear then a.VendorAmt else 0 end,0))  TotalVendorAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P01AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P02AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P03AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P04AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P05AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P06AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P07AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P08AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P09AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P10AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P11AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P12AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  TotalAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P01NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P02NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P03NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P04NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P05NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P06NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P07NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P08NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P09NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P10NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P11NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P12NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  TotalNSAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P01VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P02VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P03VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P04VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P05VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P06VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P07VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P08VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P09VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P10VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P11VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P12VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  TotalVendorAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP01AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP02AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP03AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP04AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP05AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP06AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP07AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP08AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP09AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP10AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP11AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP12AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP01NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP02NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP03NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP04NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP05NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP06NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP07NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP08NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP09NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP10NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP11NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP12NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalNSAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP01VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP02VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP03VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP04VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP05VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP06VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP07VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP08VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP09VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP10VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP11VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP12VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalVendorAmtInUSD,
					--v.LatestShipmentDate
					LatestShipmentDate=(SELECT LatestShipmentDate FROM vw_VendorParam WITH (NOLOCK) WHERE VendorId = a.VendorId)
				from vw_UKClaimPhasingQAIS a
					inner join nsldb..accountfinancialcalender b on a.receiveddate between b.startdate and b.enddate and b.appid = 9
						and b.budgetyear IN (@FiscalYear, @FiscalYear -1)
						and b.Period BETWEEN @PeriodFrom AND @PeriodTo
						and (a.officeid = @OfficeId OR @OfficeId = -1)
						AND (a.VendorId = @VendorId OR @VendorId = -1)
					inner join exchangerate z on z.exchangeratetypeid = 1 and a.receiveddate between z.effectivedatefrom and z.effectivedateto and z.currencyid = a.currencyid
					inner join exchangerate y on y.exchangeratetypeid = 1 and a.receiveddate between y.effectivedatefrom and y.effectivedateto and y.currencyid = 3
					inner join nslindustry..vendor c on a.vendorid = c.vendorid
					--LEFT JOIN vw_VendorParam v ON v.VendorId = c.VendorId
					LEFT JOIN [NS-DB01].qcis.dbo.ClaimReason as cr on cr.ReasonId=a.FaultReasonId and @GroupByReason=1
				where
					(a.vendoramt > 0 or a.nsamt > 0)	-- Pay amount only
				group by a.officeid, a.vendorid, c.name, a.currencyid,
					--a.claimtypeid,
					(case when @GroupByReason=1 then -1 else a.ClaimTypeId end),
					(case when @GroupByReason=1 then Upper(CASE WHEN cr.ReasonDesc IS NOT NULL THEN cr.ReasonDesc ELSE (CASE a.ClaimTypeId WHEN 6 THEN 'Audit Fee' WHEN 7 THEN 'Fabric Test'WHEN 8 THEN 'Penalty Charge' WHEN 12 THEN 'GB Test' WHEN 14 THEN 'Others' ELSE 'Others' END) END) else '' end)
				order by a.OfficeId, c.Name, a.CurrencyId, ClaimTypeId, ClaimReason, a.VendorId
				]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="GroupByReason" name="@GroupByReason" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetUKClaimPhasingByProductTeamReport" type="Text">
        <commandText>
          <![CDATA[
				select a.OfficeId, a.ProductTeamId, Name=isnull(d.Description,'N/A'), a.ClaimTypeId, a.CurrencyId,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.amount else 0 end,0))  P01Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.amount else 0 end,0))  P02Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.amount else 0 end,0))  P03Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.amount else 0 end,0))  P04Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.amount else 0 end,0))  P05Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.amount else 0 end,0))  P06Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.amount else 0 end,0))  P07Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.amount else 0 end,0))  P08Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.amount else 0 end,0))  P09Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.amount else 0 end,0))  P10Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.amount else 0 end,0))  P11Amt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.amount else 0 end,0))  P12Amt,
					sum(round(case when b.budgetyear = @FiscalYear then a.amount else 0 end,0))  TotalAmt,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P01AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P02AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P03AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P04AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P05AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P06AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P07AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P08AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P09AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P10AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P11AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  P12AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  TotalAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P01NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P02NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P03NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P04NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P05NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P06NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P07NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P08NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P09NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P10NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P11NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  P12NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  TotalNSAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P01VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 2 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P02VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 3 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P03VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 4 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P04VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 5 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P05VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 6 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P06VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 7 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P07VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 8 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P08VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 9 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P09VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 10 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P10VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 11 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P11VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear AND b.period = 12 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  P12VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  TotalVendorAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP01AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP02AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP03AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP04AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP05AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP06AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP07AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP08AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP09AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP10AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP11AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYP12AmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.amount * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP01NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP02NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP03NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP04NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP05NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP06NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP07NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP08NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP09NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP10NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP11NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYP12NSAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.nsamt * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalNSAmtInUSD,

					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP01VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 2 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP02VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 3 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP03VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 4 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP04VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 5 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP05VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 6 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP06VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 7 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP07VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 8 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP08VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 9 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP09VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 10 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP10VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 11 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP11VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 AND b.period = 12 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYP12VendorAmtInUSD,
					sum(round(case when b.budgetyear = @FiscalYear - 1 then a.vendoramt * z.exchangerate / y.exchangerate else 0 end,0))  LYTotalVendorAmtInUSD,
					LatestShipmentDate = (SELECT MAX(ISNULL(i.InvoiceDate, s.CustomerAtWarehouseDate))
											FROM Contract c with (nolock)
												INNER JOIN Shipment s with (nolock) ON c.ContractId = s.ContractId and s.Status=1
												INNER JOIN Invoice i with (nolock) ON s.ShipmentId = i.ShipmentId
												WHERE c.ProductTeamId=a.ProductTeamId and c.OfficeId=a.OfficeId
											)
				from vw_UKClaimPhasingQAIS a
					inner join nsldb..accountfinancialcalender b on a.receiveddate between b.startdate and b.enddate and b.appid = 9
						and b.budgetyear IN (@FiscalYear, @FiscalYear -1)
						and b.Period BETWEEN @PeriodFrom AND @PeriodTo
						and (a.officeid = @OfficeId OR @OfficeId = -1)
						AND (a.VendorId = @VendorId OR @VendorId = -1)
					inner join exchangerate z on z.exchangeratetypeid = 1 and a.receiveddate between z.effectivedatefrom and z.effectivedateto and z.currencyid = a.currencyid
					inner join exchangerate y on y.exchangeratetypeid = 1 and a.receiveddate between y.effectivedatefrom and y.effectivedateto and y.currencyid = 3
					left join nsldb..OfficeStructure d on a.ProductTeamId = d.OfficeStructureId
				where
					(a.vendoramt > 0 or a.nsamt > 0)	-- Pay amount only
				group by a.officeid, a.ProductTeamId, d.Description, a.currencyid, a.claimtypeid
				order by a.OfficeId, d.Description, a.CurrencyId, a.ClaimTypeId, a.ProductTeamId
				]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetUKClaimPhasingReportByOffice" type="Text">
        <commandText>
          <![CDATA[
          SELECT FiscalYear = x.BudgetYear, x.Period,
              Party = (CASE WHEN x.Party='N' THEN 'NS' ELSE 'SUPPLIER' END),
              PayReceive = (CASE WHEN x.PayReceive='P' THEN 'PAY' ELSE 'RECEIVE' END),
              SZAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 0  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)), -- HK-VM (NMC)
              HKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 1  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              SHAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 2  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              LKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 3  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              THAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 4  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              IDAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 5  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              PHAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 6  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              BDAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 7  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              INAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 8  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TRAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 9  THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              UKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 10 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              FYAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 11 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              NMAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 12 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              NDAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 13 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              PKAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 14 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              MAAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 15 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              VNAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 16 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              DGAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 17 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              EGAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 18 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              CAAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo = 19 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TotalAmountUSD = SUM(ROUND(CASE WHEN x.OfficeNo BETWEEN 0 AND 19 THEN x.Amount * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0))
          FROM
              (
                  SELECT afc.BudgetYear, afc.Period,
                      cp.CurrencyId, cp.ReceivedDate, cp.OfficeId,
                      OfficeNo = (CASE WHEN cp.OfficeId in (1) AND uc.TermOfPurchaseId<>1 THEN 0 ELSE cp.OfficeId END),
                      --OfficeNo = cp.OfficeId,
                      Amount = (CASE WHEN (pr.PayReceive='P' and (CASE WHEN p.Party='N' THEN cp.NSAmt ELSE cp.VendorAmt END) >=0) 
                                        or (pr.PayReceive='R' and (CASE WHEN p.Party='N' THEN cp.NSAmt ELSE cp.VendorAmt END) <0 )
					                          THEN ABS(CASE WHEN p.Party='N' THEN cp.NSAmt ELSE cp.VendorAmt END) 
					                          ELSE 0 
					                          END),
--                     PayAmount = (CASE WHEN cp.Amount>=0 THEN (CASE WHEN p.PayBy='N' THEN cp.NSAmt ELSE cp.VendorAmt END) ELSE 0 END),
--                     ReceiveAmount = (CASE WHEN cp.Amount<0 THEN (CASE WHEN p.PayBy='N' THEN cp.NSAmt ELSE cp.VendorAmt END) ELSE 0 END),
                      p.Party, PR.PayReceive
                  FROM
                      (SELECT Party='N' UNION SELECT Party='V') AS p
                      INNER JOIN (SELECT PayReceive='P' UNION SELECT PayReceive='R') AS pr ON 1=1 --PayReceive = (CASE WHEN (CASE WHEN p.PayBy='N' THEN cp.NSAmt ELSE cp.VendorAmt END)>=0 THEN 'P' ELSE 'R' END) 
                      --INNER JOIN (SELECT PayReceive='P' UNION SELECT PayReceive='R') AS pr ON 1=1 --PayReceive = (CASE WHEN (CASE WHEN p.PayBy='N' THEN cp.NSAmt ELSE cp.VendorAmt END)>=0 THEN 'P' ELSE 'R' END) 
                      INNER JOIN nsldb..AccountFinancialCalender AS afc WITH (NOLOCK) ON 1=1
                      LEFT JOIN vw_UKClaimPhasingQAIS AS cp ON cp.ReceivedDate BETWEEN afc.StartDate AND afc.EndDate
                      LEFT JOIN UKClaim AS uc ON uc.ClaimId = cp.ClaimId AND uc.Status = 1
                      LEFT JOIN Contract AS c ON c.ContractNo = uc.ContractNo
                  WHERE
                      afc.AppId = 9
                      AND (@FiscalYear=-1 OR (afc.BudgetYear BETWEEN  @FiscalYear-1 AND @FiscalYear AND afc.Period BETWEEN @PeriodFrom AND @PeriodTo))
                      AND (@VendorId = -1 OR cp.VendorId = @VendorId)
              ) as x
              INNER JOIN ExchangeRate xr  WITH (NOLOCK) ON xr.ExchangeRateTypeId = 1  and x.ReceivedDate between xr.EffectiveDateFrom  and xr.EffectiveDateTo  and xr.CurrencyId = x.CurrencyId
              INNER JOIN ExchangeRate xru WITH (NOLOCK) ON xru.ExchangeRateTypeId = 1 and x.ReceivedDate between xru.EffectiveDateFrom and xru.EffectiveDateTo and xru.CurrencyId = 3
          GROUP BY
              x.BudgetYear, x.Period, x.Party, x.PayReceive
          ORDER BY
            x.BudgetYear, x.Period, x.Party, x.PayReceive
            
          ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetUKClaimPhasingReportByOfficeClaimReason" type="Text">
        <commandText>
          <![CDATA[
          SELECT FiscalYear = x.BudgetYear, x.Office, x.ReasonDesc, 
              P1VendorAmt = SUM(ROUND(CASE WHEN x.Period = 1  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P2VendorAmt = SUM(ROUND(CASE WHEN x.Period = 2  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P3VendorAmt = SUM(ROUND(CASE WHEN x.Period = 3  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P4VendorAmt = SUM(ROUND(CASE WHEN x.Period = 4  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P5VendorAmt = SUM(ROUND(CASE WHEN x.Period = 5  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P6VendorAmt = SUM(ROUND(CASE WHEN x.Period = 6  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P7VendorAmt = SUM(ROUND(CASE WHEN x.Period = 7  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P8VendorAmt = SUM(ROUND(CASE WHEN x.Period = 8  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P9VendorAmt = SUM(ROUND(CASE WHEN x.Period = 9  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P10VendorAmt = SUM(ROUND(CASE WHEN x.Period = 10 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P11VendorAmt = SUM(ROUND(CASE WHEN x.Period = 11 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P12VendorAmt = SUM(ROUND(CASE WHEN x.Period = 12 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TotalVendorAmt = SUM(ROUND(CASE WHEN x.Period BETWEEN 1 AND 12 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P1NSAmt = SUM(ROUND(CASE WHEN x.Period = 1  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P2NSAmt = SUM(ROUND(CASE WHEN x.Period = 2  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P3NSAmt = SUM(ROUND(CASE WHEN x.Period = 3  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P4NSAmt = SUM(ROUND(CASE WHEN x.Period = 4  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P5NSAmt = SUM(ROUND(CASE WHEN x.Period = 5  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P6NSAmt = SUM(ROUND(CASE WHEN x.Period = 6  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P7NSAmt = SUM(ROUND(CASE WHEN x.Period = 7  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P8NSAmt = SUM(ROUND(CASE WHEN x.Period = 8  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P9NSAmt = SUM(ROUND(CASE WHEN x.Period = 9  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P10NSAmt = SUM(ROUND(CASE WHEN x.Period = 10 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P11NSAmt = SUM(ROUND(CASE WHEN x.Period = 11 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P12NSAmt = SUM(ROUND(CASE WHEN x.Period = 12 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TotalNSAmt = SUM(ROUND(CASE WHEN x.Period BETWEEN 1 AND 12 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0))
          INTO #temp_PhasingDetail
          FROM
              (
                  SELECT afc.BudgetYear, afc.Period, cp.ClaimTypeId,
                      cp.NSAmt, cp.VendorAmt, cp.CurrencyId, cp.ReceivedDate, 
                      Office = (CASE WHEN cp.OfficeId in (1) AND uc.TermOfPurchaseId<>1 THEN 'NMC' 
                                     WHEN cp.OfficeId in (2) AND uc.TermOfPurchaseId<>1 THEN 'SHV2' 
                                    ELSE  (SELECT OfficeCode FROM Office WHERE OfficeId=cp.OfficeId) END),
                      ReasonDesc = Upper( CASE WHEN r.ReasonDesc IS NOT NULL THEN r.ReasonDesc 
                                            ELSE (CASE cp.ClaimTypeId
                                                        WHEN 6 THEN 'Audit Fee' 
                                                        WHEN 7 THEN 'Fabric Test'
                                                        WHEN 8 THEN 'Penalty Charge' 
                                                        WHEN 12 THEN 'GB Test' 
                                                        WHEN 14 THEN 'Others' 
                                                        ELSE 'Others' END)  
                                            END) 
                  FROM
                      vw_UKClaimPhasingQAIS AS cp 
                      LEFT JOIN  nsldb..AccountFinancialCalender AS afc WITH (NOLOCK)ON cp.ReceivedDate BETWEEN afc.StartDate AND afc.EndDate
                      LEFT JOIN UKClaim AS uc ON uc.ClaimId = cp.ClaimId AND uc.Status = 1
                      LEFT JOIN Contract AS c ON c.ContractNo = uc.ContractNo
                      LEFT JOIN [NS-DB01].qcis.dbo.ClaimRequest AS cr ON cr.RequestId = uc.ClaimRequestId
                      LEFT JOIN [NS-DB01].qcis.dbo.ClaimReason AS r ON r.ReasonId=cr.FaultReasonId
                  WHERE
					afc.AppId = 9
					AND (@FiscalYear=-1 OR (afc.BudgetYear BETWEEN  @FiscalYear-1 AND @FiscalYear AND afc.Period BETWEEN @PeriodFrom AND @PeriodTo))
					AND (@VendorId = -1 OR cp.VendorId = @VendorId)
					AND (@OfficeId = -1 OR cp.OfficeId = @OfficeId)
					AND (cp.vendoramt > 0 or cp.nsamt > 0)	-- Pay amount only
              ) as x
              INNER JOIN ExchangeRate xr  WITH (NOLOCK) ON xr.ExchangeRateTypeId = 1  and x.ReceivedDate between xr.EffectiveDateFrom  and xr.EffectiveDateTo and  xr.CurrencyId = x.CurrencyId
              INNER JOIN ExchangeRate xru WITH (NOLOCK) ON xru.ExchangeRateTypeId = 1 and x.ReceivedDate between xru.EffectiveDateFrom and xru.EffectiveDateTo and xru.CurrencyId = 3
          GROUP BY
              x.BudgetYear, x.Office, x.ReasonDesc
          ORDER BY
            x.BudgetYear, x.Office, x.ReasonDesc
            
      SELECT t.* , OfficeTotalAmt = (SELECT SUM(TotalVendorAmt + TotalNSAmt) FROM #temp_PhasingDetail WHERE OFFICE=t.Office AND FiscalYear=t.FiscalYear)
          FROM #temp_PhasingDetail as t
     UNION ALL
	     SELECT FiscalYear, Office='ALL', ReasonDesc, 
		      SUM(P1VendorAmt), SUM(P2VendorAmt), SUM(P3VendorAmt), SUM(P4VendorAmt), SUM(P5VendorAmt), SUM(P6VendorAmt), 
          SUM(P7VendorAmt), SUM(P8VendorAmt), SUM(P9VendorAmt), SUM(P10VendorAmt), SUM(P11VendorAmt), SUM(P12VendorAmt), 
		      Sum(TotalVendorAmt),
		      SUM(P1NSAmt), SUM(P2NSAmt), SUM(P3NSAmt), SUM(P4NSAmt), SUM(P5NSAmt), SUM(P6NSAmt), 
          SUM(P7NSAmt), SUM(P8NSAmt), SUM(P9NSAmt), SUM(P10NSAmt), SUM(P11NSAmt), SUM(P12NSAmt), 
		      Sum(TotalNSAmt),
		      OfficeTotalAmt = (SELECT SUM(TotalVendorAmt + TotalNSAmt) FROM #temp_PhasingDetail WHERE FiscalYear=t.FiscalYear)
       FROM #temp_PhasingDetail as t
	        GROUP BY FiscalYear,ReasonDesc

          ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <selectCommand>
      <dataCommand name="GetUKClaimPhasingReportByOfficeClaimType" type="Text">
        <commandText>
          <![CDATA[
          SELECT FiscalYear = x.BudgetYear, x.Office, x.ReasonDesc, 
              P1VendorAmt = SUM(ROUND(CASE WHEN x.Period = 1  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P2VendorAmt = SUM(ROUND(CASE WHEN x.Period = 2  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P3VendorAmt = SUM(ROUND(CASE WHEN x.Period = 3  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P4VendorAmt = SUM(ROUND(CASE WHEN x.Period = 4  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P5VendorAmt = SUM(ROUND(CASE WHEN x.Period = 5  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P6VendorAmt = SUM(ROUND(CASE WHEN x.Period = 6  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P7VendorAmt = SUM(ROUND(CASE WHEN x.Period = 7  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P8VendorAmt = SUM(ROUND(CASE WHEN x.Period = 8  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P9VendorAmt = SUM(ROUND(CASE WHEN x.Period = 9  THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P10VendorAmt = SUM(ROUND(CASE WHEN x.Period = 10 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P11VendorAmt = SUM(ROUND(CASE WHEN x.Period = 11 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P12VendorAmt = SUM(ROUND(CASE WHEN x.Period = 12 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TotalVendorAmt = SUM(ROUND(CASE WHEN x.Period BETWEEN 1 AND 12 THEN x.VendorAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P1NSAmt = SUM(ROUND(CASE WHEN x.Period = 1  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P2NSAmt = SUM(ROUND(CASE WHEN x.Period = 2  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P3NSAmt = SUM(ROUND(CASE WHEN x.Period = 3  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P4NSAmt = SUM(ROUND(CASE WHEN x.Period = 4  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P5NSAmt = SUM(ROUND(CASE WHEN x.Period = 5  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P6NSAmt = SUM(ROUND(CASE WHEN x.Period = 6  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P7NSAmt = SUM(ROUND(CASE WHEN x.Period = 7  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P8NSAmt = SUM(ROUND(CASE WHEN x.Period = 8  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P9NSAmt = SUM(ROUND(CASE WHEN x.Period = 9  THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P10NSAmt = SUM(ROUND(CASE WHEN x.Period = 10 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P11NSAmt = SUM(ROUND(CASE WHEN x.Period = 11 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              P12NSAmt = SUM(ROUND(CASE WHEN x.Period = 12 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0)),
              TotalNSAmt = SUM(ROUND(CASE WHEN x.Period BETWEEN 1 AND 12 THEN x.NSAmt * xr.ExchangeRate / xru.ExchangeRate ELSE 0 END, 0))
          INTO #temp_PhasingDetail
          FROM
              (
                  SELECT afc.BudgetYear, afc.Period, cp.ClaimTypeId,
                      cp.NSAmt, cp.VendorAmt, cp.CurrencyId, cp.ReceivedDate, 
                      Office = (CASE WHEN cp.OfficeId in (1) AND uc.TermOfPurchaseId<>1 THEN 'NMC' 
                                     WHEN cp.OfficeId in (2) AND uc.TermOfPurchaseId<>1 THEN 'SHV2' 
                                     ELSE  (SELECT OfficeCode FROM Office WHERE OfficeId=cp.OfficeId) END),
                      --CASE WHEN uc.ProductTeamId = 0 AND uc.ClaimTypeId IN (6) THEN 'AUD' WHEN uc.ClaimTypeId IN (7,8, 14) THEN 'DN' ELSE dbo.fn_getT5Code(uc.UKDebitNoteNo) END AS ReasonDesc
					  ReasonDesc = (CASE WHEN uc.ProductTeamId = 0 THEN 'AUD' 
									ELSE CASE uc.ClaimTypeId 
											WHEN 7 THEN 'DN'
											WHEN 8 THEN 'DN'
											WHEN 5 THEN 'SAFETY ISSUE' 
											WHEN 10 THEN 'QCC' 
											WHEN 11 THEN 'CHB' 
                      WHEN 13 THEN 'FIRA' 
                      WHEN 14 THEN 'DN' 
											ELSE dbo.fn_getT5Code(uc.UKDebitNoteNo) END
									END)	
                      FROM
                      vw_UKClaimPhasingQAIS AS cp 
                      LEFT JOIN  nsldb..AccountFinancialCalender AS afc WITH (NOLOCK)ON cp.ReceivedDate BETWEEN afc.StartDate AND afc.EndDate
                      LEFT JOIN UKClaim AS uc ON uc.ClaimId = cp.ClaimId AND uc.Status = 1
                      LEFT JOIN Contract AS c ON c.ContractNo = uc.ContractNo
                      LEFT JOIN [NS-DB01].qcis.dbo.ClaimRequest AS cr ON cr.RequestId = uc.ClaimRequestId
                  WHERE
					afc.AppId = 9
					AND (@FiscalYear=-1 OR (afc.BudgetYear BETWEEN  @FiscalYear-1 AND @FiscalYear AND afc.Period BETWEEN @PeriodFrom AND @PeriodTo))
					AND (@VendorId = -1 OR cp.VendorId = @VendorId)
					AND (@OfficeId = -1 OR cp.OfficeId = @OfficeId)
					AND (cp.vendoramt > 0 or cp.nsamt > 0)	-- Pay amount only
              ) as x
              INNER JOIN ExchangeRate xr  WITH (NOLOCK) ON xr.ExchangeRateTypeId = 1  and x.ReceivedDate between xr.EffectiveDateFrom  and xr.EffectiveDateTo and xr.CurrencyId = x.CurrencyId
              INNER JOIN ExchangeRate xru WITH (NOLOCK) ON xru.ExchangeRateTypeId = 1 and x.ReceivedDate between xru.EffectiveDateFrom and xru.EffectiveDateTo and xru.CurrencyId = 3
          GROUP BY
              x.BudgetYear, x.Office, x.ReasonDesc
          ORDER BY
            x.BudgetYear, x.Office, x.ReasonDesc
            
      SELECT t.* , OfficeTotalAmt = (SELECT SUM(TotalVendorAmt + TotalNSAmt) FROM #temp_PhasingDetail WHERE OFFICE=t.Office AND FiscalYear=t.FiscalYear)
          FROM #temp_PhasingDetail as t
     UNION ALL
	     SELECT FiscalYear, Office='ALL', ReasonDesc, 
		      SUM(P1VendorAmt), SUM(P2VendorAmt), SUM(P3VendorAmt), SUM(P4VendorAmt), SUM(P5VendorAmt), SUM(P6VendorAmt), 
          SUM(P7VendorAmt), SUM(P8VendorAmt), SUM(P9VendorAmt), SUM(P10VendorAmt), SUM(P11VendorAmt), SUM(P12VendorAmt), 
		      Sum(TotalVendorAmt),
		      SUM(P1NSAmt), SUM(P2NSAmt), SUM(P3NSAmt), SUM(P4NSAmt), SUM(P5NSAmt), SUM(P6NSAmt), 
          SUM(P7NSAmt), SUM(P8NSAmt), SUM(P9NSAmt), SUM(P10NSAmt), SUM(P11NSAmt), SUM(P12NSAmt), 
		      Sum(TotalNSAmt),
		      OfficeTotalAmt = (SELECT SUM(TotalVendorAmt + TotalNSAmt) FROM #temp_PhasingDetail WHERE FiscalYear=t.FiscalYear)
       FROM #temp_PhasingDetail as t
	        GROUP BY FiscalYear,ReasonDesc

          ]]>
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimPhasing" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimMFRNQtyAnalysisReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimMFRNQtyAnalysisReport" type="Text">
        <commandText>

          SELECT a.OfficeCode, ac.BudgetYear, ac.Period,
          COUNT(CASE WHEN b.Qty = 1 THEN 1 ELSE NULL END ) AS N1,
          COUNT(CASE WHEN b.Qty = 2 THEN 1 ELSE NULL END ) AS N2,
          COUNT(CASE WHEN b.Qty = 3 THEN 1 ELSE NULL END ) AS N3,
          COUNT(CASE WHEN b.Qty = 4 THEN 1 ELSE NULL END ) AS N4,
          COUNT(CASE WHEN b.Qty = 5 THEN 1 ELSE NULL END ) AS N5,
          COUNT(CASE WHEN b.Qty = 6 THEN 1 ELSE NULL END ) AS N6,
          COUNT(CASE WHEN b.Qty = 7 THEN 1 ELSE NULL END ) AS N7,
          COUNT(CASE WHEN b.Qty = 8 THEN 1 ELSE NULL END ) AS N8,
          COUNT(CASE WHEN b.Qty = 9 THEN 1 ELSE NULL END ) AS N9,
          COUNT(CASE WHEN b.Qty = 10 THEN 1 ELSE NULL END ) AS N10,
          COUNT(CASE WHEN b.Qty = 11 THEN 1 ELSE NULL END ) AS N11,
          COUNT(CASE WHEN b.Qty = 12 THEN 1 ELSE NULL END ) AS N12,
          COUNT(CASE WHEN b.Qty = 13 THEN 1 ELSE NULL END ) AS N13,
          COUNT(CASE WHEN b.Qty = 14 THEN 1 ELSE NULL END ) AS N14,
          COUNT(CASE WHEN b.Qty = 15 THEN 1 ELSE NULL END ) AS N15,
          COUNT(CASE WHEN b.Qty = 16 THEN 1 ELSE NULL END ) AS N16,
          COUNT(CASE WHEN b.Qty = 17 THEN 1 ELSE NULL END ) AS N17,
          COUNT(CASE WHEN b.Qty = 18 THEN 1 ELSE NULL END ) AS N18,
          COUNT(CASE WHEN b.Qty = 19 THEN 1 ELSE NULL END ) AS N19,
          COUNT(CASE WHEN b.Qty = 20 THEN 1 ELSE NULL END ) AS N20,
          COUNT(CASE WHEN b.Qty = 21 THEN 1 ELSE NULL END ) AS N21,
          COUNT(CASE WHEN b.Qty = 22 THEN 1 ELSE NULL END ) AS N22,
          COUNT(CASE WHEN b.Qty = 23 THEN 1 ELSE NULL END ) AS N23,
          COUNT(CASE WHEN b.Qty = 24 THEN 1 ELSE NULL END ) AS N24,
          COUNT(CASE WHEN b.Qty = 25 THEN 1 ELSE NULL END ) AS N25,
          COUNT(CASE WHEN b.Qty BETWEEN 26 AND 30 THEN 1 ELSE NULL END ) AS N26,
          COUNT(CASE WHEN b.Qty BETWEEN 31 AND 35 THEN 1 ELSE NULL END ) AS N31,
          COUNT(CASE WHEN b.Qty BETWEEN 36 AND 40 THEN 1 ELSE NULL END ) AS N36,
          COUNT(CASE WHEN b.Qty BETWEEN 41 AND 45 THEN 1 ELSE NULL END ) AS N41,
          COUNT(CASE WHEN b.Qty BETWEEN 46 AND 50 THEN 1 ELSE NULL END ) AS N46,
          COUNT(CASE WHEN b.Qty > 51 THEN 1 ELSE NULL END ) AS N51,
          COUNT(b.ClaimId) AS NALL,
          COUNT(CASE WHEN b.Qty BETWEEN 1 AND 25 THEN 1 ELSE NULL END ) AS NF
          FROM NSLDB..Office a LEFT JOIN NSLDB..AccountFinancialCalender ac ON ac.AppId = 9 AND ac.BudgetYear = @FiscalYear AND ac.Period BETWEEN @PeriodFrom AND @PeriodTo
          LEFT JOIN
          (SELECT y.*, z.BudgetYear, z.Period FROM UKClaim y INNER JOIN NSLDB..AccountFinancialCalender z ON z.AppId = 9 AND y.UKDebitNoteReceivedDate BETWEEN z.StartDate AND z.EndDate AND y.Status =1 AND y.HasUKDN = 1 AND y.ClaimTypeId = 3 AND NOT EXISTS(SELECT * FROM UKClaimRefund WHERE Status = 1 AND ClaimId = y.ClaimId)) b
          ON a.OfficeId = b.OfficeId AND b.Period = ac.Period AND b.BudgetYear = ac.BudgetYear
          WHERE a.OfficeId in (1,2,3,4,7,8,9,13,14,16,19,18,17)
          GROUP BY a.OfficeCode, ac.BudgetYear, ac.Period
          ORDER BY 2,3,1
        </commandText>
        <parameters>
          <param key="FiscalYear" name="@FiscalYear" type="Int" direction="Input" />
          <param key="PeriodFrom" name="@PeriodFrom" type="Int" direction="Input" />
          <param key="PeriodTo" name="@PeriodTo" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimMFRNQtyAnalysisReport" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="UKClaimRefundApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimRefundByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimRefund WITH (NOLOCK)
          WHERE ClaimRefundId = @ClaimRefundId
        </commandText>
        <parameters>
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxClaimRefundId" type="Text">
        <commandText>
          SELECT MAX(ClaimRefundId) FROM UKClaimRefund
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimRefundListByClaimId" type="Text">
        <commandText>
          SELECT *
          FROM UKClaimRefund WITH (NOLOCK)
          WHERE ClaimId = @ClaimId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimRefundListByCriteria" type="Text">
        <commandText>
          SELECT b.*
          FROM UKClaim a WITH (NOLOCK)
          INNER JOIN UKClaimRefund b ON a.ClaimId = b.ClaimId AND a.Status = 1 AND b.Status = 1
          WHERE (a.UKDebitNoteNo = @UKDebitNoteNo OR @UKDebitNoteNo = '')
          AND (a.ItemNo = @ItemNo OR @ItemNo = '')
          AND (a.ContractNo = @ContractNo OR @ContractNo = '')
          AND (a.DebitNoteNo = @DebitNoteNo OR @DebitNoteNo = '')
          AND (a.VendorId = @VendorId OR @VendorId = -1)
          AND (a.OfficeId = @OfficeId OR @OfficeId = -1)
          AND (a.HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND (a.WorkflowStatusId @WorkflowStatusList)
          AND (a.ClaimTypeId = @ClaimTypeId OR @ClaimTypeId = -1)
          AND (a.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          AND ISNULL(a.UKDebitNoteDate, '1900-01-01') BETWEEN @FromDate AND @ToDate
          AND ISNULL(b.ReceivedDate, '1900-01-01') BETWEEN @FromReceivedDate AND @ToReceivedDate
        </commandText>
        <parameters>
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />
          <param key="DebitNoteNo" name="@DebitNoteNo" type="varchar" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
          <param key="FromReceivedDate" name="@FromReceivedDate" type="DateTime" direction="Input" />
          <param key="ToReceivedDate" name="@ToReceivedDate" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
          <param key="WorkflowStatusList" name="@WorkflowStatusList" type="ArrayInt" direction="Input" />
          <param key="ClaimTypeId" name="@ClaimTypeId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUKClaimRefundCOOApprovalList" type="Text">
        <commandText>
          SELECT r.*
          FROM UKClaim a INNER JOIN UKClaimRefund r ON a.ClaimId = r.ClaimId AND a.Status = 1 AND r.Status = 1 AND a.VendorId = @VendorId AND a.OfficeId @OfficeIds
          LEFT JOIN [NS-DB01].QCIS.dbo.ClaimRequest b ON a.ClaimRequestId = b.RequestId AND b.Status = 1 AND b.NSRechargePercent > 0
          WHERE ((b.NSRechargePercent > 0 AND a.WorkflowStatusId IN (3)) OR (r.SettlementOptionId = 1 AND a.WorkflowStatusId IN (1, 3, 5)))
          AND r.PnlAccountCode IS NULL
        </commandText>
        <parameters>
          <param key="OfficeIds" name="@OfficeIds" type="ArrayInt" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimRefund" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimDCNoteApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUKClaimDCNoteList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteId,
          'N/A' AS DCNoteNo, GETDATE() AS DCNoteDate, a.OfficeId, a.CurrencyId, SUM(a.RechargeableAmt) AS SettledAmt, SUM(a.Amount) AS TotalAmt,
          CASE WHEN SUM(a.RechargeableAmt) >= 0 THEN 'D' ELSE 'C' END AS DebitCreditIndicator, a.VendorId,
          b.Name AS PartyName, b.addr1 AS PartyAddress1, b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4 , CONVERT(varchar, NULL) AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNote
          FROM UKClaimRecharge a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.Amount >= 0 AND a.ClaimRefundId = 0
          INNER JOIN UKClaim c ON a.ClaimId = c.ClaimId AND (c.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1) AND c.ClaimTypeId <> 9
          WHERE a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_FullUKClaimRefund)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)
          GROUP BY a.OfficeId, a.CurrencyId, a.VendorId, b.Name, b.addr1, b.addr2, b.addr3, b.addr4

          SELECT IDENTITY(int, -10001, -1) AS DCNoteId,
          CONVERT(varchar, c.ClaimId) AS DCNoteNo, GETDATE() AS DCNoteDate, a.OfficeId, a.CurrencyId, a.RechargeableAmt AS SettledAmt, a.Amount AS TotalAmt,
          CASE WHEN a.RechargeableAmt >= 0 THEN 'D' ELSE 'C' END AS DebitCreditIndicator, a.VendorId,
          b.Name AS PartyName, b.addr1 AS PartyAddress1, b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4 , CONVERT(varchar, NULL) AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNoteBIA
          FROM UKClaimRecharge a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.Amount >= 0 AND a.ClaimRefundId = 0
          INNER JOIN UKClaim c ON a.ClaimId = c.ClaimId AND (c.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1) AND c.ClaimTypeId = 9
          WHERE a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_FullUKClaimRefund)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)

          SELECT IDENTITY(int, -1000, -1) AS DCNoteId,
          CONVERT(varchar, a.ClaimRefundId) AS DCNoteNo, GETDATE() AS DCNoteDate, a.OfficeId, a.CurrencyId, a.RechargeableAmt AS SettledAmt, a.Amount AS TotalAmt,
          CASE WHEN a.RechargeableAmt < 0 THEN 'C' ELSE 'D' END AS DebitCreditIndicator, a.VendorId,
          b.Name AS PartyName, b.addr1 AS PartyAddress1, b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4 , CONVERT(varchar, NULL) AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNoteRefund
          FROM UKClaimRecharge a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.Amount <= 0 AND a.ClaimRefundId > 0
          INNER JOIN UKClaim c ON a.ClaimId = c.ClaimId AND (c.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          WHERE a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_FullUKClaimRefund)
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)
          
          SELECT * FROM #UKClaimDCNote 
          UNION ALL
          SELECT * FROM #UKClaimDCNoteBIA 
          UNION ALL
          SELECT * FROM #UKClaimDCNoteRefund 

          UNION ALL
          SELECT DCNoteId, 'N/A' AS DCNoteNo, GETDATE() AS DCNoteDate, OfficeId, CurrencyId, SettledAmt, TotalAmt,
          DebitCreditIndicator, VendorId, PartyName, PartyAddress1, PartyAddress2, PartyAddress3, PartyAddress4 , Remark, IsCustom, IsInterfaced, MailStatus, SettlementDate, Status,
          CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, IsVoid, RevisedCurrencyId
          FROM UKClaimDCNote WHERE DCNoteNo IS NULL
          AND OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          ORDER BY 4, 5, 10

          DROP TABLE #UKClaimDCNote
          DROP TABLE #UKClaimDCNoteBIA
          DROP TABLE #UKClaimDCNoteRefund
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUKClaimDCNoteMailList" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM UKClaimDCNote WHERE Status = 1 AND MailStatus = @MailStatus AND DCNoteNo IS NOT NULL AND SettledAmt <> 0 AND IsInterfaced = 1
          --AND DCNoteId IN (477,478,470,471,472,473,474,475,476) 
          ]]>
        </commandText>
        <parameters>
          <param key="MailStatus" name="@MailStatus" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingFullRefundUKClaimDCNoteList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteId,
          CONVERT(varchar, a.ClaimId) AS DCNoteNo, GETDATE() AS DCNoteDate, MAX(a.OfficeId) AS OfficeId, MAX(a.CurrencyId) AS CurrencyId, SUM(a.RechargeableAmt) AS SettledAmt, SUM(a.Amount) AS TotalAmt,
          CASE WHEN SUM(a.RechargeableAmt) >= 0 THEN 'D' ELSE 'C' END AS DebitCreditIndicator, MAX(a.VendorId) AS VendorId,
          MAX(b.Name) AS PartyName, MAX(b.addr1) AS PartyAddress1, MAX(b.addr2) AS PartyAddress2, MAX(b.addr3) AS PartyAddress3, MAX(b.addr4) AS PartyAddress4 , NULL AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNote
          FROM UKClaimRecharge a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId 
          INNER JOIN UKClaim c ON a.ClaimId = c.ClaimId AND (c.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          WHERE a.OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeGroupId)
          AND a.ClaimId IN (SELECT ClaimId FROM vw_FullUKClaimRefund)
          GROUP BY a.ClaimId

          SELECT * FROM #UKClaimDCNote
          ORDER BY 4,5

          DROP TABLE #UKClaimDCNote
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeGroupId" name="@OfficeGroupId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingFullRefundUKClaimDCNoteByClaimId" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteId,
          CONVERT(varchar, a.ClaimId) AS DCNoteNo, GETDATE() AS DCNoteDate, a.OfficeId AS OfficeId, a.CurrencyId AS CurrencyId, 0 AS SettledAmt, a.Amount AS TotalAmt,
          'D' AS DebitCreditIndicator, a.VendorId AS VendorId,
          b.Name AS PartyName, b.addr1 AS PartyAddress1, b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4 , NULL AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNoteByClaimId
          FROM UKClaim a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.ClaimId = @ClaimId

          SELECT * FROM #UKClaimDCNoteByClaimId
          ORDER BY 4,5

          DROP TABLE #UKClaimDCNoteByClaimId
          ]]>
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetFullRefundUKClaimDCNoteList" type="Text">
        <commandText>
          <![CDATA[
          /*
          SELECT IDENTITY(int, -1, -1) AS DCNoteId,
          CONVERT(varchar, a.ClaimId) AS DCNoteNo, GETDATE() AS DCNoteDate, a.OfficeId AS OfficeId, a.CurrencyId AS CurrencyId, 
          0 AS SettledAmt, a.Amount AS TotalAmt, 'D' AS DebitCreditIndicator, a.VendorId AS VendorId,
          b.Name AS PartyName, b.addr1 AS PartyAddress1, b.addr2 AS PartyAddress2, b.addr3 AS PartyAddress3, b.addr4 AS PartyAddress4 , NULL AS Remark, 0 AS IsCustom, 1 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNote
          FROM UKClaim a 
          INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.WorkflowStatusId NOT IN (9, 5)
          WHERE a.ClaimId IN (SELECT ClaimId FROM vw_FullUKClaimRefund_OSRpt)
          AND a.ClaimId = 2
          */
          
          SELECT IDENTITY(int, -1, -1) AS DCNoteId,
          CONVERT(varchar, a.ClaimId) AS DCNoteNo, GETDATE() AS DCNoteDate, MAX(a.OfficeId) AS OfficeId, MAX(a.CurrencyId) AS CurrencyId, SUM(a.RechargeableAmt) AS SettledAmt, SUM(a.Amount) AS TotalAmt,
          CASE WHEN SUM(a.RechargeableAmt) >= 0 THEN 'D' ELSE 'C' END AS DebitCreditIndicator, MAX(a.VendorId) AS VendorId,
          MAX(b.Name) AS PartyName, MAX(b.addr1) AS PartyAddress1, MAX(b.addr2) AS PartyAddress2, MAX(b.addr3) AS PartyAddress3, MAX(b.addr4) AS PartyAddress4 , NULL AS Remark, 0 AS IsCustom, 0 AS IsInterfaced, 0 AS MailStatus, NULL AS SettlementDate, 1 AS Status,
          @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn, 0 AS IsVoid, NULL AS RevisedCurrencyId
          INTO #UKClaimDCNote
          FROM UKClaimRecharge a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId 
          INNER JOIN UKClaim c ON a.ClaimId = c.ClaimId 
          AND a.ClaimId IN (SELECT ClaimId FROM vw_FullUKClaimRefund_OSRpt)
          GROUP BY a.ClaimId
          
          SELECT * FROM #UKClaimDCNote
          ORDER BY 4,5
          
          DROP TABLE #UKClaimDCNote
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetMaxDCNoteId" type="Text">
        <commandText>
          SELECT MAX(DCNoteId) FROM UKClaimDCNote
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimDCNoteByKey" type="Text">
        <commandText>
          SELECT * FROM UKClaimDCNote WHERE DCNoteId = @DCNoteId
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimDCNoteByDCNoteNo" type="Text">
        <commandText>
          SELECT * FROM UKClaimDCNote WHERE DCNoteNo = @DCNoteNo
        </commandText>
        <parameters>
          <param key="DCNoteNo" name="@DCNoteNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimDCNote" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimDCNoteDetailApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUKClaimDCNoteDetailList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteDetailId, ClaimId, ClaimRefundId, CurrencyId, Amount AS Amount, RechargeableAmt, NULL AS DCNoteId, NULL AS LineRemark, 1 AS Status, @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn
          INTO #UKClaimDCNoteDetail
          FROM UKClaimRecharge a
          WHERE a.OfficeId = @OfficeId AND a.VendorId = @VendorId AND a.CurrencyId = @CurrencyId
          AND @DebitCreditIndicator = @DebitCreditIndicator
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)
          AND ((@DebitCreditIndicator = 'D' AND a.Amount >= 0 AND a.ClaimRefundId = 0)
          OR (@DebitCreditIndicator = 'C' AND a.Amount <= 0 AND a.ClaimRefundId > 0))
          AND a.RechargeableAmt <> 0
          SELECT * FROM #UKClaimDCNoteDetail
          DROP TABLE #UKClaimDCNoteDetail
          ]]>
        </commandText>
        <parameters>
          <param key="DebitCreditIndicator" name="@DebitCreditIndicator" type="varchar" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="CurrencyId" name="@CurrencyId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOutstandingFullRefundUKClaimDCNoteDetailList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteDetailId, ClaimId, ClaimRefundId, CurrencyId, Amount AS Amount, RechargeableAmt, NULL AS DCNoteId, NULL AS LineRemark, 1 AS Status, @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn
          INTO #UKClaimDCNoteDetail
          FROM UKClaimRecharge a
          WHERE a.ClaimId = @ClaimId
          SELECT * FROM #UKClaimDCNoteDetail
          DROP TABLE #UKClaimDCNoteDetail
          ]]>
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOutstandingFullRefundUKClaimDCNoteDetailListByClaimId" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteDetailId, ClaimId, 0 AS ClaimRefundId, CurrencyId, Amount AS Amount, 0 AS RechargeableAmt, NULL AS DCNoteId, NULL AS LineRemark, 1 AS Status, @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn
          INTO #UKClaimDCNoteDetailByClaimId
          FROM UKClaim
          WHERE ClaimId = @ClaimId
          SELECT * FROM #UKClaimDCNoteDetailByClaimId
          DROP TABLE #UKClaimDCNoteDetailByClaimId
          ]]>
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOutstandingRefundUKClaimDCNoteDetailList" type="Text">
        <commandText>
          <![CDATA[
          SELECT IDENTITY(int, -1, -1) AS DCNoteDetailId, ClaimId, ClaimRefundId, CurrencyId, Amount AS Amount, RechargeableAmt, NULL AS DCNoteId, NULL AS LineRemark, 1 AS Status, @UserId AS CreatedBy, GETDATE() AS CreatedOn, NULL AS ModifiedBy, NULL AS ModifiedOn
          INTO #UKClaimDCNoteDetail
          FROM UKClaimRecharge a
          WHERE a.ClaimRefundId = @ClaimRefundId
          AND a.ClaimId NOT IN (SELECT ClaimId FROM vw_CancelledFullUKClaimRefund)
          
          SELECT * FROM #UKClaimDCNoteDetail
          DROP TABLE #UKClaimDCNoteDetail
          ]]>
        </commandText>
        <parameters>
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimDCNoteDetailListByDCNoteId" type="Text">
        <commandText>
          SELECT * FROM UKClaimDCNoteDetail WHERE DCNoteId = @DCNoteId AND Status = 1
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimDCNoteDetailByLogicalKey" type="Text">
        <commandText>
          SELECT * FROM UKClaimDCNoteDetail WHERE Status = 1
          AND ClaimId = @ClaimId AND ClaimRefundId = @ClaimRefundId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDCNoteDetailId" type="Text">
        <commandText>
          SELECT MAX(DCNoteDetailId) FROM UKClaimDCNoteDetail
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimDCNoteDetailByKey" type="Text">
        <commandText>
          SELECT * FROM UKClaimDCNoteDetail WHERE DCNoteDetailId = @DCNoteDetailId
        </commandText>
        <parameters>
          <param key="DCNoteDetailId" name="@DCNoteDetailId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimDCNoteDetail" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimDCNoteReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimDCNoteReport" type="Text">
        <commandText>
          <![CDATA[
          /*
          SELECT a.DCNoteId, b.ClaimId, b.ClaimRefundId, CONVERT(varchar(50), f.ClaimTypeId) AS ClaimType, a.DebitCreditIndicator,
          a.DCNoteNo, a.DCNoteDate, e.CurrencyCode AS Currency, a.CurrencyId, a.OfficeId, b.Amount, b.RechargeableAmt, a.SettledAmt, a.TotalAmt, 
          CASE WHEN f.ClaimTypeId = 9 THEN h.FormNo ELSE f.UKDebitNoteNo END AS UKDebitNoteNo, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Name ELSE ISNULL(a.PartyName,'') END AS PartyName, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr1 ELSE a.PartyAddress1 END AS PartyAddress1, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr2 ELSE a.PartyAddress2 END AS PartyAddress2, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr3 ELSE a.PartyAddress3 END AS PartyAddress3, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr4 ELSE a.PartyAddress4 END AS PartyAddress4, 
          a.Remark, a.IsCustom, f.TermOfPurchaseId
          FROM UKClaimDCNote a INNER JOIN UKClaimDCNoteDetail b on a.DCNoteId = b.DCNoteId AND NOT (b.ClaimId = 0 AND b.ClaimRefundId = 0)
          INNER JOIN NSLDB..Currency e ON b.CurrencyId = e.CurrencyId
          INNER JOIN UKClaim f ON b.ClaimId = f.Claimid
          LEFT JOIN NSLIndustry..Vendor g ON g.VendorId = f.SZVendorId
          LEFT JOIN [NS-DB01].QCIS.dbo.ClaimRequest h ON f.DebitNoteNo IS NOT NULL AND CONVERT(int, f.DebitNoteNo) = h.RequestId
          WHERE a.DCNoteId = @DCNoteId
          */
          SELECT a.DCNoteId, b.ClaimId, b.ClaimRefundId, CONVERT(varchar(50), f.ClaimTypeId) AS ClaimType, a.DebitCreditIndicator,
          ISNULL(a.DCNoteNo, '') AS DCNoteNo, a.DCNoteDate, e.CurrencyCode AS Currency, a.CurrencyId, a.OfficeId, b.Amount, b.RechargeableAmt, a.SettledAmt, a.TotalAmt, 
          f.UKDebitNoteNo, CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Name ELSE a.PartyName END AS PartyName, 
          /*
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr1 ELSE a.PartyAddress1 END AS PartyAddress1, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr2 ELSE a.PartyAddress2 END AS PartyAddress2, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr3 ELSE a.PartyAddress3 END AS PartyAddress3, 
          CASE WHEN a.OfficeId = 1 AND f.TermOfPurchaseId <> 1 THEN g.Addr4 ELSE a.PartyAddress4 END AS PartyAddress4, 
          */
          a.PartyAddress1,
          a.PartyAddress2,
          a.PartyAddress3,
          a.PartyAddress4,
          a.Remark, a.IsCustom, f.TermOfPurchaseId, b.LineRemark, f.HasUKDN
          FROM UKClaimDCNote a INNER JOIN UKClaimDCNoteDetail b on a.DCNoteId = b.DCNoteId AND NOT (b.ClaimId = 0 AND b.ClaimRefundId = 0)
          INNER JOIN NSLDB..Currency e ON b.CurrencyId = e.CurrencyId
          INNER JOIN UKClaim f ON b.ClaimId = f.Claimid
          LEFT JOIN NSLIndustry..Vendor g ON g.VendorId = ISNULL(f.SZVendorId, f.VendorId)
          WHERE a.DCNoteId = @DCNoteId
          ]]>
        </commandText>
        <parameters>
          <param key="DCNoteId" name="@DCNoteId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKClaimRefundDCNote" type="Text">
        <commandText>
          SELECT ClaimId, 0 AS ClaimRefundId, DebitNoteNo AS DCNoteNo, DebitNoteDate AS DCNoteDate,
          'D' AS DebitCreditIndicator, UKDebitNoteNo, 'N/A' AS ClaimType,
          c.Name As PartyName, c.Addr1 AS PartyAddress1, c.Addr2 AS PartyAddress2, c.Addr3 AND PartyAddress3, c.Addr4 AS PartyAddress4,
          a.Amount, e.CurrencyCode AS Currency
          FROM UKClaim a INNER JOIN NSLDB..Currency b ON a.CurrencyId = b.CurrencyId
          INNER JOIN NSLINDUSTRY..Vendor c ON a.VendorId = c.VendorId
          INNER JOIN ClaimRefund d ON a.ClaimId = d.ClaimId AND d.ClaimRefundId = @ClaimRefundId
          INNER JOIN NSLDB..Currency e ON a.CurrencyId = e.CurrencyId
        </commandText>
        <parameters>
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimDCNoteReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimAuditLogReportApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKClaimAuditLogReport" type="Text">
        <commandText>
          <![CDATA[
          SELECT a.ClaimId, c.FormNo, d.TypeDesc AS ClaimType, a.ItemNo, a.UKDebitNoteDate, c.IssueDate, b.Name, c.FaultQty, c.Amount,
          ROUND(c.Amount * j.ExchangeRate / k.ExchangeRate,2) AS USDAmount,
          e.LogText, f.WorkflowStatusDesc AS FromWorkflowStatus, g.WorkflowStatusDesc AS ToWorkflowStatus,
          h.DisplayName AS UserName, e.LogDate, i.LastLogDate AS LatestLogDate, i.FirstLogDate AS FirstLogDate
          FROM UKClaim a INNER JOIN NSLIndustry..Vendor b ON a.VendorId = b.VendorId AND a.Status = 1
          INNER JOIN [NS-DB01].QCIS.dbo.ClaimRequest c ON a.ClaimRequestId = c.RequestId
          INNER JOIN [NS-DB01].QCIS.dbo.ClaimType d ON a.ClaimTypeId = d.TypeId
          INNER JOIN [NS-DB01].QCIS.dbo.ClaimRequestlog e ON c.RequestId = e.ClaimRequestId
          INNER JOIN [NS-DB01].QCIS.dbo.ClaimWorkflowStatus f ON ISNULL(e.FromStatusId,1) = f.WorkflowStatusId
          INNER JOIN [NS-DB01].QCIS.dbo.ClaimWorkflowStatus g ON e.ToStatusId = g.WorkflowStatusId
          INNER JOIN NSLDB..UserInfo h ON h.UserId = e.UserId
          INNER JOIN [NS-DB01].QCIS.dbo.vwLastClaimLogDate i ON c.RequestId = i.ClaimRequestId
          LEFT JOIN ExchangeRate j ON j.CurrencyId = 2 AND j.ExchangeRateTypeId = 1 AND c.IssueDate BETWEEN j.EffectiveDateFrom AND j.EffectiveDateTo
          LEFT JOIN ExchangeRate k ON k.CurrencyId = 3 AND k.ExchangeRateTypeId = 1 AND c.IssueDate BETWEEN k.EffectiveDateFrom AND k.EffectiveDateTo
          WHERE (@UKDNDateFrom IS NULL OR a.UKDebitNoteDate >= @UKDNDateFrom)
          AND (@UKDNDateTo IS NULL OR a.UKDebitNoteDate <= @UKDNDateTo)
          AND (@VendorId = -1 OR a.VendorId = @VendorId)
          AND (@ProductTeamId = -1 OR a.ProductTeamId = @ProductTeamId)
          AND (@ClaimTypeId = -1 OR a.ClaimTypeId = @ClaimTypeId)
          AND (a.OfficeId @OfficeIdList)
          ORDER BY b.Name, a.ClaimId, e.LogDate DESC
          ]]>
        </commandText>
        <parameters>
          <param key="UKDNDateFrom" name="@UKDNDateFrom" type="datetime" direction="Input"/>
          <param key="UKDNDateTo" name="@UKDNDateTo" type="datetime" direction="Input"/>
          <param key="VendorId" name="@VendorId" type="int" direction="Input"/>
          <param key="ProductTeamId" name="@ProductTeamId" type="int" direction="Input"/>
          <param key="ClaimTypeId" name="@ClaimTypeId" type="int" direction="Input"/>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input"/>
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimAuditLogReport" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimRechargeApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUKClaimRechargeList" type="Text">
        <commandText>
          DELETE UKClaimRecharge WHERE OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId)
          SELECT * FROM vw_OSUKClaimRecharge WHERE OfficeId IN (SELECT OfficeId FROM ReportOfficeGroupMapping WHERE OfficeGroupId = @OfficeId)
          --AND ClaimId IN (35458,37047)
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetOutstandingUKClaimRechargeNRList" type="Text">
        <commandText>
          DELETE UKClaimRecharge
          SELECT * FROM vw_OSUKClaimRecharge_NR
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKClaimRechargeByKey" type="Text">
        <commandText>
          SELECT * FROM UKClaimRecharge
          WHERE ClaimId = @ClaimId AND ClaimRefundId = @ClaimRefundId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKClaimRecharge" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKClaimItemApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetSupplierProductByItem" type="Text">
        <commandText>
          SELECT Distinct
          p.ItemNo, c.OfficeId, c.ProductTeamId, s.VendorId
          --,VendorName = (SELECT Name FROM nslIndustry..Vendor WHERE vendorId = s.VendorId)
          FROM Shipment s
          INNER JOIN Contract c ON c.ContractId = s.ContractId
          INNER JOIN Product p ON p.ProductId = c.ProductId
          WHERE s.Status = 1
          -- AND s.WorkflowStatusId NOT IN (5,9) -- Not a rejected nor cancelled shipment
          AND (p.ItemNo = @ItemNo)
          --ORDER BY VendorName
        </commandText>
        <parameters>
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
        </parameters>
      </dataCommand >
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="SuppplierProduct" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKDiscountClaimApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetOutstandingUKDiscountClaimList" type="Text">
        <commandText>
          SELECT uk.*, s.IsUKDiscount
          FROM UKDiscountClaim uk WITH (NOLOCK)
          INNER JOIN Contract c ON uk.ContractNo = c.ContractNo AND uk.Status = 1
          INNER JOIN (SELECT MIN(IsUKDiscount) AS IsUKDiscount, ContractId FROM Shipment WHERE Status = 1 AND WorkflowStatusId NOT IN (3,5,9) GROUP BY ContractId) s ON c.ContractId = s.ContractId
          WHERE uk.WorkflowStatusId = 0 AND s.IsUKDiscount = 1
        </commandText>
      </dataCommand>

      <dataCommand name="GetOutstandingUKDiscountClaimReport" type="Text">
        <commandText>
          <![CDATA[
          SELECT * FROM 
          (
          SELECT ClaimId, ItemNo, ContractNo, OfficeId, HandlingOfficeId, VendorId, ProductTeamId, TermOfPurchaseId, Qty, CurrencyId, Amount, HasUKDN, UKDebitNoteNo, 
                  UKDebitNoteDate, UKDebitNoteReceivedDate, Remark, IsInterfaced, WorkflowStatusId, PaymentOfficeId, Status, CreatedOn, CreatedBy, ModifiedOn, ModifiedBy
          FROM UKDiscountClaim
          WHERE (OfficeId = @OfficeId OR @OfficeId = -1)
          AND (VendorId = @VendorId OR @VendorId = -1)
          AND (TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          AND (HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND (UKDebitNoteNo IS NOT NULL AND UKDebitNoteDate <= @CutOffDate)
          AND IsInterfaced <> 2
          
          UNION ALL
          
          SELECT a.ClaimRefundId * -1 AS ClaimId, b.ItemNo, b.ContractNo, b.OfficeId, b.HandlingOfficeId, b.VendorId, b.ProductTeamId, b.TermOfPurchaseId, b.Qty, b.CurrencyId, a.Amount * -1 AS Amount, b.HasUKDN, b.UKDebitNoteNo, 
                  b.UKDebitNoteDate, a.ReceivedDate AS UKDebitNoteReceivedDate, a.Remark, a.IsInterfaced, a.WorkflowStatusId, b.PaymentOfficeId, a.Status, a.CreatedOn, a.CreatedBy, a.ModifiedOn, a.ModifiedBy
          FROM UKDiscountClaimRefund a INNER JOIN UKDiscountClaim b ON a.ClaimId = b.ClaimId
          WHERE (b.OfficeId = @OfficeId OR @OfficeId = -1)
          AND (b.VendorId = @VendorId OR @VendorId = -1)
          AND (b.TermOfPurchaseId = @TermOfPurchaseId OR @TermOfPurchaseId = -1)
          AND (b.HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND (b.UKDebitNoteNo IS NOT NULL AND UKDebitNoteDate <= @CutOffDate)
          AND a.IsInterfaced <> 2
          ) AS x ORDER BY 4
          ]]>
        </commandText>
        <parameters>
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="TermOfPurchaseId" name="@TermOfPurchaseId" type="Int" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
          <param key="CutOffDate" name="@CutOffDate" type="DateTime" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetUKDiscountClaimByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaim WITH (NOLOCK)
          WHERE ClaimId = @ClaimId
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDiscountClaimId" type="Text">
        <commandText>
          SELECT MAX(ClaimId) FROM UKDiscountClaim
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKDiscountClaimListByCriteria" type="Text">
        <commandText>
          SELECT uk.*, s.IsUKDiscount
          FROM UKDiscountClaim uk WITH (NOLOCK)
          INNER JOIN Contract c ON uk.ContractNo = c.ContractNo
          INNER JOIN (SELECT MIN(IsUKDiscount) AS IsUKDiscount, ContractId FROM Shipment WHERE Status = 1 AND WorkflowStatusId NOT IN (3,5,9) GROUP BY ContractId) s ON c.ContractId = s.ContractId
          WHERE (uk.UKDebitNoteNo = @UKDebitNoteNo OR @UKDebitNoteNo = '')
          AND (uk.ItemNo = @ItemNo OR @ItemNo = '')
          AND (uk.ContractNo = @ContractNo OR @ContractNo = '')
          AND (uk.VendorId = @VendorId OR @VendorId = -1)
          AND (uk.OfficeId = @OfficeId OR @OfficeId = -1)
          AND (uk.HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND ISNULL(uk.UKDebitNoteDate, '1900-01-01') BETWEEN @FromDate AND @ToDate
          AND ISNULL(uk.UKDebitNoteReceivedDate, '1900-01-01') BETWEEN @FromReceivedDate AND @ToReceivedDate
          AND uk.Status = 1
          AND (@NextDNNo = -1 OR (uk.UKDebitNoteNo IS NOT NULL AND @NextDNNo = 1))
          AND (@AppliedUKDiscount = -1 OR s.IsUKDiscount = @AppliedUKDiscount)
        </commandText>
        <parameters>
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />
          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
          <param key="FromReceivedDate" name="@FromReceivedDate" type="DateTime" direction="Input" />
          <param key="ToReceivedDate" name="@ToReceivedDate" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
          <param key="NextDNNo" name="@NextDNNo" type="Int" direction="Input" />
          <param key="AppliedUKDiscount" name="@AppliedUKDiscount" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKDiscountClaim" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKDiscountClaimRefundApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKDiscountClaimRefundByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaimRefund WITH (NOLOCK)
          WHERE ClaimRefundId = @ClaimRefundId
        </commandText>
        <parameters>
          <param key="ClaimRefundId" name="@ClaimRefundId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDiscountClaimRefundId" type="Text">
        <commandText>
          SELECT MAX(ClaimRefundId) FROM UKDiscountClaimRefund
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKDiscountClaimRefundListByClaimId" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaimRefund WITH (NOLOCK)
          WHERE ClaimId = @ClaimId AND Status = 1
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUKDiscountClaimRefundListByCriteria" type="Text">
        <commandText>
          SELECT b.*
          FROM UKDiscountClaim a WITH (NOLOCK)
          INNER JOIN UKDiscountClaimRefund b ON a.ClaimId = b.ClaimId AND a.Status = 1 AND b.Status = 1
          WHERE (a.UKDebitNoteNo = @UKDebitNoteNo OR @UKDebitNoteNo = '')
          AND (a.ItemNo = @ItemNo OR @ItemNo = '')
          AND (a.ContractNo = @ContractNo OR @ContractNo = '')

          AND (a.VendorId = @VendorId OR @VendorId = -1)
          AND (a.OfficeId = @OfficeId OR @OfficeId = -1)
          AND (a.HandlingOfficeId = @HandlingOfficeId OR @HandlingOfficeId = -1)
          AND ISNULL(a.UKDebitNoteDate, '1900-01-01') BETWEEN @FromDate AND @ToDate
          AND ISNULL(b.ReceivedDate, '1900-01-01') BETWEEN @FromReceivedDate AND @ToReceivedDate
        </commandText>
        <parameters>
          <param key="UKDebitNoteNo" name="@UKDebitNoteNo" type="varchar" direction="Input" />

          <param key="ItemNo" name="@ItemNo" type="varchar" direction="Input" />
          <param key="ContractNo" name="@ContractNo" type="varchar" direction="Input" />
          <param key="FromDate" name="@FromDate" type="DateTime" direction="Input" />
          <param key="ToDate" name="@ToDate" type="DateTime" direction="Input" />
          <param key="FromReceivedDate" name="@FromReceivedDate" type="DateTime" direction="Input" />
          <param key="ToReceivedDate" name="@ToReceivedDate" type="DateTime" direction="Input" />
          <param key="VendorId" name="@VendorId" type="Int" direction="Input" />
          <param key="OfficeId" name="@OfficeId" type="Int" direction="Input" />
          <param key="HandlingOfficeId" name="@HandlingOfficeId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKDiscountClaimRefund" />
    </tableMappings>
  </dataSetAdapter>

  <dataSetAdapter name="UKDiscountClaimLogApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetUKDiscountClaimLogByKey" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaimLog WITH (NOLOCK)
          WHERE LogId = @LogId
        </commandText>
        <parameters>
          <param key="LogId" name="@LogId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetMaxDiscountClaimLogId" type="Text">
        <commandText>
          SELECT MAX(LogId) FROM UKDiscountClaimLog
        </commandText>
      </dataCommand>
      <dataCommand name="GetUKDiscountClaimLogListByClaimId" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaimLog WITH (NOLOCK)
          WHERE ClaimId = @ClaimId ORDER BY LogDate DESC
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>
      <dataCommand name="GetRefundSupportingUploadLog" type="Text">
        <commandText>
          SELECT *
          FROM UKDiscountClaimLog WITH (NOLOCK)
          WHERE ClaimId = @ClaimId AND LogText LIKE 'Add Attachment _Next Claim Refund Supporting Doc_%'
        </commandText>
        <parameters>
          <param key="ClaimId" name="@ClaimId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="UKDiscountClaimLog" />
    </tableMappings>
  </dataSetAdapter>

</dataOperations>
