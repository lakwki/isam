<?xml version="1.0" encoding="utf-8" ?>
<dataOperations dataSource="isam">

  <dataSetAdapter name="AlertNotificationSupportApt" populateCommands="false">
    <selectCommand>

      <dataCommand name="GetProductDepartmentByUserId_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
              SELECT 
                  OfficeStructureId = MAX(pd.OfficeStructureId),
                  OfficeStructureTypeId = 60,
                  Code = pd.Code,
                  Description = pd.Description,
                  ParentId = -1,
                  OfficeRegionId = -1,
                  OfficeDivisionId = -1,
                  OfficeId = -1,
                  StructureLevel = -1,
                  IsNodeDefault = -1,
                  SeqNo = -1,
                  Status = 1,
                  CreatedOn = getdate(),
                  CreatedBy = @UserId,
                  ModifiedOn = null,
                  ModifiedBy = null
              --INTO #temp_ProductDepartment
              FROM
	              (   
                  SELECT
		                      uo.OfficeStructureId,
                          dp.Code, 
                          Description = LEFT(description, CHARINDEX('(',description)-1)
                      FROM NSLDB..userSeasonOfficeStructure AS uo
                      INNER JOIN NSLDB..OfficeStructure AS dp ON dp.OfficeStructureId = uo.OfficeStructureId
                      WHERE
                          uo.Status = 1
                          AND uo.officeStructureTypeId = 60
                          AND (@UserId=-1 OR userId=@UserId)
 	              ) AS pd
		          GROUP BY Code, Description
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetProductDepartmentIdByUserId" type="Text">
        <commandText>
          <![CDATA[
              SELECT 
                  OfficeStructureId = pd.OfficeStructureId,
                  OfficeStructureTypeId = 60,
                  Code = pd.Code,
                  Description = pd.Description,
                  ParentId = -1,
                  OfficeRegionId = -1,
                  OfficeDivisionId = -1,
                  OfficeId = -1,
                  StructureLevel = -1,
                  IsNodeDefault = -1,
                  SeqNo = -1,
                  Status = 1,
                  CreatedOn = '1900-1-1',
                  CreatedBy = @UserId,
                  ModifiedOn = null,
                  ModifiedBy = null
              FROM
	              (   
                  SELECT DISTINCT
  	                    dp.OfficeStructureId,
                        dp.Code, 
                        Description = (CASE WHEN CHARINDEX('(', dp.description)>0 THEN LEFT(dp.description, CHARINDEX('(',dp.description)-1) ELSE dp.description END)
                    FROM 
                        ( 
                          SELECT  DeptId = (CASE WHEN uo.OfficeStructureTypeId=60 THEN uo.OfficeStructureId ELSE pt.ParentId END) 
                              FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
	                                LEFT JOIN nsldb..OfficeStructure as pt WITH (NOLOCK) ON pt.OfficeStructureId = uo.OfficeStructureId
                              WHERE uo.Status = 1 AND uo.UserId = @UserId AND uo.OfficeStructureTypeId in (50,60)
                          UNION
                              SELECT DeptId = pt.ParentId
                                  FROM NSLDB..OfficeStructure AS pt WITH (NOLOCK)
                                  WHERE OfficeStructureTypeId = 50  AND pt.Status = 1 AND @UserId = -1
                        ) AS x
	                      INNER JOIN nsldb..OfficeStructure as dp WITH (NOLOCK) ON dp.OfficeStructureId = x.DeptId
                    WHERE dp.OfficeStructureTypeId = 60
 	              ) AS pd
		          ORDER BY Code, Description
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="OfficeStructure" />
    </tableMappings>

  </dataSetAdapter>


  <dataSetAdapter name="AlertNotificationApt" populateCommands="false">
    <selectCommand>
      <dataCommand name="GetInvoiceUploadFailList" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @CutoffDate AS DateTime
			SET @CutoffDate = '2019-1-1' -- convert(date,getdate()-180)

          
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                ii.InvoiceNo, ii.InvoiceDate,
                InvoiceUploadUserId = NULL,
                ILSInvoiceStatus = ii.Status,
                ActualAtWarehouseDate = CONVERT(datetime, NULL),
                TermOfPurchaseId = NULL,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ApprovalDate = NULL,
                Remark = NULL,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
          FROM
              ILSInvoice AS ii with (nolock) 
              INNER JOIN ILSOrderRef AS io with (nolock) ON io.OrderRefId = ii.OrderRefId
              LEFT JOIN Shipment AS s with (nolock) ON s.ShipmentId = io.ShipmentId AND s.Status = 1
              LEFT JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1

          WHERE 
              (ii.Status IS NOT NULL AND ii.Status <> 1)
			  AND ii.InvoiceDate >= @CutoffDate
--              AND s.WorkflowStatusId NOT IN (5, 8, 9)
              --AND s.CustomerAtWarehouseDate >= @CutoffDate
				      --AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
              AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.ProductTeamId) AND Status=1))
	            AND (c.OfficeId @OfficeIdList)
	            AND (c.DeptId @DepartmentIdList) 
          AND s.ShipmentID NOT IN (929364,947476)
          ORDER BY c.OfficeId, ii.InvoiceDate, ii.InvoiceNo

          ]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetInvoiceUploadFailCount" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @CutoffDate AS DateTime
			SET @CutoffDate = '2019-1-1' -- convert(date,getdate()-180)


          SELECT RecordCount = count(s.ShipmentId)
          FROM
              ILSInvoice AS ii with (nolock) 
              INNER JOIN ILSOrderRef AS io with (nolock) ON io.OrderRefId = ii.OrderRefId
              LEFT JOIN Shipment AS s with (nolock) ON s.ShipmentId = io.ShipmentId AND s.Status = 1
              LEFT JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1
          WHERE 
              (ii.Status IS NOT NULL AND ii.Status <> 1)
			  AND ii.InvoiceDate >= @CutoffDate
--              AND s.WorkflowStatusId NOT IN (5, 8, 9)
              --AND s.CustomerAtWarehouseDate >= @CutoffDate
			        --AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
              AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.ProductTeamId) AND Status=1))
	            AND (c.OfficeId @OfficeIdList)
	            AND (c.DeptId @DepartmentIdList) 
              AND s.ShipmentID NOT IN (929364,947476)
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetVendorMissingAdvisingBankList" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

          SELECT Top 100
              z.ShipmentId, c.ContractId, c.ContractNo, s.DeliveryNo,
              z.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
              CustomerAtWarehouseDate, SupplierAtWarehouseDate,
              InvoiceNo = NULL, 
              InvoiceDate = NULL,
              InvoiceUploadUserId = NULL,
              ILSInvoiceStatus = NULL,
              ActualAtWarehouseDate = NULL,
              TermOfPurchaseId = NULL,
              TotalShippedAmt, TotalShippedSupplierGmtAmt, 
              ApprovalDate = NULL,
              Remark = NULL,
              NULL AS ShippingDocReceiptDate,
              NULL AS SupplierInvoiceNo,
              0 AS IsUploadDMSDocument,
              NULL AS ShippingDocCheckedOn
          FROM 
              (
                SELECT vs.VendorId, ShipmentId=min(vs.shipmentId)
                FROM 
                    (
                      SELECT 
                          VendorId = (CASE WHEN ss.ShipmentId IS NOT NULL THEN ss.VendorId ELSE s.VendorId END),
                          s.ShipmentId,
                          s.ContractId,
                          --ProductTeamId = (SELECT ProductTeamId FROM Contract WITH (NOLOCK) WHERE ContractId=s.ContractId),
                          LCNo = (CASE WHEN ss.ShipmentId IS NULL THEN isnull(i.LCNo,'') ELSE isnull(ss.LCNo,'') END)
                      FROM Shipment AS s WITH (NOLOCK)
                          INNER JOIN Invoice as i WITH (NOLOCK) ON i.ShipmentId=s.ShipmentId
                          --LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId
                          LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)
                      WHERE --(ss.ShipmentId IS NULL OR ss.IsVirtualSetSplit=0)
                          s.Status = 1
                          AND s.WorkflowStatusId not in (5,9)
	                        AND s.CustomerAtWarehouseDate>=@CutoffDate
	                        AND NOT EXISTS (SELECT VendorId FROM VendorBankMapping AS vm WITH (NOLOCK) 
                                              INNER JOIN BankBranch AS bb WITH (NOLOCK) ON bb.BankBranchid=vm.BankBranchid 
                                              WHERE vm.vendorid=isnull(ss.VendorId,s.VendorId) and vm.Status=1 and bb.status=1)
	                        AND EXISTS (SELECT * FROM PaymentTerm WITH (NOLOCK) WHERE PaymentTermId=isnull(ss.PaymentTermId, s.PaymentTermId) AND status=1 AND LCPaymentTermRequestFlag=1 )	
                    ) AS vs
 			              INNER JOIN Contract as c WITH (NOLOCK) ON c.ContractId = vs.ContractId
     		        WHERE 
                    LCNo = ''
						AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))		 
 		                AND (c.OfficeId @OfficeIdList)
 		                AND (c.DeptId @DepartmentIdList) 
                GROUP BY vs.VendorId
              ) AS z 
              INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = z.ShipmentId
              INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId
	        ORDER BY 
              SupplierAtWarehouseDate, ContractNo, DeliveryNo
              ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetVendorMissingAdvisingBankCount_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

          SELECT RecordCount = COUNT(VendorId)
            FROM 
            (SELECT DISTINCT vendorId
                    --vs.VendorId, ShipmentId=min(vs.shipmentId)
               FROM 
                    (
                      SELECT --TOP 12000
                          VendorId = ISNULL(ss.VendorId, s.VendorId),
	                        s.ShipmentId,
	                        s.ContractId
                          --,LCNo = (CASE WHEN ss.ShipmentId IS NULL THEN isnull(i.LCNo,'') ELSE isnull(ss.LCNo,'') END)
                      FROM Shipment AS s WITH (NOLOCK)
                          INNER JOIN Invoice as i WITH (NOLOCK) ON i.ShipmentId=s.ShipmentId
                          LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)
                      WHERE 
                          s.Status = 1
                          AND s.WorkflowStatusId not in (5,9)
                          AND isnull(ss.PaymentTermId, s.PaymentTermId) = 2
	                        --AND EXISTS (SELECT * FROM PaymentTerm WITH (NOLOCK) WHERE PaymentTermId=isnull(ss.PaymentTermId, s.PaymentTermId) AND status=1 AND LCPaymentTermRequestFlag=1)	
	                        AND s.CustomerAtWarehouseDate>=@CutoffDate
	                        AND NOT EXISTS (SELECT VendorId FROM VendorBankMapping AS vm WITH (NOLOCK) 
                                              --INNER JOIN BankBranch AS bb WITH (NOLOCK) ON bb.BankBranchid=vm.BankBranchid and bb.status=1
                                              WHERE vm.vendorid=isnull(ss.VendorId,s.VendorId) and vm.Status=1 )
                          AND (CASE WHEN ss.ShipmentId IS NULL THEN isnull(i.LCNo,'') ELSE isnull(ss.LCNo,'') END)=''                    
                    ) AS vs
 			              INNER JOIN Contract as c WITH (NOLOCK) ON c.ContractId = vs.ContractId
 		          WHERE 
                  --LCNo = '' AND
 	                   (@UserId=-1 or EXISTS(SELECT * 
 	                                             FROM  NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
 					                                     WHERE uo.Status=1 
 						                                       AND UserId=@UserId
 						                                       AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId)
 				                                   )
 				             )
 		                AND (c.OfficeId @OfficeIdList)
 		                AND (c.DeptId @DepartmentIdList) 
           ) AS z       
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetVendorMissingAdvisingBankCount_Fast_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

            SELECT DISTINCT vendorId
               FROM 
                    (
                      SELECT 
                          VendorId = ISNULL(ss.VendorId, s.VendorId),
	                        s.ContractId
                      FROM Shipment AS s WITH (NOLOCK)
                          INNER JOIN Invoice as i WITH (NOLOCK) ON i.ShipmentId=s.ShipmentId
                          LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)
                      WHERE 
                          s.Status = 1
                          AND s.WorkflowStatusId not in (5,9)
                          AND isnull(ss.PaymentTermId, s.PaymentTermId) = 2
	                        AND s.CustomerAtWarehouseDate>=@CutoffDate
	                        AND NOT EXISTS (SELECT VendorId FROM VendorBankMapping AS vm WITH (NOLOCK) 
                                              WHERE vm.vendorid=isnull(ss.VendorId,s.VendorId) and vm.Status=1 )
                          AND (CASE WHEN ss.ShipmentId IS NULL THEN isnull(i.LCNo,'') ELSE isnull(ss.LCNo,'') END)=''                    
                    ) AS vs
 			              INNER JOIN Contract as c WITH (NOLOCK) ON c.ContractId = vs.ContractId
 		          WHERE 
 	                   (@UserId=-1 or EXISTS(SELECT * 
 	                                             FROM  NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
 					                                     WHERE uo.Status=1 
 						                                       AND UserId=@UserId
 						                                       AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId)
 				                                   )
 				             )
 		                AND (c.OfficeId @OfficeIdList)
 		                AND (c.DeptId @DepartmentIdList) 
          ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetOutstandingBookingList" type="Text">
        <commandText>
          <![CDATA[
          --DECLARE @CutoffDate AS DateTime
          --SET @CutoffDate = convert(Varchar,getdate(),23)
          --SET @CutoffDate = @CutoffDate-180

          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
                InvoiceDate = i.InvoiceDate,
                InvoiceUploadUserId = i.InvoiceUploadUserId,
                ILSInvoiceStatus = NULL,
                ActualAtWarehouseDate = NULL,
                TermOfPurchaseId = NULL,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ApprovalDate = NULL,
                Remark = NULL,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
          FROM
              Shipment AS s with (nolock) 
              INNER JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1
           	  INNER JOIN Invoice AS i with (nolock) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
              LEFT JOIN ILSOrderRef as io with (nolock) ON io.ShipmentId = s.ShipmentId
          WHERE s.Status = 1
              	AND (s.IsMockShopSample = 0 AND s.IsPressSample = 0)
              	AND s.WorkflowStatusId IN ( 6, 7)
	              AND c.CustomerId IN ( 1, 2, 5, 6 )
                --AND s.CustomerAtWarehouseDate >= @CutoffDate
                --AND (s.CustomerAtWarehouseDate - GETDATE()) <= 7
              	AND (s.CustomerAtWarehouseDate >= Convert(varchar(10),GetDate()-30,23)
      	              AND s.CustomerAtWarehouseDate < Convert(varchar(10),GETDATE()+1,23))
	              AND ( ISNULL( i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) IS NULL
		                  AND (i.BookingAtWarehouseDate IS NULL AND i.BookingSONo IS NULL) )
                AND EXISTS (SELECT OrderRefId FROM ILSOrderCopy WHERE OrderRefId = io.OrderRefId)
               	--AND NOT EXISTS (SELECT OrderRefId FROM ILSOrderCopy WHERE OrderRefId = io.OrderRefId)
 	              --AND NOT EXISTS (SELECT OrderRefId FROM ILSPackingList WHERE OrderRefId = io.OrderRefId) 
					AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))		 
 		            AND (c.OfficeId @OfficeIdList)
 		            AND (c.DeptId @DepartmentIdList) 
                
          ORDER BY 
              s.CustomerAtWarehouseDate, c.ContractNo, s.DeliveryNo
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingBookingCount" type="Text">
        <commandText>
          <![CDATA[
          --DECLARE @CutoffDate AS DateTime
          --SET @CutoffDate = convert(Varchar,getdate(),23)
          --SET @CutoffDate = @CutoffDate-180

          SELECT RecordCount = count(s.ShipmentId)
          FROM
              Shipment AS s with (nolock) 
              INNER JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1
           	  INNER JOIN Invoice AS i with (nolock) ON i.ShipmentId = s.ShipmentId AND i.Status = 1
              LEFT JOIN ILSOrderRef as io with (nolock) ON io.ShipmentId = s.ShipmentId
              --  INNER JOIN NSLDB..OfficeStructure AS pt WITH (NOLOCK) on pt.OfficeStructureId=c.ProductTeamId
		          --  LEFT JOIN NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK) on uo.OfficeStructureId=pt.OfficeStructureId or uo.OfficeStructureId=pt.ParentId
		          --  INNER JOIN NSLDB..OfficeStructure AS dp WITH (NOLOCK) ON dp.OfficeStructureId=pt.ParentId and uo.Status=1
			        --        AND (@UserId=-1 or uo.UserId=@UserId)
			        --        AND (@DepartmentCode='' or dp.Code=@DepartmentCode)
			        --        AND (pt.OfficeId @OfficeIdList)	
              
          WHERE s.Status = 1
              	AND (s.IsMockShopSample = 0 AND s.IsPressSample = 0)
              	AND s.WorkflowStatusId IN ( 6, 7)
	              AND c.CustomerId IN ( 1, 2, 5, 6 )
                --AND s.CustomerAtWarehouseDate >= @CutoffDate
                --AND (s.CustomerAtWarehouseDate - GETDATE()) <= 7
              	AND (s.CustomerAtWarehouseDate >= Convert(varchar(10),GetDate()-30,23)
      	              AND s.CustomerAtWarehouseDate < Convert(varchar(10),GETDATE()+1,23))
	              AND ( ISNULL( i.ActualAtWarehouseDate, i.ILSActualAtWarehouseDate) IS NULL
		                  AND (i.BookingAtWarehouseDate IS NULL AND i.BookingSONo IS NULL) )
                AND EXISTS (SELECT OrderRefId FROM ILSOrderCopy WHERE OrderRefId = io.OrderRefId)
               	-- AND NOT EXISTS (SELECT OrderRefId FROM ILSOrderCopy WHERE OrderRefId = io.OrderRefId)
 	              -- AND NOT EXISTS (SELECT OrderRefId FROM ILSPackingList WHERE OrderRefId = io.OrderRefId) 
					AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))		 
 		            AND (c.OfficeId @OfficeIdList)
 		            AND (c.DeptId @DepartmentIdList) 
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingDocumentList" type="Text">
        <commandText>
          <![CDATA[
          --DECLARE @CutoffDate AS DateTime
          --SET @CutoffDate = convert(Varchar,getdate(),23)
          --SET @CutoffDate = @CutoffDate-180
 
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
                InvoiceDate = i.InvoiceDate,
                InvoiceUploadUserId = i.InvoiceUploadUserId,
                ILSInvoiceStatus = NULL,
                ActualAtWarehouseDate = i.ActualAtWarehouseDate,
                TermOfPurchaseId = NULL,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ApprovalDate = NULL,
                Remark = NULL,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
          FROM
                Contract AS c with (nolock) 
                INNER JOIN shipment AS s with (nolock) ON s.contractid=c.contractid AND s.status=1
						AND c.IsNextMfgOrder <> 1
						--AND not (c.CustomerId=8 or (c.CustomerId in (1,2) and (select UTurnOrder from CustomerDestination where CustomerDestinationId=s.CustomerDestinationId )=1 ))
						AND not (c.CustomerId=8 or (c.CustomerId in (1,2) and s.TermOfPurchaseId = 5 ))
						AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
 						AND (c.OfficeId @OfficeIdList)
 						AND (c.DeptId @DepartmentIdList) 
						AND s.WorkflowStatusId IN (8) 
                INNER JOIN invoice AS i  with (nolock) ON i.shipmentid=s.shipmentid AND i.status=1
              			AND i.APDate IS NULL
						AND i.AccountDocReceiptDate IS NULL and i.ShippingDocReceiptDate <= convert(varchar,getdate()-4,23)
                INNER JOIN CustomerDestination AS cd with (nolock) ON cd.CustomerDestinationId = s.CustomerDestinationId AND cd.Status = 1
                                --AND isnull(cd.UTurnOrder,0) <> 1
								AND s.TermOfPurchaseId <> 5
            WHERE s.Status = 1 
                --AND s.CustomerAtWarehouseDate >= @CutoffDate
            ORDER BY 
              c.OfficeId, s.CustomerAtWarehouseDate, c.ContractNo, s.DeliveryNo
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingDocumentCount" type="Text">
        <commandText>
          <![CDATA[
          --DECLARE @CutoffDate AS DateTime
          --SET @CutoffDate = convert(Varchar,getdate(),23)
          --SET @CutoffDate = @CutoffDate-180
          DECLARE @LastReceiptDate AS DateTime
          SET @LastReceiptDate = convert(varchar,getdate()-4,23)

          SELECT 
	              RecordCount = count(*)
            FROM
                Shipment AS s with (nolock)
            		INNER JOIN Contract AS c with (nolock) ON c.contractid=s.contractid 
							AND c.CustomerId<>8 and c.IsNextMfgOrder <> 1
							AND (c.OfficeId @OfficeIdList)
							AND (c.DeptId @DepartmentIdList) 
							AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
							AND s.WorkflowStatusId IN (8) 
              				--AND s.CustomerDestinationId not in (4,5)
 		            INNER JOIN Invoice AS i with (nolock) ON i.shipmentid=s.shipmentid 
	                    AND i.ShippingDocReceiptDate <= @LastReceiptDate 
 			                AND i.APDate IS NULL AND i.AccountDocReceiptDate IS NULL
					INNER JOIN CustomerDestination AS cd with (nolock) ON cd.CustomerDestinationId = s.CustomerDestinationId AND cd.Status = 1 
						--AND isnull(cd.UTurnOrder,0) <> 1 
						AND s.TermOfPurchaseId <> 5	
            WHERE s.Status = 1 
                --AND s.CustomerAtWarehouseDate >= @CutoffDate

        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingDocumentOffshoreList" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
                InvoiceDate = i.InvoiceDate,
                InvoiceUploadUserId = i.InvoiceUploadUserId,
                ILSInvoiceStatus = NULL,
                ActualAtWarehouseDate = i.ActualAtWarehouseDate,
                TermOfPurchaseId = NULL,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ApprovalDate = NULL,
                Remark = NULL,
                i.ShippingDocReceiptDate AS ShippingDocReceiptDate,
                i.SupplierInvoiceNo AS SupplierInvoiceNo,
                i.IsUploadDMSDocument AS IsUploadDMSDocument,
                i.ShippingDocCheckedOn AS ShippingDocCheckedOn
          FROM
                Contract AS c with (nolock) 
                INNER JOIN shipment AS s with (nolock) ON s.contractid=c.contractid AND s.status=1 AND c.OfficeId IN (3,8,13)
   				      AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))			 
 		            AND (c.OfficeId @OfficeIdList)
 		            AND (c.DeptId @DepartmentIdList) 
                AND s.Status = 1 
                INNER JOIN invoice AS i  with (nolock) ON i.shipmentid=s.shipmentid AND i.status=1 AND i.InvoiceYear >= 2011
            WHERE i.APDate IS NULL
            AND (i.SupplierInvoiceNo IS NULL OR i.ShippingDocReceiptDate IS NULL OR i.IsUploadDMSDocument = 0)
			      AND s.ShipmentId not in (SELECT ShipmentId FROM OutstandingDocumentOffshoreFilter) 
            ORDER BY c.OfficeId, s.CustomerAtWarehouseDate, c.ContractNo, s.DeliveryNo
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingDocumentOffshoreCount" type="Text">
        <commandText>
          <![CDATA[
          SELECT 
	              RecordCount = count(*)
            FROM
                Shipment AS s with (nolock)
            		INNER JOIN Contract AS c with (nolock) ON c.contractid=s.contractid AND c.OfficeId IN (3,8,13)
   				      AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
	              AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
                AND s.Status = 1 
 		            INNER JOIN Invoice AS i with (nolock) ON i.shipmentid=s.shipmentid AND i.InvoiceYear >= 2011
              	AND i.APDate IS NULL
                AND (i.SupplierInvoiceNo IS NULL OR i.ShippingDocReceiptDate IS NULL OR i.IsUploadDMSDocument = 0)
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingResubmitDocumentList" type="Text">
        <commandText>
          <![CDATA[
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                InvoiceNo = dbo.fn_formatInvoiceNo(i.InvoicePrefix, i.InvoiceSeq, i.InvoiceYear),
                InvoiceDate = i.InvoiceDate,
                InvoiceUploadUserId = i.InvoiceUploadUserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ILSInvoiceStatus = NULL,
                ActualAtWarehouseDate = NULL,
                TermOfPurchaseId = NULL,
                ApprovalDate = NULL,
                Remark = convert(varchar,isnull(s.RejectPaymentReasonId,0)) + '|' + isnull(i.SupplierInvoiceNo,''), 
            		SortingSeq = (select OfficeCode From OFfice Where OfficeId=c.OfficeId) + '|'
                              + (select Name From NSLINDUSTRY..Vendor where vendorId=s.VendorId),
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
          FROM
                Contract AS c with (nolock) 
                INNER JOIN shipment AS s with (nolock) ON s.contractid=c.contractid AND s.status=1
                INNER JOIN invoice AS i  with (nolock) ON i.shipmentid=s.shipmentid AND i.status=1
            WHERE s.Status = 1 
                AND s.DMSWorkflowStatusId = 3   -- Rejected By Accounts
				AND (s.WorkflowStatusId not in (9) and s.TotalShippedAmt<>0)
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
 		            AND (c.OfficeId @OfficeIdList)
 		            AND (c.DeptId @DepartmentIdList) 
            ORDER BY 
              SortingSeq, InvoiceNo
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetOutstandingResubmitDocumentCount" type="Text">
        <commandText>
          <![CDATA[
          SELECT 
	              RecordCount = count(*)
            FROM
                Shipment AS s with (nolock)
            		INNER JOIN Contract AS c with (nolock) ON c.contractid=s.contractid 
 		            --INNER JOIN Invoice AS i with (nolock) ON i.shipmentid=s.shipmentid 
            WHERE s.Status = 1 
                AND s.DMSWorkflowStatusId = 3   -- Rejected By Accounts
				AND (s.WorkflowStatusId not in (9) and s.TotalShippedAmt<>0)
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
	              AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
                    
        ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetUTOrderOutstandingToInvoiceListList" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @CutoffDate AS DateTime
			SET @CutoffDate = '2019-1-1' -- convert(date,getdate()-180)

          
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
                InvoiceNo = NULL,
		            InvoiceDate = CONVERT(DateTime, NULL),
                InvoiceUploadUserId = CONVERT(int, NULL),
		            ILSInvoiceStatus = CONVERT(int, NULL),
                ActualAtWarehouseDate = ISNULL(i.ILSActualAtWarehouseDate, i.ActualAtWarehouseDate),
                TermOfPurchaseId = NULL,
                s.TotalShippedAmt, s.TotalShippedSupplierGmtAmt, 
                ApprovalDate = NULL,
                Remark = NULL,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
          FROM
                Shipment AS s with (nolock)
                INNER JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1
           	    INNER JOIN Invoice AS i with (nolock) ON s.ShipmentId = i.ShipmentId AND i.Status = 1
                --INNER JOIN CustomerDestination AS cd with (nolock) ON cd.CustomerDestinationId = s.CustomerDestinationId AND cd.UTurnOrder = 1 AND cd.Status = 1
				INNER JOIN CustomerDestination AS cd with (nolock) ON cd.CustomerDestinationId = s.CustomerDestinationId AND s.TermOfPurchaseId = 5 AND cd.Status = 1
          WHERE s.Status = 1
                AND s.CustomerAtWarehouseDate >= @CutoffDate
                AND s.WorkflowStatusId NOT IN (5, 8, 9)
          		  AND (i.ILSActualAtWarehouseDate IS NOT NULL OR i.ActualAtWarehouseDate IS NOT NULL)
                
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
 		            AND (c.OfficeId @OfficeIdList)
 		            AND (c.DeptId @DepartmentIdList) 
          ORDER BY 
                c.OfficeId, ActualAtWarehouseDate DESC, c.ContractNo, s.DeliveryNo
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetUTOrderOutstandingToInvoiceListCount" type="Text">
        <commandText>
          <![CDATA[
			DECLARE @CutoffDate AS DateTime
			SET @CutoffDate = '2019-1-1' -- convert(date,getdate()-180)


          SELECT RecordCount = count(s.ShipmentId)
          FROM
                Shipment AS s with (nolock)
                INNER JOIN Contract AS c with (nolock) ON s.ContractId = c.ContractId AND c.Status = 1
           	    INNER JOIN Invoice AS i with (nolock) ON s.ShipmentId = i.ShipmentId --AND i.Status = 1
                --INNER JOIN CustomerDestination AS cd with (nolock) ON cd.CustomerDestinationId = s.CustomerDestinationId AND cd.UTurnOrder = 1 AND cd.Status = 1
          WHERE s.Status = 1
                AND s.CustomerAtWarehouseDate >= @CutoffDate
                --AND s.CustomerDestinationId in (4,5,28)  -- UT order
				AND s.TermOfPurchaseId = 5		-- UT order
                AND s.WorkflowStatusId NOT IN (5, 8, 9)
                AND (i.ILSActualAtWarehouseDate IS NOT NULL OR i.ActualAtWarehouseDate IS NOT NULL)
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
	              AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetMissingSunAccountCodeSupplierList_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
            DECLARE @CutoffDate AS DateTime
            SET @CutoffDate = convert(Varchar,getdate(),23)
            SET @CutoffDate = @CutoffDate-180
          
            SELECT	DISTINCT
            		ShipmentId = -1, ContractId=-1, ContractNo='', DeliveryNo=-1,
		            x.VendorId, c.OfficeId,
		            ProductId = -1, WorkflowStatusId=-1, MerchandiserId = -1,
		            CustomerAtWarehouseDate=NULL, SupplierAtWarehouseDate=NULL,
                InvoiceNo = NULL,
		            InvoiceDate = CONVERT(DateTime, NULL),
                InvoiceUploadUserId = CONVERT(int, NULL),
		            ILSInvoiceStatus = CONVERT(int, NULL),
              	ActualAtWarehouseDate = CONVERT(datetime, null),
                TermOfPurchaseId = x.TermOfPurchaseId,
                TotalShippedAmt = NULL, TotalShippedSupplierGmtAmt=NULL, 
                ApprovalDate = NULL,
                Remark = o.Description + '|' + x.Name,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
            FROM  
                ( SELECT Distinct 
                          v.VendorId, v.Name, s.TermOfPurchaseId,
              		        ContractId = min(ContractId) 
                      FROM Shipment AS s with (nolock) 
                          LEFT JOIN SplitShipment AS ss with (nolock) ON ss.ShipmentId=s.ShipmentId and ss.Status=1
                          INNER JOIN NslIndustry..Vendor as v with (nolock) ON v.VendorId = (case when s.IsVirtualSetSplit=1 OR ss.ShipmentId is NULL then s.VendorId else ss.VendorId end) 
                      WHERE s.status = 1
                          AND s.WorkflowStatusId IN (8)
                          AND s.CustomerAtWarehouseDate >= @CutoffDate
                          AND (SunAccountCode is null or SunAccountCode='') and (isDelete='N' and v.vendorFactory='V' and vendorTypeId in (2,4))
                      GROUP BY v.VendorId, v.name, s.TermOfPurchaseId
                ) AS x 
                INNER JOIN Contract as c with (nolock) on c.ContractId=x.ContractId and c.Status=1 
                INNER JOIN Office as o on o.OfficeId = c.OfficeId            
            WHERE
                --EXISTS ( SELECT * 
                --            FROM  NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
				--                    WHERE (@UserId=-1 or UserId=@UserId)
				--	                      AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId)
			    --             )
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
	              AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 

--                    EXISTS ( SELECT *
--                                 FROM ( SELECT pt.OfficeId,
--								                            DepartmentCode=(SELECT Code FROM NSLDB..OfficeStructure AS dp WITH (NOLOCK) WHERE dp.OfficeStructureId=pt.ParentId),
--			                                      UserId = (SELECT TOP 1 UserId 
--                                                        			FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
--					                                                    WHERE uo.Status=1 AND uo.UserId=@UserId
--											                                            AND (uo.OfficeStructureId=pt.ParentId OR uo.OfficeStructureId=pt.OfficeStructureId) 
--										                                  )
--			                                     FROM NSLDB..OfficeStructure AS pt WITH (NOLOCK)
--			                                     WHERE pt.OfficeStructureId=c.ProductTeamId
--		                                  ) as os 
--	                                WHERE (@UserId=-1 OR os.UserId=@UserId)
--		                                  AND (@DepartmentCode='' OR os.DepartmentCode=@DepartmentCode)
--       		                            AND (os.OfficeId @OfficeIdList)
--                            )
            ORDER BY Remark
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetMissingSunAccountCodeSupplierCount_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[
            DECLARE @CutoffDate AS DateTime
            SET @CutoffDate = convert(Varchar,getdate(),23)
            SET @CutoffDate = @CutoffDate-180
          
            SELECT RecordCount = COUNT(*)
            FROM	
            (
             SELECT Distinct x.VendorId, x.TermOfPurchaseId, --c.OfficeId
                OfficeId = (SELECT OfficeId FROM Contract AS c WITH (NOLOCK) WHERE c.contractid=x.contractid)
	 	            FROM  
--                    ( SELECT Distinct 
--                              v.VendorId, v.Name, TermOfPurchaseId,
--                  		        ContractId = min(ContractId) 
--                          FROM Shipment AS s with (nolock) 
--	                            LEFT JOIN SplitShipment AS ss with (nolock) ON ss.ShipmentId=s.ShipmentId and ss.Status=1
--	                            INNER JOIN NslIndustry..Vendor as v with (nolock) ON v.VendorId = (case when s.IsVirtualSetSplit=1 OR ss.ShipmentId is NULL then s.VendorId else ss.VendorId end) 
--                          WHERE s.status = 1
--                              AND s.WorkflowStatusId IN (8)
--                              AND s.CustomerAtWarehouseDate >= @CutoffDate
--		                          AND (SunAccountCode is null or SunAccountCode='') and (isDelete='N' and v.vendorFactory='V' and vendorTypeId in (2,4))
--                          GROUP BY v.VendorId, v.name, s.TermOfPurchaseId
--                    ) AS x 
--                  INNER JOIN Contract as c with (nolock) on c.ContractId=x.ContractId and c.Status=1 
                    ( SELECT TOP 12000 -- 2 seconds faster (Max. 14604)
                              s.ContractId,
	                            --VendorId = (CASE WHEN s.splitCount>0 AND s.IsVirtualSetSplit=0 AND ss.IsVirtualSetSplit=0 THEN ss.VendorId ELSE s.VendorId END),
                              v.VendorId,
                              s.TermOfPurchaseId
                          FROM Shipment AS s WITH (NOLOCK)
	                            LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId 
	                            INNER JOIN NslIndustry..Vendor AS v WITH (NOLOCK) ON v.VendorId = (CASE WHEN s.SplitCount>0 AND ss.IsVirtualSetSplit=0 THEN ss.VendorId ELSE s.VendorId END)
                          WHERE s.status = 1
                              AND s.WorkflowStatusId IN (8)
                              AND s.CustomerAtWarehouseDate >= @CutoffDate
		                          AND (SunAccountCode = '' AND isDelete='N')
                              AND ((s.SplitCount=0 OR s.IsVirtualSetSplit=1) OR (s.SplitCount=0 AND s.IsVirtualSetSplit=0 AND ss.IsVirtualSetSplit=0 AND ss.Status=1))
                    ) AS x 
              WHERE
                EXISTS ( SELECT * 
                            FROM Contract AS c WITH (NOLOCK)
                    				WHERE c.ContractId = x.ContractId
					                      AND ( @UserId=-1 OR
		    				                      EXISTS (Select * FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
					                                        WHERE  uo.Status = 1 AND UserId = @UserId
						                                          AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId))
                                    )
			                          AND (c.OfficeId @OfficeIdList)
			                          AND (c.DeptId @DepartmentIdList) 
                          )


--                    EXISTS ( SELECT *
--                                 FROM ( SELECT pt.OfficeId,
--								                            DepartmentCode=(SELECT Code FROM NSLDB..OfficeStructure AS dp WITH (NOLOCK) WHERE dp.OfficeStructureId=pt.ParentId),
--			                                      UserId = (SELECT TOP 1 UserId 
--                                                        			FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
--					                                                    WHERE uo.Status=1 AND uo.UserId=@UserId
--											                                            AND (uo.OfficeStructureId=pt.ParentId OR uo.OfficeStructureId=pt.OfficeStructureId) 
--										                                  )
--			                                     FROM NSLDB..OfficeStructure AS pt WITH (NOLOCK)
--			                                     --WHERE pt.OfficeStructureId=c.ProductTeamId
--                                           WHERE EXISTS (SELECT * FROM Contract WITH (NOLOCK) WHERE ContractId = x.ContractId AND ProductTeamId=pt.OfficeStructureId)
--		                                  ) as os 
--	                                WHERE (@UserId=-1 OR os.UserId=@UserId)
--		                                  AND (@DepartmentCode='' OR os.DepartmentCode=@DepartmentCode)
--       		                            AND (os.OfficeId @OfficeIdList)
--                            )
          ) as z
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetMissingPaymentAdviceEMailSupplierList_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[

            DECLARE @CutoffDate AS DateTime
            SET @CutoffDate = convert(Varchar,getdate(),23)
            SET @CutoffDate = @CutoffDate-180

            SELECT	DISTINCT
            		ShipmentId = -1, ContractId=-1, ContractNo='', DeliveryNo=-1,
		            x.VendorId, c.OfficeId,
		            ProductId = -1, WorkflowStatusId=-1, MerchandiserId = -1,
		            CustomerAtWarehouseDate=NULL, SupplierAtWarehouseDate=NULL,
                InvoiceNo = NULL,
		            InvoiceDate = CONVERT(DateTime, NULL),
                InvoiceUploadUserId = CONVERT(int, NULL),
		            ILSInvoiceStatus = CONVERT(int, NULL),
              	ActualAtWarehouseDate = CONVERT(datetime, null),
                TermOfPurchaseId = null,  --x.TermOfPurchaseId,
                TotalShippedAmt = Null, TotalShippedSupplierGmtAmt = Null, 
                ApprovalDate = NULL,
                Remark = (SELECT o.Description FROM office as o with (NOLOCK) where o.officeid=c.officeid) +'|' + x.Name,
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
            FROM	
                ( SELECT 
                          v.VendorId,
                          v.name,
                          ContractId = min(ContractId)
                      FROM Shipment AS s WITH (NOLOCK)
                          LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId 
                          INNER JOIN NslIndustry..Vendor AS v WITH (NOLOCK) ON v.VendorId = (CASE WHEN s.SplitCount>0 AND ss.IsVirtualSetSplit=0 and ss.Status=1 THEN ss.VendorId ELSE s.VendorId END)
                      WHERE s.status = 1
                          AND s.WorkflowStatusId IN (8)
                          AND s.CustomerAtWarehouseDate >= @CutoffDate
                          AND (eAdviceAddr = '' AND isDelete='N')
                          --AND ((s.SplitCount=0 OR s.IsVirtualSetSplit=1) OR (s.SplitCount>0 AND s.IsVirtualSetSplit=0 AND ss.IsVirtualSetSplit=0 AND ss.Status=1))
                      GROUP BY v.VendorId, v.name
                ) AS x 
                INNER JOIN Contract as c with (nolock) on c.ContractId=x.ContractId and c.Status=1 
            WHERE 
                --EXISTS ( SELECT * 
                --            FROM  NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
				--                    WHERE (@UserId=-1 or UserId=@UserId)
				--	                      AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId)
			    --             )
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
	              AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
            ORDER BY Remark
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetMissingPaymentAdviceEMailSupplierCount_ToBeRemoved" type="Text">
        <commandText>
          <![CDATA[

            DECLARE @CutoffDate AS DateTime
            SET @CutoffDate = convert(Varchar,getdate(),23)
            SET @CutoffDate = @CutoffDate-180

--            SELECT RecrodCount = count(*)
--                FROM	
--                    ( SELECT Distinct 
--                              v.VendorId,
--                      		    ContractId = min(ContractId) 
--	                        FROM Shipment AS s with (nolock) 
--			                        LEFT JOIN SplitShipment AS ss with (nolock) ON ss.ShipmentId=s.ShipmentId and ss.Status=1
-- 			                        INNER JOIN NslIndustry..Vendor as v with (nolock) ON v.VendorId = (case when s.IsVirtualSetSplit=1 OR ss.ShipmentId is NULL then s.VendorId else ss.VendorId end) 
--		                      WHERE s.status = 1
--		                          AND s.WorkflowStatusId IN (8)
--		                          AND s.CustomerAtWarehouseDate >= @CutoffDate
--				                      AND (eAdviceAddr is null or eAdviceAddr='') and (isDelete='N' and v.vendorFactory='V' and vendorTypeId in (2,4))
--		                      GROUP BY v.VendorId
--		                ) AS x 
--                    INNER JOIN Contract as c with (nolock) on c.ContractId=x.ContractId and c.Status=1 
                    
            SELECT RecordCount = COUNT(*)
            FROM
            (   SELECT DISTINCT 
                    VendorId, 
                    --OfficeId = (SELECT OfficeId FROM Contract AS c WITH (NOLOCK) WHERE c.contractid=x.contractid)
                    c.OfficeId
                FROM
                    ( SELECT TOP 12000 -- Max. 14604
                              s.ContractId,
                              v.VendorId
                          FROM Shipment AS s WITH (NOLOCK)
	                            LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId 
	                            INNER JOIN NslIndustry..Vendor AS v WITH (NOLOCK) ON v.VendorId = (CASE WHEN s.SplitCount>0 AND ss.IsVirtualSetSplit=0 THEN ss.VendorId ELSE s.VendorId END)
                          WHERE s.status = 1
                              AND s.WorkflowStatusId IN (8)
                              AND s.CustomerAtWarehouseDate >= @CutoffDate
		                          AND (eAdviceAddr = '' AND isDelete='N')
                              --AND ((s.SplitCount=0 OR s.IsVirtualSetSplit=1) OR (s.SplitCount>0 AND s.IsVirtualSetSplit=0 AND ss.IsVirtualSetSplit=0 AND ss.Status=1))
                    ) AS x
                    INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=x.ContractId
                WHERE 
                    EXISTS ( SELECT * 
                                FROM  NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
				                        WHERE (@UserId=-1 or UserId=@UserId)
					                          AND (uo.OfficeStructureId=c.ProductTeamId or uo.OfficeStructureId=c.DeptId)
			                     )
    	              AND (c.OfficeId @OfficeIdList)
	                  AND (c.DeptId @DepartmentIdList) 
            
--                    EXISTS ( SELECT *
--                                   FROM ( SELECT pt.OfficeId,
--		                                          DepartmentCode=(SELECT Code FROM NSLDB..OfficeStructure AS dp WITH (NOLOCK) WHERE dp.OfficeStructureId=pt.ParentId),
--                                              UserId = (SELECT TOP 1 UserId 
--                                                     			FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
--                                                          WHERE uo.Status=1 AND uo.UserId=@UserId
--					                                                   AND (uo.OfficeStructureId=pt.ParentId OR uo.OfficeStructureId=pt.OfficeStructureId) 
--				                                               )
--                                              FROM NSLDB..OfficeStructure AS pt WITH (NOLOCK)
--                                              --WHERE pt.OfficeStructureId=c.ProductTeamId
--                                              WHERE EXISTS (SELECT * FROM Contract WITH (NOLOCK) WHERE ContractId = x.ContractId AND ProductTeamId=pt.OfficeStructureId)
--                                      ) as os 
--                              WHERE (@UserId=-1 OR os.UserId=@UserId)
--                                  AND (@DepartmentCode='' OR os.DepartmentCode=@DepartmentCode)
--                                 AND (os.OfficeId @OfficeIdList)
--                            )
             ) as z
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetVendorAlertDetailList" type="Text">
        <commandText>
          <![CDATA[

         DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

          SELECT-- Top 100
              z.ShipmentId, c.ContractId, c.ContractNo, s.DeliveryNo,
              z.VendorId, c.OfficeId, c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
              CustomerAtWarehouseDate, SupplierAtWarehouseDate,
              InvoiceNo = NULL, 
              InvoiceDate = NULL,
              InvoiceUploadUserId = NULL,
              ILSInvoiceStatus = NULL,
              ActualAtWarehouseDate = NULL,
              TermOfPurchaseId = s.TermOfPurchaseId,
              TotalShippedAmt, TotalShippedSupplierGmtAmt, 
              ApprovalDate = NULL,
              Remark = (case when MissingSunAccCode=1 then 'SunAcc' else '' end) + '|'
						+ (case when MissingEAdvAddr=1 then 'EAdvAddr' else '' end) + '|'
						+ (case when MissingAdvBank=1 then 'AdvBank' else '' end) + '|'
						+ (case when MissingEpicorSupplierId is not null then 'EpicorSupplier' else '' end),
              NULL AS ShippingDocReceiptDate,
              NULL AS SupplierInvoiceNo,
              0 AS IsUploadDMSDocument,
              NULL AS ShippingDocCheckedOn
          FROM 
              (
				SELECT 
						VendorId, MissingSunAccCode, MissingEAdvAddr, MissingAdvBank, MissingEpicorSupplierId, ShipmentId = min(y.ShipmentId)
				FROM (	
					SELECT 
							VendorId = isnull(ss.VendorId,s.VendorId), 
							s.ShipmentId, s.ContractId, 
							MissingSunAccCode = (case when s.WorkflowStatusId=8 and SunAccountCode='' then 1 else 0 end),
							MissingEAdvAddr = (case when s.WorkflowStatusId=8 and eAdviceAddr='' then 1 else 0 end),	
							MissingAdvBank = (case when x.BankBranchId is null 
														and ((ss.VendorId is null and s.PaymentTermId=2) or (ss.VendorId is not null and ss.PaymentTermId=2))
														and (ss.LCNo='' or ((select isnull(LCNo,'') from invoice with (nolock) where shipmentid=s.shipmentid)='')) 
													then 1 else 0 end),
							MissingEpicorSupplierId = (CASE WHEN ( s.WorkflowStatusId IN ( 6, 7) AND s.CustomerAtWarehouseDate BETWEEN GETDATE() AND GETDATE()+10 AND x.EpicorSupplierId <> '' AND x.IsExistInEpicor = 0 )
		                    OR ( s.WorkflowStatusId = 8 AND i.InvoiceYear >= 2015 AND ((x.EpicorSupplierId <> '' AND x.IsExistInEpicor = 0) OR x.EpicorSupplierId = '' ))
		                     THEN isnull(ss.VendorId,s.VendorId) ELSE NULL END)
						FROM Shipment AS s WITH (NOLOCK)
              INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId 
							LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)	and ss.Status=1
							INNER JOIN (SELECT v.VendorId, v.SunAccountCode, v.EpicorSupplierId, v.eAdviceAddr, vb.BankBranchId, v.Name, VendorName=v.Name , v.IsExistInEpicor 
											FROM nslindustry..Vendor AS v WITH (NOLOCK)
												left join vendorBankMapping AS vb WITH (NOLOCK) ON vb.VendorId=v.VendorId
											WHERE v.VendorId>0 AND v.IsDelete='N' AND (v.SunAccountCode='' OR v.eAdviceAddr='' OR vb.VendorId is null or v.EpicorSupplierId is null or v.EpicorSupplierId = '')
										) AS x ON x.VendorId=isnull(ss.VendorId,s.VendorId)
						WHERE 
							s.CustomerAtWarehouseDate > @CutoffDate
							AND s.WorkflowStatusId NOT IN (5,9)
					) AS y	
					INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=y.ContractId
						  AND (c.OfficeId @OfficeIdList)
						  AND (c.DeptId @DepartmentIdList) 
				WHERE (MissingSunAccCode=1 or MissingEAdvAddr=1 or MissingAdvBank=1 or MissingEpicorSupplierId is not null)
					AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
				GROUP BY
					VendorId, MissingSunAccCode, MissingEAdvAddr, MissingAdvBank, MissingEpicorSupplierId 
              ) AS z 
              INNER JOIN Shipment AS s WITH (NOLOCK) ON s.ShipmentId = z.ShipmentId
              INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId = s.ContractId
	        ORDER BY 
              OfficeId, SupplierAtWarehouseDate, ContractNo, DeliveryNo

				]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetVendorAlertCount" type="Text">
        <commandText>
          <![CDATA[
			-- Get the count of Vendor missing SUN Account Code / E-Advice eMail Address / LC Advising bank
			DECLARE @CutoffDate AS DateTime
            SET @CutoffDate = convert(Varchar,getdate(),23)
            SET @CutoffDate = @CutoffDate-180

			SELECT 
					MissingSunAccountCode = count(DISTINCT x.MissingSunAccCode),
					MissingEAdviceAddress = count(DISTINCT x.MissingEAdvAddr),
					MissingAdvisingBank = count(DISTINCT x.MissingAdvBank),
					MissingEpicorSupplierId = count(DISTINCT x.MissingEpicorSupplierId)
				FROM (
						SELECT 
							s.ContractId, --s.ShipmentId, s.workflowstatusId, 
							MissingSunAccCode = (case when s.WorkflowStatusId=8 and SunAccountCode='' then isnull(ss.VendorId,s.VendorId) else NULL end),
							MissingEAdvAddr = (case when s.WorkflowStatusId=8 and eAdviceAddr='' then isnull(ss.VendorId,s.VendorId) else NULL end),	
							MissingAdvBank = (case when x.BankBranchId is null 
														and ((ss.VendorId is null and s.PaymentTermId=2) or (ss.VendorId is not null and ss.PaymentTermId=2))
														and (ss.LCNo='' or ((select isnull(LCNo,'') from invoice with (nolock) where shipmentid=s.shipmentid)='')) 
													then isnull(ss.VendorId,s.VendorId) else NULL end),
							MissingEpicorSupplierId =(CASE WHEN ( s.WorkflowStatusId IN ( 6, 7) AND s.CustomerAtWarehouseDate BETWEEN GETDATE() AND GETDATE()+10 AND x.EpicorSupplierId <> '' AND x.IsExistInEpicor = 0 )
		                  OR ( s.WorkflowStatusId = 8 AND i.InvoiceYear >= 2015 AND ((x.EpicorSupplierId <> '' AND x.IsExistInEpicor = 0) OR x.EpicorSupplierId = '' ))
		                   THEN isnull(ss.VendorId,s.VendorId) ELSE NULL END)
						FROM Shipment AS s WITH (NOLOCK)
              INNER JOIN Invoice AS i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId 
							LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)	and ss.Status=1
							INNER JOIN (SELECT v.VendorId, v.SunAccountCode, v.eAdviceAddr, vb.BankBranchId, v.EpicorSupplierId, v.IsExistInEpicor  --, v.Name, VendorName=v.Name 
											FROM nslindustry..Vendor AS v WITH (NOLOCK)
												left join vendorBankMapping AS vb WITH (NOLOCK) ON vb.VendorId=v.VendorId
											WHERE v.VendorId>0 AND v.IsDelete='N' AND (v.SunAccountCode='' OR v.eAdviceAddr='' OR vb.VendorId is null OR ISNULL(v.EpicorSupplierId,'')='')
										) AS x ON x.VendorId=isnull(ss.VendorId,s.VendorId)
						WHERE 
							s.CustomerAtWarehouseDate > @CutoffDate
							AND s.WorkflowStatusId NOT IN (5,9)
					) AS x	
					INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=x.ContractId
						AND (c.OfficeId @OfficeIdList)
						AND (c.DeptId @DepartmentIdList) 
				WHERE 
					(MissingSunAccCode is not null or MissingEAdvAddr is not null or MissingAdvBank is not null or MissingEpicorSupplierId is not null)
					AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
			]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetVendorCompanyList" type="Text">
        <commandText>
          <![CDATA[
				DECLARE @CutoffDate AS DateTime
				SET @CutoffDate = convert(Varchar,getdate(),23)
				SET @CutoffDate = @CutoffDate-180

				SELECT x.*, m.EpicorCompanyId, v.EpicorSupplierId, v.Name,
					Remark = (ISNULL(v.EpicorSupplierId,'') +'|'+ ISNULL(m.EpicorCompanyId,''))
				FROM 
					(
					SELECT DISTINCT VendorId=isnull(ss.VendorId,s.VendorId), c.OfficeId, s.TermOfPurchaseId
					FROM Shipment AS s WITH (NOLOCK)
						LEFT JOIN SplitShipment AS ss WITH (NOLOCK) ON ss.ShipmentId=s.ShipmentId AND (s.SplitCount>0 AND s.IsVirtualSetSplit = 0 AND ss.IsVirtualSetSplit = 0)	and ss.Status=1
						INNER JOIN Contract AS c WITH (NOLOCK) ON c.ContractId=s.ContractId
						WHERE s.status=1
							AND ((s.WorkflowStatusId IN (6,7) AND s.CustomerAtWarehouseDate BETWEEN GETDATE() AND GETDATE() + 30) 
									OR (s.WorkflowStatusId = 8 AND s.CustomerAtWarehouseDate >= @CutoffDate))
 							AND (c.OfficeId @OfficeIdList)
							AND (c.DeptId @DepartmentIdList) 
							AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND OfficeStructureId=c.ProductTeamId AND Status=1))
					) AS x
					INNER JOIN nsldb..CompanyOfficeMapping as m WITH (NOLOCK) ON m.officeid=x.officeid and m.CompanyId=1
					INNER JOIN nslindustry..vendor AS v ON v.VendorId=x.VendorId
				ORDER BY v.Name
			]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetEziBuyOSPaymentList" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180
          
          SELECT TOP 100
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                s.VendorId, c.OfficeId, 
                Office = (SELECT rtrim(replace(o.Description,'Office','')) FROM Office AS o WHERE o.OfficeId=c.OfficeId),
                c.ProductId, s.WorkflowStatusId, c.MerchandiserId,
                s.CustomerAtWarehouseDate, s.SupplierAtWarehouseDate,
            		InvoiceNo = dbo.fn_formatInvoiceno(Invoiceprefix, invoiceseq, invoiceyear),
		            i.InvoiceDate, i.InvoiceUploadUserId,
		            ILSInvoiceStatus= NULL,
                StockToWarehouseDate = CONVERT(datetime, NULL),
		            TermOfPurchaseId = s.TermOfPurchaseId,
                TotalShippedAmt = case when s.SellCurrencyId=3 
					                            then s.TotalShippedAmt 
					                            else s.TotalShippedAmt
  	  					                            * (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=s.SellCurrencyId and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
	  	  				                            / (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=3 and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
					                            end,
		            TotalShippedSupplierGmtAmt = case when s.SellCurrencyId=3 
					                            then s.TotalShippedSupplierGmtAmt 
					                            else s.TotalShippedSupplierGmtAmt
  	  					                            * (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=s.SellCurrencyId and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
	  	  				                            / (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=3 and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
					                            end,
                i.ActualAtWarehouseDate,
                ApprovalDate = NULL,
		            Remark = isnull(convert(varchar, c.BookingRefNo),'') + '|' + isnull(convert(varchar, i.InvoiceSentDate,103),'') + '|' + isnull(convert(varchar(10), i.ARDate,103),'') + '|' + isnull(convert(varchar(10),i.BookingAtWarehouseDate,103),''),
                NULL AS ShippingDocReceiptDate,
                NULL AS SupplierInvoiceNo,
                0 AS IsUploadDMSDocument,
                NULL AS ShippingDocCheckedOn
            FROM Shipment s WITH (NOLOCK)
                INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.CustomerId = 13
                INNER JOIN Invoice i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND (i.ActualAtWarehouseDate IS NULL OR i.ARDate IS NULL)
            WHERE s.Status = 1
                AND s.WorkflowStatusId = 8
                AND s.CustomerAtWarehouseDate >= @CutoffDate
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
    	          AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
            ORDER BY 
                Office, i.InvoiceSentDate, InvoiceNo
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetEziBuyOSPaymentListCount" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

          SELECT RecordCount = count(s.ShipmentId)
            FROM Shipment s
                INNER JOIN Contract c ON c.ContractId = s.ContractId AND c.CustomerId = 13
                INNER JOIN Invoice i ON i.ShipmentId = s.ShipmentId AND (i.ActualAtWarehouseDate IS NULL OR i.ARDate IS NULL)
          WHERE s.Status = 1
                AND s.WorkflowStatusId = 8
                AND s.CustomerAtWarehouseDate >= @CutoffDate
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
    	          AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetEziBuyOSPaymentCount_Fast" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180

          SELECT s.ShipmentId
            FROM Shipment s WITH (NOLOCK)
                INNER JOIN Contract c WITH (NOLOCK) ON c.ContractId = s.ContractId AND c.CustomerId = 13
                INNER JOIN Invoice i WITH (NOLOCK) ON i.ShipmentId = s.ShipmentId AND (i.ActualAtWarehouseDate IS NULL OR i.ARDate IS NULL)
          WHERE s.Status = 1
                AND s.WorkflowStatusId = 8
                AND s.CustomerAtWarehouseDate >= @CutoffDate
				AND (@UserId=-1 OR EXISTS(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE UserId=@UserId AND (OfficeStructureId=c.DeptId OR OfficeStructureId=c.ProductTeamId) AND Status=1))
    	          AND (c.OfficeId @OfficeIdList)
	              AND (c.DeptId @DepartmentIdList) 
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentIdList" name="@DepartmentIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>


      <dataCommand name="GetNTInvoiceApprovalGroupCount" type="Text">
        <commandText>
          <![CDATA[
				SELECT 
						DeptAproval = COUNT(DISTINCT CASE WHEN i.WorkflowStatusId in (1,5) AND (@UserId=-1 OR i.ApproverId=@UserId OR dp.DeptId IS NOT NULL) THEN i.InvoiceId ELSE NULL END),
						Acc1stApproval = COUNT(DISTINCT CASE WHEN i.WorkflowStatusId in (2,7) AND n.Acc1stApproval=1 THEN i.InvoiceId ELSE NULL END),
						Acc2ndApproval = COUNT(DISTINCT CASE WHEN i.WorkflowStatusId in (4) AND n.Acc2ndApproval=1 THEN i.InvoiceId ELSE NULL END),
						AccApproved = COUNT(DISTINCT CASE WHEN i.WorkflowStatusId in (6,8) AND i.IsSunInterfaced=0 THEN i.InvoiceId ELSE NULL END)
				FROM
					NTInvoice AS i with (nolock) 
					LEFT JOIN (SELECT DeptId = o.OfficeStructureId
 												FROM NSLDB..UserSeasonOfficeStructure as uo
 													INNER JOIN NSLDB..OfficeStructure as o on (o.OfficeStructureId=uo.OfficeStructureId or o.ParentId=uo.OfficeStructureId)
 												WHERE uo.Status=1 AND uo.OfficeStructureTypeId=10 
 													AND o.Status=1 AND o.OfficeStructureTypeId=10 
 													AND uo.UserId = @UserId
 								) AS dp ON dp.DeptId = i.DeptId
					LEFT JOIN (SELECT OfficeId, 
 										Acc1stApproval=MAX(CASE WHEN RoleId=1 OR RoleId=-1 THEN 1 ELSE 0 END),
 										Acc2ndApproval=MAX(CASE WHEN RoleId=2 OR RoleId=-1 THEN 1 ELSE 0 END)
 								FROM NTUserRoleAccess WITH (NOLOCK) 
 								WHERE (@UserId=-1 OR UserId = @UserId)
 								GROUP BY OfficeId
 								) AS n ON (n.OfficeId=i.OfficeId OR n.OfficeId=-1)
				WHERE i.Status = 1
					AND i.WorkflowStatusId IN (1,5,2,7,4,6,8)
 					AND (i.OfficeId @OfficeIdList)
 			]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNTInvoiceApprovalGroupList" type="Text">
        <commandText>
          <![CDATA[
				SELECT TOP 400
					AlertType = 'NONTRADE',
					GroupId = @GroupId,
					DocumentId = i.InvoiceId,
					UserId = i.ApproverId,
					i.OfficeId, i.WorkflowStatusId, i.CurrencyId, i.InvoiceDate,
					InvoiceNo = i.NSLInvoiceNo,
					SupplierInvoiceNo = i.InvoiceNo,
					VendorId = i.NTVendorId, 
					Date = i.DueDate,
					Amount = i.Amount + i.TotalVAT,
					Remark = (CASE WHEN i.CustomerNo IS NULL or i.CustomerNo='' THEN '' ELSE i.CustomerNo+ '/' + right(replace(convert(varchar,PaymentFromDate,03),'/',''),4) END)
				FROM
					NTInvoice AS i with (nolock) 
				WHERE i.Status = 1
					AND ( --(@GroupId=-1 AND i.WorkflowStatusId IN (1,5,2,7,4,6)) OR
							(@GroupId=0 AND i.WorkflowStatusId in (1,5)
								and (@UserId=-1 or i.approverId=@UserId 
 										or exists(SELECT * FROM NSLDB..UserSeasonOfficeStructure WITH (NOLOCK) WHERE Status=1 AND OfficeStructureId=i.DeptId AND UserId = @UserId)
 									))
							OR (@GroupId=1 AND i.WorkflowStatusId in (2,7)	AND (@UserId = -1 OR exists(SELECT * FROM NTUserRoleAccess WITH (NOLOCK) WHERE UserId = @UserId and RoleId in (1,-1) AND (OfficeId=i.OfficeId or OfficeId=-1)))) 
							OR (@GroupId=2 AND i.WorkflowStatusId in (4)	AND (@UserId = -1 OR exists(SELECT * FROM NTUserRoleAccess WITH (NOLOCK) WHERE UserId = @UserId and RoleId in (2,-1) AND (OfficeId=i.OfficeId or OfficeId=-1)))) 
							OR (@GroupId=3 AND i.WorkflowStatusId in (6,8) AND i.IsSunInterfaced=0) 
						)
 					AND (i.OfficeId @OfficeIdList)
				ORDER BY 
					i.OfficeId 
			
			/*
				SELECT * FROM
				(
				SELECT DISTINCT --TOP 400
					AlertType = 'NONTRADE',
					GroupId = (CASE WHEN i.WorkflowStatusId in (1,5) AND (@UserId=-1 OR i.ApproverId=@UserId --OR dp.DeptId IS NOT NULL) 
											OR 
											exists(
												SELECT *
												FROM NSLDB..UserSeasonOfficeStructure as uo
												WHERE uo.Status=1 AND uo.OfficeStructureId=i.DeptId 
													AND uo.UserId = @UserId
												)
											)
											THEN 0 
									WHEN i.WorkflowStatusId in (2,7) --AND n.Acc1stApproval=1 
												AND (@UserId = -1 OR exists(SELECT * FROM NTUserRoleAccess WITH (NOLOCK) WHERE UserId = @UserId and RoleId in (1,-1) AND OfficeId=i.OfficeId))
											THEN 1 
									WHEN i.WorkflowStatusId in (4) --AND n.Acc2ndApproval=1 
												AND (@UserId = -1 OR exists(SELECT * FROM NTUserRoleAccess WITH (NOLOCK) WHERE UserId = @UserId and RoleId in (2,-1) AND OfficeId=i.OfficeId))
											THEN 2
											
									--WHEN i.WorkflowStatusId in (2,7) AND n.Acc1stApproval=1 THEN 1 
									--WHEN i.WorkflowStatusId in (4) AND n.Acc2ndApproval=1 THEN 2
									WHEN i.WorkflowStatusId in (6) AND i.IsSunInterfaced=0 THEN 3
									ELSE -1 END),
					DocumentId = i.InvoiceId,
					UserId = i.ApproverId,
					i.OfficeId, i.WorkflowStatusId, i.CurrencyId, i.InvoiceDate,
					InvoiceNo = i.NSLInvoiceNo,
					SupplierInvoiceNo = i.InvoiceNo,
					VendorId = i.NTVendorId, 
					Date = i.DueDate,
					Amount = i.Amount + i.TotalVAT,
					Remark = (CASE WHEN i.CustomerNo IS NULL or i.CustomerNo='' THEN '' ELSE i.CustomerNo+ '/' + right(replace(convert(varchar,PaymentFromDate,03),'/',''),4) END)
				FROM
					NTInvoice AS i with (nolock)
						/*
						LEFT JOIN (SELECT DeptId = o.OfficeStructureId
										FROM NSLDB..UserSeasonOfficeStructure as uo
											INNER JOIN NSLDB..OfficeStructure as o on (o.OfficeStructureId=uo.OfficeStructureId or o.ParentId=uo.OfficeStructureId)
										WHERE uo.Status=1 AND uo.OfficeStructureTypeId=10 
											AND o.Status=1 AND o.OfficeStructureTypeId=10 
											AND uo.UserId = @UserId
									) AS dp ON dp.DeptId = i.DeptId
						LEFT JOIN (SELECT OfficeId, 
 											Acc1stApproval=MAX(CASE WHEN RoleId=1 OR RoleId=-1 THEN 1 ELSE 0 END),
 											Acc2ndApproval=MAX(CASE WHEN RoleId=2 OR RoleId=-1 THEN 1 ELSE 0 END)
 										FROM NTUserRoleAccess WITH (NOLOCK) 
 										WHERE (@UserId=-1 OR UserId = @UserId)
 										GROUP BY OfficeId
 								) AS n ON (n.OfficeId=i.OfficeId OR n.OfficeId=-1)
						*/			
				WHERE i.Status = 1
					AND i.WorkflowStatusId IN (1,5,2,7,4,6)
 					AND (i.OfficeId @OfficeIdList)
 					--AND ( @UserId=-1
					--		or i.approverId=@UserId 
 					--		or DeptId IN (SELECT o.OfficeStructureId
 					--							FROM NSLDB..UserSeasonOfficeStructure as uo
 					--								INNER JOIN NSLDB..OfficeStructure as o on (o.OfficeStructureId=uo.OfficeStructureId or o.ParentId=uo.OfficeStructureId)
 					--							WHERE uo.Status=1 AND uo.OfficeStructureTypeId=10 
 					--								AND o.Status=1 AND o.OfficeStructureTypeId=10 
 					--								AND uo.UserId = @UserId
 					--						)		
 					--	)
				) AS x
				WHERE GroupId=@GroupId
				ORDER BY 
					OfficeId 


				SELECT TOP 400
					AlertType = 'NONTRADE',
					GroupId = (CASE WHEN i.WorkflowStatusId in (1,5) THEN 1 ELSE 0 END)
							+ (CASE WHEN i.WorkflowStatusId in (2,7) THEN 2 ELSE 0 END) 
							+ (CASE WHEN i.WorkflowStatusId in (4) THEN 4 ELSE 0 END) 
							+ (CASE WHEN i.WorkflowStatusId in (6) THEN 8 ELSE 0 END), 
					DocumentId = i.InvoiceId,
					UserId = i.ApproverId,
					i.OfficeId, i.WorkflowStatusId, i.CurrencyId, i.InvoiceDate,
					InvoiceNo = i.NSLInvoiceNo,
					SupplierInvoiceNo = i.InvoiceNo,
					VendorId = i.NTVendorId, 
					Date = i.DueDate,
					Amount = i.Amount + i.TotalVAT,
					Remark = (CASE WHEN i.CustomerNo IS NULL or i.CustomerNo='' THEN '' ELSE i.CustomerNo+ '/' + right(replace(convert(varchar,PaymentFromDate,03),'/',''),4) END)
				FROM
					NTInvoice AS i with (nolock) 
				WHERE i.Status = 1
					AND i.WorkflowStatusId IN (1,5,2,7,4,6)
 					AND (i.OfficeId @OfficeIdList)
 					AND ( @UserId=-1
							or i.approverId=@UserId 
 							or DeptId IN (SELECT o.OfficeStructureId
 												FROM NSLDB..UserSeasonOfficeStructure as uo
 													INNER JOIN NSLDB..OfficeStructure as o on (o.OfficeStructureId=uo.OfficeStructureId or o.ParentId=uo.OfficeStructureId)
 												WHERE uo.Status=1 AND uo.OfficeStructureTypeId=10 
 													AND o.Status=1 AND o.OfficeStructureTypeId=10 
 													AND uo.UserId = @UserId
 											)		
 						)
				ORDER BY 
					i.OfficeId 
*/
			]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="GroupId" name="@GroupId" type="int" direction="Input" />
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNTInvoiceApprovalDetailList" type="Text">
        <commandText>
          <![CDATA[
				SELECT TOP 400
					AlertType = 'NONTRADE',
					GroupId = @GroupId,
					DocumentId = i.InvoiceId,
					UserId = i.ApproverId,
					i.OfficeId, i.WorkflowStatusId, i.CurrencyId, i.InvoiceDate,
					InvoiceNo = i.NSLInvoiceNo,
					SupplierInvoiceNo = i.InvoiceNo,
					VendorId = i.NTVendorId, 
					Date = i.DueDate,
					Amount = i.Amount + i.TotalVAT,
					Remark = (CASE WHEN i.CustomerNo IS NULL or i.CustomerNo='' THEN '' ELSE i.CustomerNo+ '/' + right(replace(convert(varchar,PaymentFromDate,03),'/',''),4) END)
				FROM
					NTInvoice AS i with (nolock) 
				WHERE i.Status = 1
					AND ( --(@GroupId=-1 AND i.WorkflowStatusId IN (1,5,2,7,4,6)) OR
						(@GroupId=0 AND i.WorkflowStatusId in (1))
						OR (@GroupId=1 AND i.WorkflowStatusId in (2,7)) 
						OR (@GroupId=2 AND i.WorkflowStatusId in (4)) 
						OR (@GroupId=3 AND i.WorkflowStatusId in (6,8) AND i.IsSunInterfaced=0) 
						)
 					AND (i.OfficeId @OfficeIdList)
 					AND (@GroupId<>0
 						or (@GroupId=0 
 							and (@UserId=-1
								or i.approverId=@UserId 
 								or DeptId IN (SELECT o.OfficeStructureId
 												FROM NSLDB..UserSeasonOfficeStructure as uo
 													INNER JOIN NSLDB..OfficeStructure as o on (o.OfficeStructureId=uo.OfficeStructureId or o.ParentId=uo.OfficeStructureId)
 												WHERE uo.Status=1 AND uo.OfficeStructureTypeId=10 
 													AND o.Status=1 AND o.OfficeStructureTypeId=10 
 													AND uo.UserId = @UserId
 											)		
 								 )
 							)
 						)
					
				ORDER BY 
					i.OfficeId 
			]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="GroupId" name="@GroupId" type="int" direction="Input" />
          <param key="UserId" name="@UserId" type="int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNTVendorGroupCount" type="Text">
        <commandText>
          <![CDATA[
			SELECT ApprovalCount = COUNT(DISTINCT CASE WHEN WorkflowStatusId=2 AND n.VendorApproval=1 THEN NTVendorId ELSE NULL END),
					AmendmentCount = COUNT(DISTINCT CASE WHEN AmendmentDetail IS NOT NULL THEN NTVendorId ELSE NULL END)
				FROM NTVendor as v with (nolock) 
					LEFT JOIN (SELECT OfficeId, 
										VendorApproval=MAX(CASE WHEN RoleId=5 OR RoleId=-1 THEN 1 ELSE 0 END) 
									FROM NTUserRoleAccess WITH (NOLOCK) 
									WHERE (@UserId=-1 OR UserId = @UserId) 
									GROUP BY OfficeId 
							) AS n ON (n.OfficeId=v.OfficeId OR n.OfficeId=-1) 

				WHERE status=1 
					AND (WorkflowStatusId=2 OR AmendmentDetail IS NOT NULL)
	 				AND (v.OfficeId @OfficeIdList)
	 		]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

      <dataCommand name="GetNTVendorDetailGroupList" type="Text">
        <commandText>
          <![CDATA[
			SELECT DISTINCT TOP 200
				AlertType = 'NONTRADE',
				GroupId = (CASE WHEN WorkflowStatusID=2 THEN 1 ELSE 0 END) + (CASE WHEN AmendmentDetail IS NOT NULL THEN 2 ELSE 0 END),
				DocumentId = NTVendorId,
				v.OfficeId, WorkflowStatusId, 
				VendorId = NTVendorId, 
				Remark = Address,
				Description = AmendmentDetail
			FROM ntVendor as v with (nolock) 
					LEFT JOIN (SELECT OfficeId, 
										VendorApproval=MAX(CASE WHEN RoleId=5 OR RoleId=-1 THEN 1 ELSE 0 END) 
									FROM NTUserRoleAccess WITH (NOLOCK) 
									WHERE (@UserId=-1 OR UserId = @UserId) 
									GROUP BY OfficeId 
							) AS n ON (n.OfficeId=v.OfficeId OR n.OfficeId=-1) 
			
			WHERE status=1 
				AND (WorkflowStatusId=2 OR AmendmentDetail IS NOT NULL)
	 			AND (v.OfficeId @OfficeIdList)
		]]>
        </commandText>
        <parameters>
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
        </parameters>
      </dataCommand>

    </selectCommand>

    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="AlertNotification" />
    </tableMappings>
  </dataSetAdapter>


  <dataSetAdapter name="EziBuyOSPaymentReportApt" populateCommands="false">
    <selectcommand>
      <dataCommand name="GetEziBuyAllOSPaymentReport" type="Text">
        <commandText>
          <![CDATA[
          DECLARE @CutoffDate AS DateTime
          SET @CutoffDate = convert(Varchar,getdate(),23)
          SET @CutoffDate = @CutoffDate-180
          
          SELECT 
                s.ShipmentId, s.ContractId, c.ContractNo, s.DeliveryNo,
                Office = (select rtrim(replace(o.Description,'Office','')) from Office as o where o.OfficeId= c.OfficeId), 
                ItemNo = (select ItemNo from Product as p where p.ProductId=c.ProductId),
                CustomerDeliveryDate = s.CustomerAtWarehouseDate, 
            		InvoiceNo = dbo.fn_formatInvoiceno(Invoiceprefix, invoiceseq, invoiceyear),
		            i.InvoiceDate, i.InvoiceSentDate,
--                InvoiceAmount = case when s.SellCurrencyId=3 then s.TotalShippedAmt else s.TotalShippedAmt*isnull(xr.ExchangeRate, xr0.ExchangeRate)/isnull(xru.ExchangeRate,xru0.ExchangeRate) end,
                InvoiceAmount = case when s.SellCurrencyId=3 
					                            then s.TotalShippedAmt 
					                            else s.TotalShippedAmt
  	  					                            * (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=s.SellCurrencyId and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
	  	  				                            / (select top 1 ExchangeRate from ExchangeRate with (nolock) 
                                                  where CurrencyId=3 and ExchangeRateTypeId=1 and ((i.InvoiceDate between EffectiveDateFrom and EffectiveDateTo) or EffectiveTypeId=0) 
                                                  order by EffectiveTypeId desc, modifiedOn desc, CreatedOn desc)
					                            end,
		            ActualInWarehouseDate = i.ActualAtWarehouseDate,
                BookedInWarehouseDate = i.BookingAtWarehouseDate,
		            InboundDeliveryNo = c.BookingRefNo, 
                SalesSettlementDate = i.ARDate,
                ApprovalDate = convert(datetime,null)
            FROM Shipment s (nolock)
                INNER JOIN Contract c (nolock) ON c.ContractId = s.ContractId AND c.CustomerId = 13
                INNER JOIN Invoice i (nolock) ON i.ShipmentId = s.ShipmentId
                --LEFT JOIN ExchangeRate as xr ON xr.CurrencyId=s.SellCurrencyId and xr.ExchangeRateTypeId=1 and i.InvoiceDate between xr.EffectiveDateFrom and xr.EffectiveDateTo
                --LEFT JOIN ExchangeRate as xr0 ON xr0.CurrencyId=s.SellCurrencyId and xr0.ExchangeRateTypeId=1 and xr0.EffectiveTypeId=0
                --LEFT JOIN ExchangeRate as xru ON xru.CurrencyId=3 and xru.ExchangeRateTypeId=1 and i.InvoiceDate between xru.EffectiveDateFrom and xru.EffectiveDateTo
                --LEFT JOIN ExchangeRate as xru0 ON xru0.CurrencyId=3 and xru0.ExchangeRateTypeId=1 and xru0.EffectiveTypeId=0
                --INNER JOIN (
                --            SELECT DISTINCT ProductTeamId=pt.OfficeStructureId
                --            FROM NSLDB..OfficeStructure AS pt with (nolock) 
                --                INNER join NSLDB..OfficeStructure AS dp with (nolock) ON dp.OfficeStructureId=pt.ParentId AND dp.Status=1
                --                LEFT JOIN NSLDB..UserSeasonOfficeStructure AS uo with (nolock) ON (uo.OfficeStructureId=pt.ParentId or uo.OfficeStructureId=pt.OfficeStructureId) and uo.UserId=@UserId AND uo.Status=1
                --            WHERE pt.status=1 AND pt.OfficeStructureTypeId = 50
                --               AND (@UserId=-1 or uo.UserId=@UserId)
                --                AND (@DepartmentCode='' OR dp.Code=@DepartmentCode)
				        --                AND (pt.OfficeId @OfficeIdList)
	              --            ) as pt on pt.ProductTeamId=c.ProductTeamId
          WHERE s.Status = 1
                AND s.WorkflowStatusId = 8
                --AND (i.ActualAtWarehouseDate IS NULL OR i.ARDate IS NULL)
                -- ExtractMode : 'NOTICE' - For sending payment notice report to EziBuy thru eMail
                --               'ALERT'  - For exporting the payment alert in 'Alert and Notification' page
                AND ((@ExtractMode='ALERT' and i.ActualAtWarehouseDate IS NULL) OR i.ARDate IS NULL)
                AND s.CustomerAtWarehouseDate >= @CutoffDate
             		AND (@SeasonIdFrom=-1 or c.seasonId>=@SeasonIdFrom)
 		            AND (@SeasonIdTo=-1 or c.seasonId<=@SeasonIdTo)
             		AND (@PhaseIdFrom=-1 or c.PhaseId>=@PhaseIdFrom)
 		            AND (@PhaseIdTo=-1 or c.PhaseId<=@PhaseIdTo)
                AND EXISTS ( SELECT *
                                 FROM ( SELECT pt.OfficeId,
	                                          DepartmentCode=(SELECT Code FROM NSLDB..OfficeStructure AS dp WITH (NOLOCK) WHERE dp.OfficeStructureId=pt.ParentId),
                                            UserId = (SELECT TOP 1 UserId 
                                                   			FROM NSLDB..UserSeasonOfficeStructure AS uo WITH (NOLOCK)
                                                        WHERE uo.Status=1 AND uo.UserId=@UserId
				                                                   AND (uo.OfficeStructureId=pt.ParentId OR uo.OfficeStructureId=pt.OfficeStructureId) 
			                                               )
                                            FROM NSLDB..OfficeStructure AS pt WITH (NOLOCK)
                                            WHERE pt.OfficeStructureId=c.ProductTeamId
                                    ) as os 
                            WHERE (@UserId=-1 OR os.UserId=@UserId)
                               AND (@DepartmentCode='' OR os.DepartmentCode=@DepartmentCode)
                               AND (os.OfficeId @OfficeIdList)
                          )
                
          ORDER BY 
                Office, i.InvoiceSentDate, InvoiceNo
         ]]>
        </commandText>
        <parameters>
          <param key="UserId" name="@UserId" type="Int" direction="Input" />
          <param key="OfficeIdList" name="@OfficeIdList" type="ArrayInt" direction="Input" />
          <param key="DepartmentCode" name="@DepartmentCode" type="varchar" direction="Input" />
          <param key="SeasonIdFrom" name="@SeasonIdFrom" type="Int" direction="Input" />
          <param key="SeasonIdTo" name="@SeasonIdTo" type="Int" direction="Input" />
          <param key="PhaseIdFrom" name="@PhaseIdFrom" type="Int" direction="Input" />
          <param key="PhaseIdTo" name="@PhaseIdTo" type="Int" direction="Input" />
          <param key="ExtractMode" name="@ExtractMode" type="varchar" direction="Input" />
        </parameters>
      </dataCommand>

    </selectcommand>
    <tableMappings>
      <tableMapping sourceTable="Table" dataSetTable="EziBuyOSPayment" />
    </tableMappings>

  </dataSetAdapter>


</dataOperations>

