//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36392
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.36392.
// 
#pragma warning disable 1591

namespace com.next.isam.webapp.QAIS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClaimRequestServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DomainData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class ClaimRequestService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetClaimRequestByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetClaimRequestStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVendorIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkBIATransmitCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDummyClaimRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveClaimRequestListByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingCancellationClaimRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutstandingBIAClaimRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendCancelledClaimNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClaimRequestListByTypeMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSampleImageAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAuthorizationFormAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClaimTypeDMSDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowStatusDescriptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClaimRequestService() {
            this.Url = global::com.next.isam.webapp.Properties.Settings.Default.com_next_isam_webapp_QAIS_ClaimRequestService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetClaimRequestByKeyCompletedEventHandler GetClaimRequestByKeyCompleted;
        
        /// <remarks/>
        public event SetClaimRequestStatusCompletedEventHandler SetClaimRequestStatusCompleted;
        
        /// <remarks/>
        public event UpdateVendorIdCompletedEventHandler UpdateVendorIdCompleted;
        
        /// <remarks/>
        public event MarkBIATransmitCompletedCompletedEventHandler MarkBIATransmitCompletedCompleted;
        
        /// <remarks/>
        public event CreateDummyClaimRequestCompletedEventHandler CreateDummyClaimRequestCompleted;
        
        /// <remarks/>
        public event GetActiveClaimRequestListByTypeCompletedEventHandler GetActiveClaimRequestListByTypeCompleted;
        
        /// <remarks/>
        public event GetPendingCancellationClaimRequestListCompletedEventHandler GetPendingCancellationClaimRequestListCompleted;
        
        /// <remarks/>
        public event GetOutstandingBIAClaimRequestListCompletedEventHandler GetOutstandingBIAClaimRequestListCompleted;
        
        /// <remarks/>
        public event sendCancelledClaimNotificationCompletedEventHandler sendCancelledClaimNotificationCompleted;
        
        /// <remarks/>
        public event GetClaimRequestListByTypeMappingCompletedEventHandler GetClaimRequestListByTypeMappingCompleted;
        
        /// <remarks/>
        public event IsSampleImageAvailableCompletedEventHandler IsSampleImageAvailableCompleted;
        
        /// <remarks/>
        public event IsAuthorizationFormAvailableCompletedEventHandler IsAuthorizationFormAvailableCompleted;
        
        /// <remarks/>
        public event GetClaimTypeDMSDescriptionCompletedEventHandler GetClaimTypeDMSDescriptionCompleted;
        
        /// <remarks/>
        public event GetWorkflowStatusDescriptionCompletedEventHandler GetWorkflowStatusDescriptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClaimRequestByKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClaimRequestDef GetClaimRequestByKey(int requestId) {
            object[] results = this.Invoke("GetClaimRequestByKey", new object[] {
                        requestId});
            return ((ClaimRequestDef)(results[0]));
        }
        
        /// <remarks/>
        public void GetClaimRequestByKeyAsync(int requestId) {
            this.GetClaimRequestByKeyAsync(requestId, null);
        }
        
        /// <remarks/>
        public void GetClaimRequestByKeyAsync(int requestId, object userState) {
            if ((this.GetClaimRequestByKeyOperationCompleted == null)) {
                this.GetClaimRequestByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClaimRequestByKeyOperationCompleted);
            }
            this.InvokeAsync("GetClaimRequestByKey", new object[] {
                        requestId}, this.GetClaimRequestByKeyOperationCompleted, userState);
        }
        
        private void OnGetClaimRequestByKeyOperationCompleted(object arg) {
            if ((this.GetClaimRequestByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClaimRequestByKeyCompleted(this, new GetClaimRequestByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetClaimRequestStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetClaimRequestStatus(int requestId, int workflowStatusId, int userId) {
            this.Invoke("SetClaimRequestStatus", new object[] {
                        requestId,
                        workflowStatusId,
                        userId});
        }
        
        /// <remarks/>
        public void SetClaimRequestStatusAsync(int requestId, int workflowStatusId, int userId) {
            this.SetClaimRequestStatusAsync(requestId, workflowStatusId, userId, null);
        }
        
        /// <remarks/>
        public void SetClaimRequestStatusAsync(int requestId, int workflowStatusId, int userId, object userState) {
            if ((this.SetClaimRequestStatusOperationCompleted == null)) {
                this.SetClaimRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetClaimRequestStatusOperationCompleted);
            }
            this.InvokeAsync("SetClaimRequestStatus", new object[] {
                        requestId,
                        workflowStatusId,
                        userId}, this.SetClaimRequestStatusOperationCompleted, userState);
        }
        
        private void OnSetClaimRequestStatusOperationCompleted(object arg) {
            if ((this.SetClaimRequestStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetClaimRequestStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateVendorId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateVendorId(int requestId, int vendorId, int userId) {
            this.Invoke("UpdateVendorId", new object[] {
                        requestId,
                        vendorId,
                        userId});
        }
        
        /// <remarks/>
        public void UpdateVendorIdAsync(int requestId, int vendorId, int userId) {
            this.UpdateVendorIdAsync(requestId, vendorId, userId, null);
        }
        
        /// <remarks/>
        public void UpdateVendorIdAsync(int requestId, int vendorId, int userId, object userState) {
            if ((this.UpdateVendorIdOperationCompleted == null)) {
                this.UpdateVendorIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVendorIdOperationCompleted);
            }
            this.InvokeAsync("UpdateVendorId", new object[] {
                        requestId,
                        vendorId,
                        userId}, this.UpdateVendorIdOperationCompleted, userState);
        }
        
        private void OnUpdateVendorIdOperationCompleted(object arg) {
            if ((this.UpdateVendorIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVendorIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MarkBIATransmitCompleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkBIATransmitCompleted(int requestId, int userId) {
            this.Invoke("MarkBIATransmitCompleted", new object[] {
                        requestId,
                        userId});
        }
        
        /// <remarks/>
        public void MarkBIATransmitCompletedAsync(int requestId, int userId) {
            this.MarkBIATransmitCompletedAsync(requestId, userId, null);
        }
        
        /// <remarks/>
        public void MarkBIATransmitCompletedAsync(int requestId, int userId, object userState) {
            if ((this.MarkBIATransmitCompletedOperationCompleted == null)) {
                this.MarkBIATransmitCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkBIATransmitCompletedOperationCompleted);
            }
            this.InvokeAsync("MarkBIATransmitCompleted", new object[] {
                        requestId,
                        userId}, this.MarkBIATransmitCompletedOperationCompleted, userState);
        }
        
        private void OnMarkBIATransmitCompletedOperationCompleted(object arg) {
            if ((this.MarkBIATransmitCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkBIATransmitCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDummyClaimRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateDummyClaimRequest(int claimTypeId, int vendorId, string itemNo, string contractNo, string ukDebitNoteNo, System.DateTime ukDebitNoteDate, string claimMonth, int qty, decimal amount, string remark, int userId) {
            this.Invoke("CreateDummyClaimRequest", new object[] {
                        claimTypeId,
                        vendorId,
                        itemNo,
                        contractNo,
                        ukDebitNoteNo,
                        ukDebitNoteDate,
                        claimMonth,
                        qty,
                        amount,
                        remark,
                        userId});
        }
        
        /// <remarks/>
        public void CreateDummyClaimRequestAsync(int claimTypeId, int vendorId, string itemNo, string contractNo, string ukDebitNoteNo, System.DateTime ukDebitNoteDate, string claimMonth, int qty, decimal amount, string remark, int userId) {
            this.CreateDummyClaimRequestAsync(claimTypeId, vendorId, itemNo, contractNo, ukDebitNoteNo, ukDebitNoteDate, claimMonth, qty, amount, remark, userId, null);
        }
        
        /// <remarks/>
        public void CreateDummyClaimRequestAsync(int claimTypeId, int vendorId, string itemNo, string contractNo, string ukDebitNoteNo, System.DateTime ukDebitNoteDate, string claimMonth, int qty, decimal amount, string remark, int userId, object userState) {
            if ((this.CreateDummyClaimRequestOperationCompleted == null)) {
                this.CreateDummyClaimRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDummyClaimRequestOperationCompleted);
            }
            this.InvokeAsync("CreateDummyClaimRequest", new object[] {
                        claimTypeId,
                        vendorId,
                        itemNo,
                        contractNo,
                        ukDebitNoteNo,
                        ukDebitNoteDate,
                        claimMonth,
                        qty,
                        amount,
                        remark,
                        userId}, this.CreateDummyClaimRequestOperationCompleted, userState);
        }
        
        private void OnCreateDummyClaimRequestOperationCompleted(object arg) {
            if ((this.CreateDummyClaimRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDummyClaimRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveClaimRequestListByType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetActiveClaimRequestListByType(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo) {
            object[] results = this.Invoke("GetActiveClaimRequestListByType", new object[] {
                        claimRequestId,
                        claimTypeId,
                        vendorId,
                        itemNo,
                        formNo});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveClaimRequestListByTypeAsync(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo) {
            this.GetActiveClaimRequestListByTypeAsync(claimRequestId, claimTypeId, vendorId, itemNo, formNo, null);
        }
        
        /// <remarks/>
        public void GetActiveClaimRequestListByTypeAsync(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo, object userState) {
            if ((this.GetActiveClaimRequestListByTypeOperationCompleted == null)) {
                this.GetActiveClaimRequestListByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveClaimRequestListByTypeOperationCompleted);
            }
            this.InvokeAsync("GetActiveClaimRequestListByType", new object[] {
                        claimRequestId,
                        claimTypeId,
                        vendorId,
                        itemNo,
                        formNo}, this.GetActiveClaimRequestListByTypeOperationCompleted, userState);
        }
        
        private void OnGetActiveClaimRequestListByTypeOperationCompleted(object arg) {
            if ((this.GetActiveClaimRequestListByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveClaimRequestListByTypeCompleted(this, new GetActiveClaimRequestListByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPendingCancellationClaimRequestList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetPendingCancellationClaimRequestList() {
            object[] results = this.Invoke("GetPendingCancellationClaimRequestList", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingCancellationClaimRequestListAsync() {
            this.GetPendingCancellationClaimRequestListAsync(null);
        }
        
        /// <remarks/>
        public void GetPendingCancellationClaimRequestListAsync(object userState) {
            if ((this.GetPendingCancellationClaimRequestListOperationCompleted == null)) {
                this.GetPendingCancellationClaimRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingCancellationClaimRequestListOperationCompleted);
            }
            this.InvokeAsync("GetPendingCancellationClaimRequestList", new object[0], this.GetPendingCancellationClaimRequestListOperationCompleted, userState);
        }
        
        private void OnGetPendingCancellationClaimRequestListOperationCompleted(object arg) {
            if ((this.GetPendingCancellationClaimRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingCancellationClaimRequestListCompleted(this, new GetPendingCancellationClaimRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOutstandingBIAClaimRequestList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetOutstandingBIAClaimRequestList() {
            object[] results = this.Invoke("GetOutstandingBIAClaimRequestList", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOutstandingBIAClaimRequestListAsync() {
            this.GetOutstandingBIAClaimRequestListAsync(null);
        }
        
        /// <remarks/>
        public void GetOutstandingBIAClaimRequestListAsync(object userState) {
            if ((this.GetOutstandingBIAClaimRequestListOperationCompleted == null)) {
                this.GetOutstandingBIAClaimRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutstandingBIAClaimRequestListOperationCompleted);
            }
            this.InvokeAsync("GetOutstandingBIAClaimRequestList", new object[0], this.GetOutstandingBIAClaimRequestListOperationCompleted, userState);
        }
        
        private void OnGetOutstandingBIAClaimRequestListOperationCompleted(object arg) {
            if ((this.GetOutstandingBIAClaimRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutstandingBIAClaimRequestListCompleted(this, new GetOutstandingBIAClaimRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendCancelledClaimNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendCancelledClaimNotification(int claimRequestId, int userId) {
            this.Invoke("sendCancelledClaimNotification", new object[] {
                        claimRequestId,
                        userId});
        }
        
        /// <remarks/>
        public void sendCancelledClaimNotificationAsync(int claimRequestId, int userId) {
            this.sendCancelledClaimNotificationAsync(claimRequestId, userId, null);
        }
        
        /// <remarks/>
        public void sendCancelledClaimNotificationAsync(int claimRequestId, int userId, object userState) {
            if ((this.sendCancelledClaimNotificationOperationCompleted == null)) {
                this.sendCancelledClaimNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendCancelledClaimNotificationOperationCompleted);
            }
            this.InvokeAsync("sendCancelledClaimNotification", new object[] {
                        claimRequestId,
                        userId}, this.sendCancelledClaimNotificationOperationCompleted, userState);
        }
        
        private void OnsendCancelledClaimNotificationOperationCompleted(object arg) {
            if ((this.sendCancelledClaimNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendCancelledClaimNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClaimRequestListByTypeMapping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetClaimRequestListByTypeMapping(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo) {
            object[] results = this.Invoke("GetClaimRequestListByTypeMapping", new object[] {
                        claimRequestId,
                        claimTypeId,
                        vendorId,
                        itemNo,
                        formNo});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClaimRequestListByTypeMappingAsync(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo) {
            this.GetClaimRequestListByTypeMappingAsync(claimRequestId, claimTypeId, vendorId, itemNo, formNo, null);
        }
        
        /// <remarks/>
        public void GetClaimRequestListByTypeMappingAsync(int claimRequestId, int claimTypeId, int vendorId, string itemNo, string formNo, object userState) {
            if ((this.GetClaimRequestListByTypeMappingOperationCompleted == null)) {
                this.GetClaimRequestListByTypeMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClaimRequestListByTypeMappingOperationCompleted);
            }
            this.InvokeAsync("GetClaimRequestListByTypeMapping", new object[] {
                        claimRequestId,
                        claimTypeId,
                        vendorId,
                        itemNo,
                        formNo}, this.GetClaimRequestListByTypeMappingOperationCompleted, userState);
        }
        
        private void OnGetClaimRequestListByTypeMappingOperationCompleted(object arg) {
            if ((this.GetClaimRequestListByTypeMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClaimRequestListByTypeMappingCompleted(this, new GetClaimRequestListByTypeMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsSampleImageAvailable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSampleImageAvailable(int claimRequestId) {
            object[] results = this.Invoke("IsSampleImageAvailable", new object[] {
                        claimRequestId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSampleImageAvailableAsync(int claimRequestId) {
            this.IsSampleImageAvailableAsync(claimRequestId, null);
        }
        
        /// <remarks/>
        public void IsSampleImageAvailableAsync(int claimRequestId, object userState) {
            if ((this.IsSampleImageAvailableOperationCompleted == null)) {
                this.IsSampleImageAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSampleImageAvailableOperationCompleted);
            }
            this.InvokeAsync("IsSampleImageAvailable", new object[] {
                        claimRequestId}, this.IsSampleImageAvailableOperationCompleted, userState);
        }
        
        private void OnIsSampleImageAvailableOperationCompleted(object arg) {
            if ((this.IsSampleImageAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSampleImageAvailableCompleted(this, new IsSampleImageAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsAuthorizationFormAvailable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAuthorizationFormAvailable(int claimRequestId) {
            object[] results = this.Invoke("IsAuthorizationFormAvailable", new object[] {
                        claimRequestId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAuthorizationFormAvailableAsync(int claimRequestId) {
            this.IsAuthorizationFormAvailableAsync(claimRequestId, null);
        }
        
        /// <remarks/>
        public void IsAuthorizationFormAvailableAsync(int claimRequestId, object userState) {
            if ((this.IsAuthorizationFormAvailableOperationCompleted == null)) {
                this.IsAuthorizationFormAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAuthorizationFormAvailableOperationCompleted);
            }
            this.InvokeAsync("IsAuthorizationFormAvailable", new object[] {
                        claimRequestId}, this.IsAuthorizationFormAvailableOperationCompleted, userState);
        }
        
        private void OnIsAuthorizationFormAvailableOperationCompleted(object arg) {
            if ((this.IsAuthorizationFormAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAuthorizationFormAvailableCompleted(this, new IsAuthorizationFormAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClaimTypeDMSDescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClaimTypeDMSDescription(int claimTypeId) {
            object[] results = this.Invoke("GetClaimTypeDMSDescription", new object[] {
                        claimTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClaimTypeDMSDescriptionAsync(int claimTypeId) {
            this.GetClaimTypeDMSDescriptionAsync(claimTypeId, null);
        }
        
        /// <remarks/>
        public void GetClaimTypeDMSDescriptionAsync(int claimTypeId, object userState) {
            if ((this.GetClaimTypeDMSDescriptionOperationCompleted == null)) {
                this.GetClaimTypeDMSDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClaimTypeDMSDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetClaimTypeDMSDescription", new object[] {
                        claimTypeId}, this.GetClaimTypeDMSDescriptionOperationCompleted, userState);
        }
        
        private void OnGetClaimTypeDMSDescriptionOperationCompleted(object arg) {
            if ((this.GetClaimTypeDMSDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClaimTypeDMSDescriptionCompleted(this, new GetClaimTypeDMSDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkflowStatusDescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWorkflowStatusDescription(int workflowStatusId) {
            object[] results = this.Invoke("GetWorkflowStatusDescription", new object[] {
                        workflowStatusId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowStatusDescriptionAsync(int workflowStatusId) {
            this.GetWorkflowStatusDescriptionAsync(workflowStatusId, null);
        }
        
        /// <remarks/>
        public void GetWorkflowStatusDescriptionAsync(int workflowStatusId, object userState) {
            if ((this.GetWorkflowStatusDescriptionOperationCompleted == null)) {
                this.GetWorkflowStatusDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowStatusDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowStatusDescription", new object[] {
                        workflowStatusId}, this.GetWorkflowStatusDescriptionOperationCompleted, userState);
        }
        
        private void OnGetWorkflowStatusDescriptionOperationCompleted(object arg) {
            if ((this.GetWorkflowStatusDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowStatusDescriptionCompleted(this, new GetWorkflowStatusDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.36392")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ClaimRequestDef : DomainData {
        
        private int requestIdField;
        
        private string formNoField;
        
        private ClaimTypeEnum claimTypeField;
        
        private VendorRef vendorField;
        
        private System.DateTime issueDateField;
        
        private string itemNoField;
        
        private string contractNoField;
        
        private string claimMonthField;
        
        private int faultQtyField;
        
        private int faultReasonIdField;
        
        private decimal vendorRechargePercentField;
        
        private decimal nSRechargePercentField;
        
        private string remarkField;
        
        private decimal amountField;
        
        private ClaimWFS workflowStatusField;
        
        private int workflowStatusIdField;
        
        private bool noFormField;
        
        private bool isAuthorizedField;
        
        private System.DateTime createDateField;
        
        private int bIACurrencyIdField;
        
        private decimal bIAAmountField;
        
        private string bIARemarkField;
        
        private int bIAStatusField;
        
        private bool isRemarkUpdatedField;
        
        private int isSampleAttachedField;
        
        private int isEmailCorrespondenceAttachedField;
        
        /// <remarks/>
        public int RequestId {
            get {
                return this.requestIdField;
            }
            set {
                this.requestIdField = value;
            }
        }
        
        /// <remarks/>
        public string FormNo {
            get {
                return this.formNoField;
            }
            set {
                this.formNoField = value;
            }
        }
        
        /// <remarks/>
        public ClaimTypeEnum ClaimType {
            get {
                return this.claimTypeField;
            }
            set {
                this.claimTypeField = value;
            }
        }
        
        /// <remarks/>
        public VendorRef Vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        public string ItemNo {
            get {
                return this.itemNoField;
            }
            set {
                this.itemNoField = value;
            }
        }
        
        /// <remarks/>
        public string ContractNo {
            get {
                return this.contractNoField;
            }
            set {
                this.contractNoField = value;
            }
        }
        
        /// <remarks/>
        public string ClaimMonth {
            get {
                return this.claimMonthField;
            }
            set {
                this.claimMonthField = value;
            }
        }
        
        /// <remarks/>
        public int FaultQty {
            get {
                return this.faultQtyField;
            }
            set {
                this.faultQtyField = value;
            }
        }
        
        /// <remarks/>
        public int FaultReasonId {
            get {
                return this.faultReasonIdField;
            }
            set {
                this.faultReasonIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal VendorRechargePercent {
            get {
                return this.vendorRechargePercentField;
            }
            set {
                this.vendorRechargePercentField = value;
            }
        }
        
        /// <remarks/>
        public decimal NSRechargePercent {
            get {
                return this.nSRechargePercentField;
            }
            set {
                this.nSRechargePercentField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public ClaimWFS WorkflowStatus {
            get {
                return this.workflowStatusField;
            }
            set {
                this.workflowStatusField = value;
            }
        }
        
        /// <remarks/>
        public int WorkflowStatusId {
            get {
                return this.workflowStatusIdField;
            }
            set {
                this.workflowStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public bool NoForm {
            get {
                return this.noFormField;
            }
            set {
                this.noFormField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAuthorized {
            get {
                return this.isAuthorizedField;
            }
            set {
                this.isAuthorizedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public int BIACurrencyId {
            get {
                return this.bIACurrencyIdField;
            }
            set {
                this.bIACurrencyIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal BIAAmount {
            get {
                return this.bIAAmountField;
            }
            set {
                this.bIAAmountField = value;
            }
        }
        
        /// <remarks/>
        public string BIARemark {
            get {
                return this.bIARemarkField;
            }
            set {
                this.bIARemarkField = value;
            }
        }
        
        /// <remarks/>
        public int BIAStatus {
            get {
                return this.bIAStatusField;
            }
            set {
                this.bIAStatusField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRemarkUpdated {
            get {
                return this.isRemarkUpdatedField;
            }
            set {
                this.isRemarkUpdatedField = value;
            }
        }
        
        /// <remarks/>
        public int IsSampleAttached {
            get {
                return this.isSampleAttachedField;
            }
            set {
                this.isSampleAttachedField = value;
            }
        }
        
        /// <remarks/>
        public int IsEmailCorrespondenceAttached {
            get {
                return this.isEmailCorrespondenceAttachedField;
            }
            set {
                this.isEmailCorrespondenceAttachedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.36392")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ClaimTypeEnum {
        
        /// <remarks/>
        Rework,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        MFRN,
        
        /// <remarks/>
        CFS,
        
        /// <remarks/>
        Safety,
        
        /// <remarks/>
        QCC,
        
        /// <remarks/>
        CHB,
        
        /// <remarks/>
        FabricTest,
        
        /// <remarks/>
        PenaltyCharge,
        
        /// <remarks/>
        FIRATest,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.36392")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class VendorRef : DomainData {
        
        private int vendorIdField;
        
        private string nameField;
        
        private string countryDescriptionField;
        
        private string cityDescriptionField;
        
        /// <remarks/>
        public int VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string CountryDescription {
            get {
                return this.countryDescriptionField;
            }
            set {
                this.countryDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string CityDescription {
            get {
                return this.cityDescriptionField;
            }
            set {
                this.cityDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ClaimWFS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VendorRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ClaimRequestDef))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.36392")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DomainData {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.36392")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ClaimWFS : DomainData {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetClaimRequestByKeyCompletedEventHandler(object sender, GetClaimRequestByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClaimRequestByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClaimRequestByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClaimRequestDef Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClaimRequestDef)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void SetClaimRequestStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void UpdateVendorIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void MarkBIATransmitCompletedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void CreateDummyClaimRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetActiveClaimRequestListByTypeCompletedEventHandler(object sender, GetActiveClaimRequestListByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveClaimRequestListByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveClaimRequestListByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetPendingCancellationClaimRequestListCompletedEventHandler(object sender, GetPendingCancellationClaimRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingCancellationClaimRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingCancellationClaimRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetOutstandingBIAClaimRequestListCompletedEventHandler(object sender, GetOutstandingBIAClaimRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutstandingBIAClaimRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutstandingBIAClaimRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void sendCancelledClaimNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetClaimRequestListByTypeMappingCompletedEventHandler(object sender, GetClaimRequestListByTypeMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClaimRequestListByTypeMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClaimRequestListByTypeMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void IsSampleImageAvailableCompletedEventHandler(object sender, IsSampleImageAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSampleImageAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSampleImageAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void IsAuthorizationFormAvailableCompletedEventHandler(object sender, IsAuthorizationFormAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAuthorizationFormAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAuthorizationFormAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetClaimTypeDMSDescriptionCompletedEventHandler(object sender, GetClaimTypeDMSDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClaimTypeDMSDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClaimTypeDMSDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    public delegate void GetWorkflowStatusDescriptionCompletedEventHandler(object sender, GetWorkflowStatusDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.36392")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowStatusDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowStatusDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591